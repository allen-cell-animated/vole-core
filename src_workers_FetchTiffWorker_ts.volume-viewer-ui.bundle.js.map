{"version":3,"file":"src_workers_FetchTiffWorker_ts.volume-viewer-ui.bundle.js","mappings":"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","sources":["webpack://@aics/volume-viewer/./src/loaders/VolumeLoadError.ts","webpack://@aics/volume-viewer/./src/workers/FetchTiffWorker.ts","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|http","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|https","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|url","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source|fs","webpack://@aics/volume-viewer/webpack/bootstrap","webpack://@aics/volume-viewer/webpack/runtime/chunk loaded","webpack://@aics/volume-viewer/webpack/runtime/define property getters","webpack://@aics/volume-viewer/webpack/runtime/ensure chunk","webpack://@aics/volume-viewer/webpack/runtime/get javascript chunk filename","webpack://@aics/volume-viewer/webpack/runtime/global","webpack://@aics/volume-viewer/webpack/runtime/hasOwnProperty shorthand","webpack://@aics/volume-viewer/webpack/runtime/make namespace object","webpack://@aics/volume-viewer/webpack/runtime/publicPath","webpack://@aics/volume-viewer/webpack/runtime/importScripts chunk loading","webpack://@aics/volume-viewer/webpack/runtime/startup chunk dependencies","webpack://@aics/volume-viewer/webpack/before-startup","webpack://@aics/volume-viewer/webpack/startup","webpack://@aics/volume-viewer/webpack/after-startup"],"sourcesContent":["import { errorConstructors } from \"serialize-error\";\nimport { NodeNotFoundError, KeyError } from \"@zarrita/core\";\n// geotiff doesn't export its error types...\n\n/** Groups possible load errors into a few broad categories which we can give similar guidance to the user about. */\nexport const enum VolumeLoadErrorType {\n  UNKNOWN = \"unknown\",\n  NOT_FOUND = \"not_found\",\n  TOO_LARGE = \"too_large\",\n  LOAD_DATA_FAILED = \"load_data_failed\",\n  INVALID_METADATA = \"invalid_metadata\",\n  INVALID_MULTI_SOURCE_ZARR = \"invalid_multi_source_zarr\",\n}\n\nexport class VolumeLoadError extends Error {\n  type: VolumeLoadErrorType;\n\n  constructor(message?: string, options?: { cause?: unknown; type?: VolumeLoadErrorType }) {\n    super(message, options);\n    this.name = \"VolumeLoadError\";\n    this.type = options?.type ?? VolumeLoadErrorType.UNKNOWN;\n  }\n}\n\n// serialize-error only ever calls an error constructor with zero arguments. The required `ErrorConstructor`\n// type is a bit too restrictive - as long as the constructor can be called with no arguments it's fine.\nerrorConstructors.set(\"NodeNotFoundError\", NodeNotFoundError as ErrorConstructor);\nerrorConstructors.set(\"KeyError\", KeyError as ErrorConstructor);\nerrorConstructors.set(\"VolumeLoadError\", VolumeLoadError as unknown as ErrorConstructor);\n\n/** Curried function to re-throw an error wrapped in a `VolumeLoadError` with the given `message` and `type`. */\nexport function wrapVolumeLoadError<T>(\n  message = \"Unknown error occurred while loading volume data\",\n  type = VolumeLoadErrorType.UNKNOWN,\n  ignore?: unknown\n): (e: T) => T {\n  return (e: T) => {\n    if (ignore !== undefined && e === ignore) {\n      return e;\n    }\n    if (e instanceof VolumeLoadError) {\n      throw e;\n    }\n    console.log(`Error loading volume data: ${e}`);\n    throw new VolumeLoadError(message, { type, cause: e });\n  };\n}\n","import { fromUrl } from \"geotiff\";\nimport { serializeError } from \"serialize-error\";\n\nimport type { TiffLoadResult, TiffWorkerParams } from \"../loaders/TiffLoader.js\";\nimport { VolumeLoadError, VolumeLoadErrorType } from \"../loaders/VolumeLoadError.js\";\nimport { NumberType } from \"../types.js\";\n\ntype TypedArray =\n  | Uint8Array\n  | Int8Array\n  | Uint16Array\n  | Int16Array\n  | Uint32Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n\n// from TIFF\nconst SAMPLEFORMAT_UINT = 1;\nconst SAMPLEFORMAT_INT = 2;\nconst SAMPLEFORMAT_IEEEFP = 3;\n\nfunction getDtype(sampleFormat: number, bytesPerPixel: number): NumberType {\n  if (sampleFormat === SAMPLEFORMAT_IEEEFP) {\n    if (bytesPerPixel === 4) {\n      return \"float32\";\n    }\n  } else if (sampleFormat === SAMPLEFORMAT_INT) {\n    if (bytesPerPixel === 1) {\n      return \"int8\";\n    } else if (bytesPerPixel === 2) {\n      return \"int16\";\n    } else if (bytesPerPixel === 4) {\n      return \"int32\";\n    }\n  } else if (sampleFormat === SAMPLEFORMAT_UINT) {\n    if (bytesPerPixel === 1) {\n      return \"uint8\";\n    } else if (bytesPerPixel === 2) {\n      return \"uint16\";\n    } else if (bytesPerPixel === 4) {\n      return \"uint32\";\n    }\n  }\n  console.error(`TIFF Worker: unsupported sample format ${sampleFormat} and bytes per pixel ${bytesPerPixel}`);\n  return \"uint8\";\n}\nfunction castToArray(buf: ArrayBuffer, bytesPerPixel: number, sampleFormat: number): TypedArray {\n  if (sampleFormat === SAMPLEFORMAT_IEEEFP) {\n    if (bytesPerPixel === 4) {\n      return new Float32Array(buf);\n    }\n  } else if (sampleFormat === SAMPLEFORMAT_INT) {\n    if (bytesPerPixel === 1) {\n      return new Int8Array(buf);\n    } else if (bytesPerPixel === 2) {\n      return new Int16Array(buf);\n    } else if (bytesPerPixel === 4) {\n      return new Int32Array(buf);\n    }\n  } else if (sampleFormat === SAMPLEFORMAT_UINT) {\n    if (bytesPerPixel === 1) {\n      return new Uint8Array(buf);\n    } else if (bytesPerPixel === 2) {\n      return new Uint16Array(buf);\n    } else if (bytesPerPixel === 4) {\n      return new Uint32Array(buf);\n    }\n  }\n  console.error(`TIFF Worker: unsupported sample format ${sampleFormat} and bytes per pixel ${bytesPerPixel}`);\n  return new Uint8Array(buf);\n}\n\nasync function loadTiffChannel(e: MessageEvent<TiffWorkerParams>): Promise<TiffLoadResult> {\n  // TODO index images by time\n  // const time = e.data.time;\n\n  const channelIndex = e.data.channel;\n  const tilesizex = e.data.tilesizex;\n  const tilesizey = e.data.tilesizey;\n  const sizez = e.data.sizez;\n  const sizec = e.data.sizec;\n  const dimensionOrder = e.data.dimensionOrder;\n  const bytesPerSample = e.data.bytesPerSample;\n\n  const tiff = await fromUrl(e.data.url, { allowFullFile: true });\n\n  // load the images of this channel from the tiff\n  // today assume TCZYX so the slices are already in order.\n  let startindex = 0;\n  let incrementz = 1;\n  if (dimensionOrder === \"XYZCT\") {\n    // we have XYZCT which is the \"good\" case\n    // TCZYX\n    startindex = sizez * channelIndex;\n    incrementz = 1;\n  } else if (dimensionOrder === \"XYCZT\") {\n    // we have to loop differently to increment channels\n    // TZCYX\n    startindex = channelIndex;\n    incrementz = sizec;\n  }\n\n  // huge assumption: planes are in a particular order relative to z and c\n\n  // get first plane, to get some details about the image\n  const image = await tiff.getImage(startindex);\n  // on first image, set up some stuff:\n  const sampleFormat = image.getSampleFormat();\n  const bytesPerPixel = image.getBytesPerPixel();\n  // allocate a buffer for one channel\n  const buffer = new ArrayBuffer(tilesizex * tilesizey * sizez * bytesPerPixel);\n  const u8 = new Uint8Array(buffer);\n\n  for (let imageIndex = startindex, zslice = 0; zslice < sizez; imageIndex += incrementz, ++zslice) {\n    const image = await tiff.getImage(imageIndex);\n    // download and downsample on client\n    const result = await image.readRasters({ width: tilesizex, height: tilesizey });\n    const arrayresult: TypedArray = Array.isArray(result) ? result[0] : result;\n    // deposit in full channel array in the right place\n    const offset = zslice * tilesizex * tilesizey;\n    if (arrayresult.BYTES_PER_ELEMENT > 4) {\n      throw new VolumeLoadError(\"byte size not supported yet: \" + arrayresult.BYTES_PER_ELEMENT, {\n        type: VolumeLoadErrorType.INVALID_METADATA,\n      });\n    } else if (arrayresult.BYTES_PER_ELEMENT !== bytesPerSample) {\n      throw new VolumeLoadError(\"tiff bytes per element mismatch with OME metadata\", {\n        type: VolumeLoadErrorType.INVALID_METADATA,\n      });\n    } else {\n      u8.set(new Uint8Array(arrayresult.buffer), offset * arrayresult.BYTES_PER_ELEMENT);\n    }\n  }\n  // all slices collected, now resample to 8 bits full data range\n  const src = castToArray(buffer, bytesPerPixel, sampleFormat);\n  const dtype = getDtype(sampleFormat, bytesPerPixel);\n  let chmin = src[0];\n  let chmax = src[0];\n  for (let j = 0; j < src.length; ++j) {\n    const val = src[j];\n    if (val < chmin) {\n      chmin = val;\n    }\n    if (val > chmax) {\n      chmax = val;\n    }\n  }\n\n  return { data: src, channel: channelIndex, range: [chmin, chmax], dtype: dtype, isError: false };\n}\n\nself.onmessage = async (e) => {\n  try {\n    const result = await loadTiffChannel(e);\n    (self as unknown as Worker).postMessage(result, [result.data.buffer]);\n  } catch (err) {\n    self.postMessage({ isError: true, error: serializeError(err) });\n  }\n};\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_zarrita_core_dist_src_errors_js-node_modules_geotiff_dist-module_geotiff-5b1ba2\"], () => (__webpack_require__(\"./src/workers/FetchTiffWorker.ts\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".volume-viewer-ui.bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_workers_FetchTiffWorker_ts\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_aics_volume_viewer\"] = self[\"webpackChunk_aics_volume_viewer\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(\"vendors-node_modules_zarrita_core_dist_src_errors_js-node_modules_geotiff_dist-module_geotiff-5b1ba2\").then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":["errorConstructors","NodeNotFoundError","KeyError","VolumeLoadErrorType","VolumeLoadError","Error","constructor","message","options","name","type","UNKNOWN","set","wrapVolumeLoadError","ignore","e","undefined","console","log","cause","fromUrl","serializeError","SAMPLEFORMAT_UINT","SAMPLEFORMAT_INT","SAMPLEFORMAT_IEEEFP","getDtype","sampleFormat","bytesPerPixel","error","castToArray","buf","Float32Array","Int8Array","Int16Array","Int32Array","Uint8Array","Uint16Array","Uint32Array","loadTiffChannel","channelIndex","data","channel","tilesizex","tilesizey","sizez","sizec","dimensionOrder","bytesPerSample","tiff","url","allowFullFile","startindex","incrementz","image","getImage","getSampleFormat","getBytesPerPixel","buffer","ArrayBuffer","u8","imageIndex","zslice","result","readRasters","width","height","arrayresult","Array","isArray","offset","BYTES_PER_ELEMENT","INVALID_METADATA","src","dtype","chmin","chmax","j","length","val","range","isError","self","onmessage","postMessage","err"],"sourceRoot":""}