"use strict";
(self["webpackChunk_aics_volume_viewer"] = self["webpackChunk_aics_volume_viewer"] || []).push([["node_modules_numcodecs_gzip_js"],{

/***/ "./node_modules/numcodecs/gzip.js":
/*!****************************************!*\
  !*** ./node_modules/numcodecs/gzip.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _pako_esm_856454b6_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pako.esm-856454b6.js */ "./node_modules/numcodecs/pako.esm-856454b6.js");


var _a;
const GZip = (_a = class {
  constructor(level = 1) {
    if (level < 0 || level > 9) {
      throw new Error("Invalid gzip compression level, it should be between 0 and 9");
    }
    this.level = level;
  }
  static fromConfig({ level }) {
    return new _a(level);
  }
  encode(data) {
    const gzipped = _pako_esm_856454b6_js__WEBPACK_IMPORTED_MODULE_0__.p.gzip(data, { level: this.level });
    return gzipped;
  }
  decode(data, out) {
    const uncompressed = _pako_esm_856454b6_js__WEBPACK_IMPORTED_MODULE_0__.p.ungzip(data);
    if (out !== void 0) {
      out.set(uncompressed);
      return out;
    }
    return uncompressed;
  }
}, _a.codecId = "gzip", _a);

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GZip);


/***/ })

}]);
//# sourceMappingURL=node_modules_numcodecs_gzip_js.volume-viewer-ui.bundle.js.map