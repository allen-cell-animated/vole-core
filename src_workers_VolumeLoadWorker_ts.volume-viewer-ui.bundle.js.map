{"version":3,"file":"src_workers_VolumeLoadWorker_ts.volume-viewer-ui.bundle.js","mappings":"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;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WClBA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;UENA;UACA","sources":["webpack://@aics/volume-viewer/./src/Channel.ts","webpack://@aics/volume-viewer/./src/Histogram.ts","webpack://@aics/volume-viewer/./src/Lut.ts","webpack://@aics/volume-viewer/./src/Volume.ts","webpack://@aics/volume-viewer/./src/VolumeCache.ts","webpack://@aics/volume-viewer/./src/constants/colors.ts","webpack://@aics/volume-viewer/./src/loaders/IVolumeLoader.ts","webpack://@aics/volume-viewer/./src/loaders/JsonImageInfoLoader.ts","webpack://@aics/volume-viewer/./src/loaders/OmeZarrLoader.ts","webpack://@aics/volume-viewer/./src/loaders/RawArrayLoader.ts","webpack://@aics/volume-viewer/./src/loaders/TiffLoader.ts","webpack://@aics/volume-viewer/./src/loaders/VolumeLoaderUtils.ts","webpack://@aics/volume-viewer/./src/loaders/index.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/ChunkPrefetchIterator.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/WrappedStore.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/types.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/utils.ts","webpack://@aics/volume-viewer/./src/types.ts","webpack://@aics/volume-viewer/./src/utils/RequestQueue.ts","webpack://@aics/volume-viewer/./src/utils/SubscribableRequestQueue.ts","webpack://@aics/volume-viewer/./src/workers/VolumeLoadWorker.ts","webpack://@aics/volume-viewer/./src/workers/types.ts","webpack://@aics/volume-viewer/./src/workers/util.ts","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|http","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|https","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|url","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source|fs","webpack://@aics/volume-viewer/webpack/bootstrap","webpack://@aics/volume-viewer/webpack/runtime/chunk loaded","webpack://@aics/volume-viewer/webpack/runtime/compat get default export","webpack://@aics/volume-viewer/webpack/runtime/define property getters","webpack://@aics/volume-viewer/webpack/runtime/ensure chunk","webpack://@aics/volume-viewer/webpack/runtime/get javascript chunk filename","webpack://@aics/volume-viewer/webpack/runtime/global","webpack://@aics/volume-viewer/webpack/runtime/hasOwnProperty shorthand","webpack://@aics/volume-viewer/webpack/runtime/make namespace object","webpack://@aics/volume-viewer/webpack/runtime/publicPath","webpack://@aics/volume-viewer/webpack/runtime/importScripts chunk loading","webpack://@aics/volume-viewer/webpack/runtime/startup chunk dependencies","webpack://@aics/volume-viewer/webpack/before-startup","webpack://@aics/volume-viewer/webpack/startup","webpack://@aics/volume-viewer/webpack/after-startup"],"sourcesContent":["import { DataTexture, RedFormat, UnsignedByteType, RGBAFormat, LinearFilter, NearestFilter } from \"three\";\nimport Histogram from \"./Histogram.js\";\nimport { Lut, LUT_ARRAY_LENGTH } from \"./Lut.js\";\n\ninterface ChannelImageData {\n  /** Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255. */\n  readonly data: Uint8ClampedArray;\n  /** Returns the actual dimensions of the data in the ImageData object, in pixels. */\n  readonly height: number;\n  /** Returns the actual dimensions of the data in the ImageData object, in pixels. */\n  readonly width: number;\n}\n\n// Data and processing for a single channel\nexport default class Channel {\n  public loaded: boolean;\n  public imgData: ChannelImageData;\n  public volumeData: Uint8Array;\n  public name: string;\n  public histogram: Histogram;\n  public lut: Lut;\n  public colorPalette: Uint8Array;\n  public colorPaletteAlpha: number;\n  public dims: [number, number, number];\n  public dataTexture: DataTexture;\n  public lutTexture: DataTexture;\n  public rawMin: number;\n  public rawMax: number;\n\n  constructor(name: string) {\n    this.loaded = false;\n    this.imgData = { data: new Uint8ClampedArray(), width: 0, height: 0 };\n    this.rawMin = 0;\n    this.rawMax = 255;\n\n    // on gpu\n    this.dataTexture = new DataTexture(new Uint8Array(), 0, 0);\n    this.lutTexture = new DataTexture(new Uint8Array(LUT_ARRAY_LENGTH), 256, 1, RGBAFormat, UnsignedByteType);\n    this.lutTexture.minFilter = this.lutTexture.magFilter = LinearFilter;\n    this.lutTexture.generateMipmaps = false;\n\n    this.volumeData = new Uint8Array();\n    this.name = name;\n    this.histogram = new Histogram(new Uint8Array());\n    this.dims = [0, 0, 0];\n\n    // intensity remapping lookup table\n    this.lut = new Lut().createFromMinMax(0, 255);\n\n    // per-intensity color labeling (disabled initially)\n    this.colorPalette = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n    // store in 0..1 range. 1 means fully colorPalette, 0 means fully lut.\n    this.colorPaletteAlpha = 0.0;\n  }\n\n  // rgbColor is [0..255, 0..255, 0..255]\n  public combineLuts(rgbColor: [number, number, number] | number, out?: Uint8Array): Uint8Array {\n    const ret = out ? out : new Uint8Array(LUT_ARRAY_LENGTH);\n    if (!rgbColor) {\n      return ret;\n    }\n    const rgb = [rgbColor[0] / 255.0, rgbColor[1] / 255.0, rgbColor[2] / 255.0];\n    // colorPalette*alpha + rgb*lut*(1-alpha)\n    // a tiny bit faster for the edge cases\n    if (this.colorPaletteAlpha === 1.0) {\n      ret.set(this.colorPalette);\n    } else if (this.colorPaletteAlpha === 0.0) {\n      ret.set(this.lut.lut);\n      for (let i = 0; i < LUT_ARRAY_LENGTH / 4; ++i) {\n        ret[i * 4 + 0] *= rgb[0];\n        ret[i * 4 + 1] *= rgb[1];\n        ret[i * 4 + 2] *= rgb[2];\n      }\n    } else {\n      for (let i = 0; i < LUT_ARRAY_LENGTH / 4; ++i) {\n        ret[i * 4 + 0] =\n          this.colorPalette[i * 4 + 0] * this.colorPaletteAlpha +\n          this.lut.lut[i * 4 + 0] * (1.0 - this.colorPaletteAlpha) * rgb[0];\n        ret[i * 4 + 1] =\n          this.colorPalette[i * 4 + 1] * this.colorPaletteAlpha +\n          this.lut.lut[i * 4 + 1] * (1.0 - this.colorPaletteAlpha) * rgb[1];\n        ret[i * 4 + 2] =\n          this.colorPalette[i * 4 + 2] * this.colorPaletteAlpha +\n          this.lut.lut[i * 4 + 2] * (1.0 - this.colorPaletteAlpha) * rgb[2];\n        ret[i * 4 + 3] =\n          this.colorPalette[i * 4 + 3] * this.colorPaletteAlpha +\n          this.lut.lut[i * 4 + 3] * (1.0 - this.colorPaletteAlpha);\n      }\n    }\n\n    this.lutTexture.image.data.set(ret);\n    this.lutTexture.needsUpdate = true;\n\n    return ret;\n  }\n\n  public setRawDataRange(min: number, max: number): void {\n    // remap the lut which was based on rawMin and rawMax to new min and max\n    // If either of the min/max ranges are both zero, then we have undefined behavior and should\n    // not remap the lut.  This situation can happen at first load, for example,\n    // when one channel has arrived but others haven't.\n    if (!(this.rawMin === 0 && this.rawMax === 0) && !(min === 0 && max === 0)) {\n      this.lut.remapDomains(this.rawMin, this.rawMax, min, max);\n      this.rawMin = min;\n      this.rawMax = max;\n    }\n  }\n\n  public getHistogram(): Histogram {\n    return this.histogram;\n  }\n\n  public getIntensity(x: number, y: number, z: number): number {\n    return this.volumeData[x + y * this.dims[0] + z * (this.dims[0] * this.dims[1])];\n  }\n\n  // how to index into tiled texture atlas\n  public getIntensityFromAtlas(x: number, y: number, z: number): number {\n    const numXtiles = this.imgData.width / this.dims[0];\n    const tilex = z % numXtiles;\n    const tiley = Math.floor(z / numXtiles);\n    const offset = tilex * this.dims[0] + x + (tiley * this.dims[1] + y) * this.imgData.width;\n    return this.imgData.data[offset];\n  }\n\n  private rebuildDataTexture(data: Uint8ClampedArray, w: number, h: number): void {\n    if (this.dataTexture) {\n      this.dataTexture.dispose();\n    }\n    this.dataTexture = new DataTexture(data, w, h);\n    this.dataTexture.format = RedFormat;\n    this.dataTexture.type = UnsignedByteType;\n    this.dataTexture.magFilter = NearestFilter;\n    this.dataTexture.minFilter = NearestFilter;\n    this.dataTexture.generateMipmaps = false;\n    this.dataTexture.needsUpdate = true;\n  }\n\n  // give the channel fresh data and initialize from that data\n  // data is formatted as a texture atlas where each tile is a z slice of the volume\n  public setBits(bitsArray: Uint8Array, w: number, h: number): void {\n    this.imgData = { data: new Uint8ClampedArray(bitsArray.buffer), width: w, height: h };\n\n    this.rebuildDataTexture(this.imgData.data, w, h);\n\n    this.loaded = true;\n    this.histogram = new Histogram(bitsArray);\n\n    const [hmin, hmax] = this.histogram.findAutoIJBins();\n    const lut = new Lut().createFromMinMax(hmin, hmax);\n    this.setLut(lut);\n  }\n\n  // let's rearrange this.imgData.data into a 3d array.\n  // it is assumed to be coming in as a flat Uint8Array of size x*y*z\n  // with x*y*z layout (first row of first plane is the first data in the layout,\n  // then second row of first plane, etc)\n  public unpackVolumeFromAtlas(x: number, y: number, z: number): void {\n    const volimgdata = this.imgData.data;\n\n    this.dims = [x, y, z];\n    this.volumeData = new Uint8Array(x * y * z);\n\n    const numXtiles = this.imgData.width / x;\n    const atlasrow = this.imgData.width;\n    let tilex = 0,\n      tiley = 0,\n      tileoffset = 0,\n      tilerowoffset = 0,\n      destOffset = 0;\n    for (let i = 0; i < z; ++i) {\n      // tile offset\n      tilex = i % numXtiles;\n      tiley = Math.floor(i / numXtiles);\n      tileoffset = tilex * x + tiley * y * atlasrow;\n      for (let j = 0; j < y; ++j) {\n        tilerowoffset = j * atlasrow;\n        destOffset = i * (x * y) + j * x;\n        this.volumeData.set(\n          volimgdata.subarray(tileoffset + tilerowoffset, tileoffset + tilerowoffset + x),\n          destOffset\n        );\n      }\n    }\n  }\n\n  // give the channel fresh volume data and initialize from that data\n  public setFromVolumeData(\n    bitsArray: Uint8Array,\n    vx: number,\n    vy: number,\n    vz: number,\n    ax: number,\n    ay: number,\n    rawMin = 0,\n    rawMax = 255\n  ): void {\n    this.dims = [vx, vy, vz];\n    this.volumeData = bitsArray;\n    // TODO FIXME performance hit for shuffling the data and storing 2 versions of it (could do this in worker at least?)\n    this.packToAtlas(vx, vy, vz, ax, ay);\n    this.loaded = true;\n    // update from current histogram?\n    this.setRawDataRange(rawMin, rawMax);\n    this.histogram = new Histogram(this.volumeData);\n  }\n\n  // given this.volumeData, let's unpack it into a flat textureatlas and fill up this.imgData.\n  private packToAtlas(vx: number, vy: number, vz: number, ax: number, ay: number): void {\n    // big assumptions:\n    // atlassize is a perfect multiple of volumesize in both x and y\n    // ax % vx == 0\n    // ay % vy == 0\n    // and num slices <= num possible slices in atlas.\n    // (ax/vx) * (ay/vy) >= vz\n    if (ax % vx !== 0 || ay % vy !== 0 || (ax / vx) * (ay / vy) < vz) {\n      console.log(\"ERROR - atlas and volume dims are inconsistent\");\n      console.log(ax, ay, vx, vy, vz);\n    }\n\n    this.imgData = {\n      width: ax,\n      height: ay,\n      data: new Uint8ClampedArray(ax * ay),\n    };\n    this.imgData.data.fill(0);\n\n    // deposit slices one by one into the imgData.data from volData.\n    const volimgdata = this.imgData.data;\n\n    const x = vx,\n      y = vy,\n      z = vz;\n\n    const numXtiles = this.imgData.width / x;\n    const atlasrow = this.imgData.width;\n    let tilex = 0,\n      tiley = 0,\n      tileoffset = 0,\n      tilerowoffset = 0,\n      sourceOffset = 0;\n    for (let i = 0; i < z; ++i) {\n      // tile offset\n      tilex = i % numXtiles;\n      tiley = Math.floor(i / numXtiles);\n      tileoffset = tilex * x + tiley * y * atlasrow;\n      for (let j = 0; j < y; ++j) {\n        tilerowoffset = j * atlasrow;\n        sourceOffset = i * (x * y) + j * x;\n        volimgdata.set(this.volumeData.subarray(sourceOffset, sourceOffset + x), tileoffset + tilerowoffset);\n      }\n    }\n\n    this.rebuildDataTexture(this.imgData.data, ax, ay);\n  }\n\n  public setLut(lut: Lut): void {\n    this.lut = lut;\n  }\n\n  // palette should be an uint8array of 256*4 elements (256 rgba8 values)\n  public setColorPalette(palette: Uint8Array): void {\n    this.colorPalette = palette;\n  }\n\n  public setColorPaletteAlpha(alpha: number): void {\n    this.colorPaletteAlpha = alpha;\n  }\n}\n","/**\n * Builds a histogram with 256 bins from a data array. Assume data is 8 bit single channel grayscale.\n * @class\n * @param {Array.<number>} data\n */\nexport default class Histogram {\n  private bins: Uint32Array;\n  private dataMin: number;\n  private dataMax: number;\n  private nonzeroPixelCount: number;\n  public maxBin: number;\n\n  constructor(data: Uint8Array) {\n    // no more than 2^32 pixels of any one intensity in the data!?!?!\n    this.bins = new Uint32Array(256);\n    this.bins.fill(0);\n    this.dataMin = 255;\n    this.dataMax = 0;\n    this.maxBin = 0;\n\n    // build up the histogram\n    for (let i = 0; i < data.length; ++i) {\n      this.bins[data[i]]++;\n    }\n    // track the first and last nonzero bins with at least 1 sample\n    for (let i = 1; i < this.bins.length; i++) {\n      if (this.bins[i] > 0) {\n        this.dataMin = i;\n        break;\n      }\n    }\n    for (let i = this.bins.length - 1; i >= 1; i--) {\n      if (this.bins[i] > 0) {\n        this.dataMax = i;\n        break;\n      }\n    }\n\n    // total number of pixels minus the number of zero pixels\n    this.nonzeroPixelCount = data.length - this.bins[0];\n\n    // get the bin with the most frequently occurring NONZERO value\n    this.maxBin = 1;\n    let max = this.bins[1];\n    for (let i = 1; i < this.bins.length; i++) {\n      if (this.bins[i] > max) {\n        this.maxBin = i;\n        max = this.bins[i];\n      }\n    }\n  }\n\n  /**\n   * Return the min data value\n   * @return {number}\n   */\n  getMin(): number {\n    return this.dataMin;\n  }\n\n  /**\n   * Return the max data value\n   * @return {number}\n   */\n  getMax(): number {\n    return this.dataMax;\n  }\n\n  getNumBins(): number {\n    return this.bins.length;\n  }\n  getBin(i: number): number {\n    return this.bins[i];\n  }\n\n  /**\n   * Find the bin that contains the percentage of pixels below it\n   * @return {number}\n   * @param {number} pct\n   */\n  findBinOfPercentile(pct: number): number {\n    const pixcount = this.nonzeroPixelCount + this.bins[0];\n    const limit = pixcount * pct;\n\n    let i = 0;\n    let count = 0;\n    for (i = 0; i < this.bins.length; ++i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    return i;\n  }\n\n  // Find bins at 10th / 90th percentile\n  findBestFitBins(): [number, number] {\n    const pixcount = this.nonzeroPixelCount;\n    //const pixcount = this.imgData.data.length;\n    const limit = pixcount / 10;\n\n    let i = 0;\n    let count = 0;\n    for (i = 1; i < this.bins.length; ++i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    const hmin = i;\n\n    count = 0;\n    for (i = this.bins.length - 1; i >= 1; --i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    const hmax = i;\n\n    return [hmin, hmax];\n  }\n\n  // Find min and max bins attempting to replicate ImageJ's \"Auto\" button\n  findAutoIJBins(): [number, number] {\n    const AUTO_THRESHOLD = 5000;\n    const pixcount = this.nonzeroPixelCount;\n    //  const pixcount = this.imgData.data.length;\n    const limit = pixcount / 10;\n    const threshold = pixcount / AUTO_THRESHOLD;\n\n    // this will skip the \"zero\" bin which contains pixels of zero intensity.\n    let hmin = this.bins.length - 1;\n    let hmax = 1;\n    for (let i = 1; i < this.bins.length; ++i) {\n      if (this.bins[i] > threshold && this.bins[i] <= limit) {\n        hmin = i;\n        break;\n      }\n    }\n    for (let i = this.bins.length - 1; i >= 1; --i) {\n      if (this.bins[i] > threshold && this.bins[i] <= limit) {\n        hmax = i;\n        break;\n      }\n    }\n\n    if (hmax < hmin) {\n      hmin = 0;\n      hmax = 255;\n    }\n\n    return [hmin, hmax];\n  }\n\n  // Find min and max bins using a percentile of the most commonly occurring value\n  findAutoMinMax(): [number, number] {\n    // simple linear mapping cutting elements with small appearence\n    // get 10% threshold\n    const PERCENTAGE = 0.1;\n    const th = Math.floor(this.bins[this.maxBin] * PERCENTAGE);\n    let b = 0;\n    let e = this.bins.length - 1;\n    for (let x = 1; x < this.bins.length; ++x) {\n      if (this.bins[x] > th) {\n        b = x;\n        break;\n      }\n    }\n    for (let x = this.bins.length - 1; x >= 1; --x) {\n      if (this.bins[x] > th) {\n        e = x;\n        break;\n      }\n    }\n    return [b, e];\n  }\n}\n","import { getColorByChannelIndex } from \"./constants/colors.js\";\nimport Histogram from \"./Histogram.js\";\n\nfunction clamp(val: number, cmin: number, cmax: number): number {\n  return Math.min(Math.max(cmin, val), cmax);\n}\n\nfunction lerp(xmin, xmax, a) {\n  return a * (xmax - xmin) + xmin;\n}\n\n// We have an intensity value that is in the range of valueMin to valueMax.\n// This domain is assumed to have been remapped from oldMin to oldMax.\n// We now wish to find the intensity value that corresponds to the same relative position in the new domain of newMin to newMax.\n// For our Luts valueMin will always be 0, and valueMax will always be 255.\n// oldMin and oldMax will be the domain of the original raw data intensities.\n// newMin and newMax will be the domain of the new raw data intensities.\nfunction remapDomain(\n  value: number,\n  valueMin: number,\n  valueMax: number,\n  oldMin: number,\n  oldMax: number,\n  newMin: number,\n  newMax: number\n): number {\n  const pctOfRange = (value - valueMin) / (valueMax - valueMin);\n  const newValue = (newMax - newMin) * pctOfRange + newMin;\n  // now locate this value as a relative index in the old range\n  const pctOfOldRange = (newValue - oldMin) / (oldMax - oldMin);\n  const remapped = valueMin + pctOfOldRange * (valueMax - valueMin);\n  return remapped;\n}\n\n// We have an intensity value that is in the range of valueMin to valueMax.\n// The input value range is assumed to represent absolute intensity range oldMin to oldMax.\n// We now wish to find the new position of this intensity value\n// when the valueMin-valueMax represents absolute range newMin to newMax\n// After the remapping, the intensity value will be in the range of valueMin to valueMax.\n// For our Luts valueMin will always be 0, and valueMax will always be 255.\n// oldMin and oldMax will be the domain of the original raw data intensities.\n// newMin and newMax will be the domain of the new raw data intensities.\nfunction remapDomainForCP(\n  value: number,\n  valueMin: number,\n  valueMax: number,\n  oldMin: number,\n  oldMax: number,\n  newMin: number,\n  newMax: number\n): number {\n  const pctOfRange = (value - valueMin) / (valueMax - valueMin);\n  // find abs intensity from old range\n  const iOld = (oldMax - oldMin) * pctOfRange + oldMin;\n  // now locate this value as a relative index in the new range\n  const pctOfNewRange = (iOld - newMin) / (newMax - newMin);\n  const remapped = valueMin + pctOfNewRange * (valueMax - valueMin);\n  return remapped;\n}\n\nexport const LUT_ENTRIES = 256;\nexport const LUT_ARRAY_LENGTH = LUT_ENTRIES * 4;\n\n/**\n * @typedef {Object} ControlPoint Used for the TF (transfer function) editor GUI.\n * Need to be converted to LUT for rendering.\n * @property {number} x The X Coordinate\n * @property {number} opacity The Opacity, from 0 to 1\n * @property {Array.<number>} color The Color, 3 numbers from 0-255 for r,g,b\n */\nexport type ControlPoint = {\n  x: number;\n  opacity: number;\n  color: [number, number, number];\n};\n\nfunction controlPointToRGBA(controlPoint) {\n  return [controlPoint.color[0], controlPoint.color[1], controlPoint.color[2], Math.floor(controlPoint.opacity * 255)];\n}\n\n/**\n * @typedef {Object} Lut Used for rendering.\n * @property {Array.<number>} lut LUT_ARRAY_LENGTH element lookup table as array\n * (maps scalar intensity to a rgb color plus alpha, with each value from 0-255)\n * @property {Array.<ControlPoint>} controlPoints\n */\nexport class Lut {\n  public lut: Uint8Array;\n  public controlPoints: ControlPoint[];\n\n  constructor() {\n    this.lut = new Uint8Array(LUT_ARRAY_LENGTH);\n    this.controlPoints = [];\n    this.createFullRange();\n  }\n\n  /**\n   * Generate a piecewise linear lookup table that ramps up from 0 to 1 over the b to e domain.\n   * If e === b, then we use a step function with f(b) = 0 and f(b + 1) = 1\n   *  |\n   * 1|               +---------+-----\n   *  |              /\n   *  |             /\n   *  |            /\n   *  |           /\n   *  |          /\n   * 0+=========+---------------+-----\n   *  0         b    e         255\n   * @return {Lut}\n   * @param {number} b\n   * @param {number} e\n   */\n  createFromMinMax(b: number, e: number): Lut {\n    if (e < b) {\n      // swap\n      const tmp = e;\n      e = b;\n      b = tmp;\n    }\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n    for (let x = 0; x < lut.length / 4; ++x) {\n      lut[x * 4 + 0] = 255;\n      lut[x * 4 + 1] = 255;\n      lut[x * 4 + 2] = 255;\n      if (x > e) {\n        lut[x * 4 + 3] = 255;\n      } else if (x <= b) {\n        lut[x * 4 + 3] = 0;\n      } else {\n        if (e === b) {\n          lut[x * 4 + 3] = 255;\n        } else {\n          const a = (x - b) / (e - b);\n          lut[x * 4 + 3] = lerp(0, 255, a);\n        }\n      }\n    }\n\n    // Edge case: b and e are both out of bounds\n    if (b < 0 && e < 0) {\n      this.lut = lut;\n      this.controlPoints = [\n        { x: 0, opacity: 1, color: [255, 255, 255] },\n        { x: 255, opacity: 1, color: [255, 255, 255] },\n      ];\n      return this;\n    }\n    if (b >= 255 && e >= 255) {\n      this.lut = lut;\n      this.controlPoints = [\n        { x: 0, opacity: 0, color: [255, 255, 255] },\n        { x: 255, opacity: 0, color: [255, 255, 255] },\n      ];\n      return this;\n    }\n\n    // Generate 2 to 4 control points for a minMax LUT, from left to right\n    const controlPoints: ControlPoint[] = [];\n\n    // Add starting point at x = 0\n    let startVal = 0;\n    if (b < 0) {\n      startVal = -b / (e - b);\n    }\n    controlPoints.push({ x: 0, opacity: startVal, color: [255, 255, 255] });\n\n    // If b > 0, add another point at (b, 0)\n    if (b > 0) {\n      controlPoints.push({ x: b, opacity: 0, color: [255, 255, 255] });\n    }\n\n    // If e < 255, Add another point at (e, 1)\n    if (e < 255) {\n      if (e === b) {\n        // Use b + 0.5 as x value instead of e to create a near-vertical ramp\n        controlPoints.push({ x: b + 0.5, opacity: 1, color: [255, 255, 255] });\n      } else {\n        controlPoints.push({ x: e, opacity: 1, color: [255, 255, 255] });\n      }\n    }\n\n    // Add ending point at x = 255\n    let endVal = 1;\n    if (e > 255) {\n      endVal = (255 - b) / (e - b);\n    }\n    controlPoints.push({ x: 255, opacity: endVal, color: [255, 255, 255] });\n\n    this.lut = lut;\n    this.controlPoints = controlPoints;\n    return this;\n  }\n\n  // basically, the identity LUT with respect to opacity\n  createFullRange(): Lut {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n    // simple linear mapping for actual range\n    for (let x = 0; x < lut.length / 4; ++x) {\n      lut[x * 4 + 0] = 255;\n      lut[x * 4 + 1] = 255;\n      lut[x * 4 + 2] = 255;\n      lut[x * 4 + 3] = x;\n    }\n\n    this.lut = lut;\n    this.controlPoints = [\n      { x: 0, opacity: 0, color: [255, 255, 255] },\n      { x: 255, opacity: 1, color: [255, 255, 255] },\n    ];\n    return this;\n  }\n\n  /**\n   * Generate a Window/level lookup table\n   * @return {Lut}\n   * @param {number} wnd in 0..1 range\n   * @param {number} lvl in 0..1 range\n   */\n  createFromWindowLevel(wnd: number, lvl: number): Lut {\n    // simple linear mapping for actual range\n    const b = lvl - wnd * 0.5;\n    const e = lvl + wnd * 0.5;\n    return this.createFromMinMax(b * 255, e * 255);\n  }\n\n  // @param {Object[]} controlPoints - array of {x:number 0..255, opacity:number 0..1, color:array of 3 numbers 0..255}\n  // @return {Uint8Array} array of length 256*4 representing the rgba values of the gradient\n  createFromControlPoints(controlPoints: ControlPoint[]): Lut {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n\n    if (controlPoints.length === 0) {\n      this.lut = lut;\n      this.controlPoints = controlPoints;\n      return this;\n    }\n\n    // ensure they are sorted in ascending order of x\n    controlPoints.sort((a, b) => a.x - b.x);\n\n    // special case only one control point.\n    if (controlPoints.length === 1) {\n      const rgba = controlPointToRGBA(controlPoints[0]);\n      // lut was already filled with zeros\n      // copy val from x to 255.\n      const startx = clamp(controlPoints[0].x, 0, 255);\n      for (let x = startx; x < 256; ++x) {\n        lut[x * 4 + 0] = rgba[0];\n        lut[x * 4 + 1] = rgba[1];\n        lut[x * 4 + 2] = rgba[2];\n        lut[x * 4 + 3] = rgba[3];\n      }\n      this.lut = lut;\n      this.controlPoints = controlPoints;\n      return this;\n    }\n\n    let c0 = controlPoints[0];\n    let c1 = controlPoints[1];\n    let color0 = controlPointToRGBA(c0);\n    let color1 = controlPointToRGBA(c1);\n    let lastIndex = 1;\n    let a = 0;\n    for (let i = 0; i < 256; ++i) {\n      // find the two control points that i is between\n      while (i > c1.x) {\n        // advance control points\n        c0 = c1;\n        color0 = color1;\n        lastIndex++;\n        if (lastIndex >= controlPoints.length) {\n          // if the last control point is before 255, then we want to continue its value all the way to 255.\n          c1 = { x: 255, color: c1.color, opacity: c1.opacity };\n        } else {\n          c1 = controlPoints[lastIndex];\n        }\n        color1 = controlPointToRGBA(c1);\n      }\n      // find the lerp amount between the two control points\n      if (c1.x === c0.x) {\n        // use c1\n        a = 1.0;\n      } else {\n        a = (i - c0.x) / (c1.x - c0.x);\n      }\n      lut[i * 4 + 0] = clamp(lerp(color0[0], color1[0], a), 0, 255);\n      lut[i * 4 + 1] = clamp(lerp(color0[1], color1[1], a), 0, 255);\n      lut[i * 4 + 2] = clamp(lerp(color0[2], color1[2], a), 0, 255);\n      lut[i * 4 + 3] = clamp(lerp(color0[3], color1[3], a), 0, 255);\n    }\n\n    this.lut = lut;\n    this.controlPoints = controlPoints;\n    return this;\n  }\n\n  /**\n   * Generate an \"equalized\" lookup table\n   * @return {Lut}\n   */\n  createFromEqHistogram(histogram: Histogram): Lut {\n    const map: number[] = [];\n    for (let i = 0; i < histogram.getNumBins(); ++i) {\n      map[i] = 0;\n    }\n\n    // summed area table?\n    map[0] = histogram.getBin(0);\n    for (let i = 1; i < histogram.getNumBins(); ++i) {\n      map[i] = map[i - 1] + histogram.getBin(i);\n    }\n\n    const div = map[map.length - 1] - map[0];\n    if (div > 0) {\n      const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n      // compute lut and track control points for the piecewise linear sections\n      const lutControlPoints: ControlPoint[] = [{ x: 0, opacity: 0, color: [255, 255, 255] }];\n      lut[0] = 255;\n      lut[1] = 255;\n      lut[2] = 255;\n      lut[3] = 0;\n      let slope = 0;\n      let lastSlope = 0;\n      let opacity = 0;\n      let lastOpacity = 0;\n      for (let i = 1; i < lut.length / 4; ++i) {\n        lut[i * 4 + 0] = 255;\n        lut[i * 4 + 1] = 255;\n        lut[i * 4 + 2] = 255;\n        lastOpacity = opacity;\n        opacity = clamp(Math.round(255 * (map[i] - map[0])), 0, 255);\n        lut[i * 4 + 3] = opacity;\n\n        slope = opacity - lastOpacity;\n        // if map[i]-map[i-1] is the same as map[i+1]-map[i] then we are in a linear segment and do not need a new control point\n        if (slope != lastSlope) {\n          lutControlPoints.push({ x: i - 1, opacity: lastOpacity / 255.0, color: [255, 255, 255] });\n          lastSlope = slope;\n        }\n      }\n\n      lutControlPoints.push({ x: 255, opacity: 1, color: [255, 255, 255] });\n\n      this.lut = lut;\n      this.controlPoints = lutControlPoints;\n      return this;\n    } else {\n      // just reset to whole range in this case...?\n      return this.createFullRange();\n    }\n  }\n\n  /**\n   * Generate a lookup table with a different color per intensity value.\n   * This translates to a unique color per histogram bin with more than zero pixels.\n   * @return {Lut}\n   */\n  createLabelColors(histogram: Histogram): Lut {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n    const controlPoints: ControlPoint[] = [];\n    controlPoints.push({ x: 0, opacity: 0, color: [0, 0, 0] });\n    let lastr = 0;\n    let lastg = 0;\n    let lastb = 0;\n    let lasta = 0;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let a = 0;\n\n    // assumes exactly one bin per intensity value?\n    // skip zero!!!\n    for (let i = 1; i < histogram.getNumBins(); ++i) {\n      if (histogram.getBin(i) > 0) {\n        const rgb = getColorByChannelIndex(i);\n\n        lut[i * 4 + 0] = rgb[0];\n        lut[i * 4 + 1] = rgb[1];\n        lut[i * 4 + 2] = rgb[2];\n        lut[i * 4 + 3] = 255;\n\n        r = rgb[0];\n        g = rgb[1];\n        b = rgb[2];\n        a = 1;\n      } else {\n        // add a zero control point?\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n      }\n      // if current control point is same as last one don't add it\n      if (r !== lastr || g !== lastg || b !== lastb || a !== lasta) {\n        if (lasta === 0) {\n          controlPoints.push({ x: i - 0.5, opacity: lasta, color: [lastr, lastg, lastb] });\n        }\n        controlPoints.push({ x: i, opacity: a, color: [r, g, b] });\n        lastr = r;\n        lastg = g;\n        lastb = b;\n        lasta = a;\n      }\n    }\n\n    this.lut = lut;\n    this.controlPoints = controlPoints;\n    return this;\n  }\n\n  // since this is not a \"create\" function, it doesn't need to return the object.\n  remapDomains(oldMin: number, oldMax: number, newMin: number, newMax: number) {\n    // no attempt is made here to ensure that lut and controlPoints are internally consistent.\n    // if they start out consistent, they should end up consistent. And vice versa.\n    this.lut = remapLut(this.lut, oldMin, oldMax, newMin, newMax);\n    this.controlPoints = remapControlPoints(this.controlPoints, oldMin, oldMax, newMin, newMax);\n  }\n}\n\n// If the new max is greater than the old max, then\n// the lut's max end will move inward to the left.\n// This is another way of saying that the new max's index is greater than 255 in the old lut\n// If the new min is less than the old min, then\n// the lut's min end will move inward to the right.\n// This is another way of saying that the new min's index is less than 0 in the old lut\nexport function remapLut(lut: Uint8Array, oldMin: number, oldMax: number, newMin: number, newMax: number): Uint8Array {\n  const newLut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n  // we will find what intensity is at each index in the new range,\n  // and then try to sample the pre-existing lut as if it spans the old range.\n  // Build new lut by sampling from old lut.\n  for (let i = 0; i < LUT_ENTRIES; ++i) {\n    let iOld = remapDomain(i, 0, LUT_ENTRIES - 1, oldMin, oldMax, newMin, newMax);\n    if (iOld < 0) {\n      iOld = 0;\n    }\n    if (iOld > LUT_ENTRIES - 1) {\n      iOld = LUT_ENTRIES - 1;\n    }\n    // find the indices above and below for interpolation\n    const i0 = Math.floor(iOld);\n    const i1 = Math.ceil(iOld);\n    const pct = iOld - i0;\n\n    //console.log(`interpolating ${iOld}: ${lut[i0 * 4 + 3]}, ${lut[i1 * 4 + 3]}, ${pct}`);\n    newLut[i * 4 + 0] = Math.round(lerp(lut[i0 * 4 + 0], lut[i1 * 4 + 0], pct));\n    newLut[i * 4 + 1] = Math.round(lerp(lut[i0 * 4 + 1], lut[i1 * 4 + 1], pct));\n    newLut[i * 4 + 2] = Math.round(lerp(lut[i0 * 4 + 2], lut[i1 * 4 + 2], pct));\n    newLut[i * 4 + 3] = Math.round(lerp(lut[i0 * 4 + 3], lut[i1 * 4 + 3], pct));\n  }\n\n  return newLut;\n}\n\nexport function remapControlPoints(\n  controlPoints: ControlPoint[],\n  oldMin: number,\n  oldMax: number,\n  newMin: number,\n  newMax: number\n): ControlPoint[] {\n  const newControlPoints: ControlPoint[] = [];\n\n  // assume control point x domain 0-255 is mapped to oldMin-oldMax\n\n  // remap all cp x values.\n  // interpolate all new colors and opacities\n  // Do not clip values outside of 0-255. This is important to\n  // preserve information for remapping many consecutive times.\n  for (let i = 0; i < controlPoints.length; ++i) {\n    const cp = controlPoints[i];\n    const iOld = remapDomainForCP(cp.x, 0, LUT_ENTRIES - 1, oldMin, oldMax, newMin, newMax);\n    const newCP: ControlPoint = {\n      x: iOld,\n      opacity: cp.opacity,\n      color: [cp.color[0], cp.color[1], cp.color[2]],\n    };\n    newControlPoints.push(newCP);\n  }\n\n  return newControlPoints;\n}\n","import { Vector2, Vector3 } from \"three\";\n\nimport Channel from \"./Channel.js\";\nimport Histogram from \"./Histogram.js\";\nimport { Lut } from \"./Lut.js\";\nimport { getColorByChannelIndex } from \"./constants/colors.js\";\nimport { type IVolumeLoader, LoadSpec, type PerChannelCallback } from \"./loaders/IVolumeLoader.js\";\nimport { MAX_ATLAS_EDGE, pickLevelToLoadUnscaled } from \"./loaders/VolumeLoaderUtils.js\";\n\nexport type ImageInfo = Readonly<{\n  name: string;\n\n  /** XY size of the *original* (not downsampled) volume, in pixels */\n  originalSize: Vector3;\n  /**\n   * XY dimensions of the texture atlas used by `RayMarchedAtlasVolume` and `Atlas2DSlice`, in number of z-slice\n   * tiles (not pixels). Chosen by the loader to lay out the 3D volume in the squarest possible 2D texture atlas.\n   */\n  atlasTileDims: Vector2;\n  /** Size of the volume, in pixels */\n  volumeSize: Vector3;\n  /** Size of the currently loaded subregion, in pixels */\n  subregionSize: Vector3;\n  /** Offset of the loaded subregion into the total volume, in pixels */\n  subregionOffset: Vector3;\n  /** Size of a single *original* (not downsampled) pixel, in spatial units */\n  physicalPixelSize: Vector3;\n  /** Symbol of physical spatial unit used by `pixelSize` */\n  spatialUnit: string;\n\n  /** Number of channels in the image */\n  numChannels: number;\n  /** The names of each channel */\n  channelNames: string[];\n  /** Optional overrides to default channel colors, in 0-255 range */\n  channelColors?: [number, number, number][];\n\n  /** Number of timesteps in the time series, or 1 if the image is not a time series */\n  times: number;\n  /** Size of each timestep in temporal units */\n  timeScale: number;\n  /** Symbol of temporal unit used by `timeScale`, e.g. \"hr\" */\n  timeUnit: string;\n\n  /** Number of scale levels available for this volume */\n  numMultiscaleLevels: number;\n  /** The scale level from which this image was loaded, between `0` and `numMultiscaleLevels-1` */\n  multiscaleLevel: number;\n\n  transform: {\n    /** Translation of the volume from the center of space, in volume voxels */\n    translation: Vector3;\n    /** Rotation of the volume in Euler angles, applied in XYZ order */\n    rotation: Vector3;\n  };\n\n  /** Arbitrary additional metadata not captured by other `ImageInfo` properties */\n  userData?: Record<string, unknown>;\n}>;\n\nexport const getDefaultImageInfo = (): ImageInfo => ({\n  name: \"\",\n  originalSize: new Vector3(1, 1, 1),\n  atlasTileDims: new Vector2(1, 1),\n  volumeSize: new Vector3(1, 1, 1),\n  subregionSize: new Vector3(1, 1, 1),\n  subregionOffset: new Vector3(0, 0, 0),\n  physicalPixelSize: new Vector3(1, 1, 1),\n  spatialUnit: \"\",\n  numChannels: 0,\n  channelNames: [],\n  channelColors: [],\n  times: 1,\n  timeScale: 1,\n  timeUnit: \"\",\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n  transform: {\n    translation: new Vector3(0, 0, 0),\n    rotation: new Vector3(0, 0, 0),\n  },\n});\n\ninterface VolumeDataObserver {\n  onVolumeData: (vol: Volume, batch: number[]) => void;\n  onVolumeChannelAdded: (vol: Volume, idx: number) => void;\n}\n\n/**\n * Provide dimensions of the volume data, including dimensions for texture atlas data in which the volume z slices\n * are tiled across a single large 2d image plane.\n * @typedef {Object} ImageInfo\n * @property {string} name Base name of image\n * @property {string} [version] Schema version preferably in semver format.\n * @property {Vector2} originalSize XY size of the *original* (not downsampled) volume, in pixels\n * @property {Vector2} atlasDims Number of rows and columns of z-slice tiles (not pixels) in the texture atlas\n * @property {Vector3} volumeSize Size of the volume, in pixels\n * @property {Vector3} regionSize Size of the currently loaded subregion, in pixels\n * @property {Vector3} regionOffset Offset of the loaded subregion into the total volume, in pixels\n * @property {Vector3} pixelSize Size of a single *original* (not downsampled) pixel, in spatial units\n * @property {string} spatialUnit Symbol of physical spatial unit used by `pixelSize`\n * @property {number} numChannels Number of channels\n * @property {Array.<string>} channelNames Names of each of the channels to be rendered, in order. Unique identifier expected\n * @property {Array.<Array.<number>>} [channelColors] Colors of each of the channels to be rendered, as an ordered list of [r, g, b] arrays\n * @property {number} times Number of times (default = 1)\n * @property {number} timeScale Size of each time step in `timeUnit` units\n * @property {number} timeUnit Unit symbol for `timeScale` (e.g. min)\n * @property {Object} transform translation and rotation as arrays of 3 numbers. Translation is in voxels (to be multiplied by pixel_size values). Rotation is Euler angles in radians, appled in XYZ order.\n * @property {Object} userData Arbitrary metadata not covered by above properties\n * @example const imgdata = {\n  \"name\": \"AICS-10_5_5\",\n  \"version\": \"0.0.0\",\n  originalSize: new Vector2(306, 494),\n  atlasDims: new Vector2(10, 7),\n  volumeSize: new Vector3(204, 292, 65),\n  regionSize: new Vector3(204, 292, 65),\n  regionOffset: new Vector3(0, 0, 0),\n  pixelSize: new Vector3(0.065, 0.065, 0.29),\n  spatialUnit: \"μm\",\n  \"numChannels\": 9,\n  \"channelNames\": [\"DRAQ5\", \"EGFP\", \"Hoechst 33258\", \"TL Brightfield\", \"SEG_STRUCT\", \"SEG_Memb\", \"SEG_DNA\", \"CON_Memb\", \"CON_DNA\"],\n  \"times\": 5,\n  \"timeScale\": 1,\n  \"timeUnit\": \"hr\",\n  \"transform\": {\n    \"translation\": new Vector3(5, 5, 1),\n    \"rotation\": new Vector3(0, 3.14159, 1.57),\n  },\n  };\n */\n\n/**\n * A renderable multichannel volume image with 8-bits per channel intensity values.\n * @class\n * @param {ImageInfo} imageInfo\n */\nexport default class Volume {\n  public imageInfo: ImageInfo;\n  public loadSpec: Required<LoadSpec>;\n  public loader?: IVolumeLoader;\n  // `LoadSpec` representing the minimum data required to display what's in the viewer (subregion, channels, etc.).\n  // Used to intelligently issue load requests whenever required by a state change. Modify with `updateRequiredData`.\n  public loadSpecRequired: Required<LoadSpec>;\n  public channelLoadCallback?: PerChannelCallback;\n  public imageMetadata: Record<string, unknown>;\n  public name: string;\n\n  public channels: Channel[];\n  public numChannels: number;\n  public channelNames: string[];\n  public channelColorsDefault: [number, number, number][];\n\n  public physicalScale: number;\n  public physicalPixelSize: Vector3;\n  public physicalSize: Vector3;\n  public normPhysicalSize: Vector3;\n  public normRegionSize: Vector3;\n  public normRegionOffset: Vector3;\n  public physicalUnitSymbol: string;\n  public tickMarkPhysicalLength: number;\n\n  private volumeDataObservers: VolumeDataObserver[];\n  private loaded: boolean;\n\n  constructor(\n    imageInfo: ImageInfo = getDefaultImageInfo(),\n    loadSpec: LoadSpec = new LoadSpec(),\n    loader?: IVolumeLoader\n  ) {\n    this.loaded = false;\n    this.imageInfo = imageInfo;\n    this.name = this.imageInfo.name;\n    this.loadSpec = {\n      // Fill in defaults for optional properties\n      multiscaleLevel: 0,\n      scaleLevelBias: 0,\n      maxAtlasEdge: MAX_ATLAS_EDGE,\n      channels: Array.from({ length: this.imageInfo.numChannels }, (_val, idx) => idx),\n      ...loadSpec,\n    };\n    this.loadSpecRequired = {\n      ...this.loadSpec,\n      channels: this.loadSpec.channels.slice(),\n      subregion: this.loadSpec.subregion.clone(),\n    };\n    this.loader = loader;\n    // imageMetadata to be filled in by Volume Loaders\n    this.imageMetadata = {};\n\n    this.normRegionSize = new Vector3(1, 1, 1);\n    this.normRegionOffset = new Vector3(0, 0, 0);\n    this.physicalSize = new Vector3(1, 1, 1);\n    this.physicalScale = 1;\n    this.normPhysicalSize = new Vector3(1, 1, 1);\n    this.physicalPixelSize = this.imageInfo.physicalPixelSize;\n    this.tickMarkPhysicalLength = 1;\n    this.setVoxelSize(this.physicalPixelSize);\n\n    this.numChannels = this.imageInfo.numChannels;\n    this.channelNames = this.imageInfo.channelNames.slice();\n    this.channelColorsDefault = this.imageInfo.channelColors\n      ? this.imageInfo.channelColors.slice()\n      : this.channelNames.map((name, index) => getColorByChannelIndex(index));\n    // fill in gaps\n    if (this.channelColorsDefault.length < this.imageInfo.numChannels) {\n      for (let i = this.channelColorsDefault.length - 1; i < this.imageInfo.numChannels; ++i) {\n        this.channelColorsDefault[i] = getColorByChannelIndex(i);\n      }\n    }\n\n    this.channels = [];\n    for (let i = 0; i < this.imageInfo.numChannels; ++i) {\n      const channel = new Channel(this.channelNames[i]);\n      this.channels.push(channel);\n      // TODO pass in channel constructor...\n      channel.dims = this.imageInfo.subregionSize.toArray();\n    }\n\n    this.physicalUnitSymbol = this.imageInfo.spatialUnit;\n\n    this.volumeDataObservers = [];\n  }\n\n  private setUnloaded() {\n    this.loaded = false;\n    this.channels.forEach((channel) => {\n      channel.loaded = false;\n    });\n  }\n\n  isLoaded(): boolean {\n    return this.loaded;\n  }\n\n  updateDimensions() {\n    const { volumeSize, subregionSize, subregionOffset } = this.imageInfo;\n\n    this.setVoxelSize(this.physicalPixelSize);\n\n    this.normRegionSize = subregionSize.clone().divide(volumeSize);\n    this.normRegionOffset = subregionOffset.clone().divide(volumeSize);\n  }\n\n  /** Returns `true` iff differences between `loadSpec` and `loadSpecRequired` indicate new data *must* be loaded. */\n  private mustLoadNewData(): boolean {\n    return (\n      this.loadSpec.time !== this.loadSpecRequired.time || // time point changed\n      !this.loadSpec.subregion.containsBox(this.loadSpecRequired.subregion) || // new subregion not contained in old\n      this.loadSpecRequired.channels.some((channel) => !this.loadSpec.channels.includes(channel)) // new channel(s)\n    );\n  }\n\n  /**\n   * Returns `true` iff differences between `loadSpec` and `loadSpecRequired` indicate a new load *may* get a\n   * different scale level than is currently loaded.\n   *\n   * This checks for changes in properties that *can*, but do not *always*, change the scale level the loader picks.\n   * For example, a smaller `subregion` *may* mean a higher scale level will fit within memory constraints, or it may\n   * not. A higher `scaleLevelBias` *may* nudge the volume into a higher scale level, or we may already be at the max\n   * imposed by `multiscaleLevel`.\n   */\n  private mayLoadNewScaleLevel(): boolean {\n    return (\n      !this.loadSpec.subregion.equals(this.loadSpecRequired.subregion) ||\n      this.loadSpecRequired.maxAtlasEdge !== this.loadSpec.maxAtlasEdge ||\n      this.loadSpecRequired.multiscaleLevel !== this.loadSpec.multiscaleLevel ||\n      this.loadSpecRequired.scaleLevelBias !== this.loadSpec.scaleLevelBias\n    );\n  }\n\n  /** Call on any state update that may require new data to be loaded (subregion, enabled channels, time, etc.) */\n  async updateRequiredData(required: Partial<LoadSpec>, onChannelLoaded?: PerChannelCallback): Promise<void> {\n    this.loadSpecRequired = { ...this.loadSpecRequired, ...required };\n    let shouldReload = this.mustLoadNewData();\n\n    // If we're not reloading due to required data changes, check if we should load a new scale level\n    if (!shouldReload && this.mayLoadNewScaleLevel()) {\n      // Loaders should cache loaded dimensions so that this call blocks no more than once per valid `LoadSpec`.\n      const dims = await this.loader?.loadDims(this.loadSpecRequired);\n      if (dims) {\n        const dimsZYX = dims.map(({ shape }): [number, number, number] => [shape[2], shape[3], shape[4]]);\n        // Determine which scale level *would* be loaded, and see if it's different than what we have\n        const levelToLoad = pickLevelToLoadUnscaled(this.loadSpecRequired, dimsZYX);\n        shouldReload = this.imageInfo.multiscaleLevel !== levelToLoad;\n      }\n    }\n\n    if (shouldReload) {\n      this.loadNewData(onChannelLoaded);\n    }\n  }\n\n  /**\n   * Loads new data as specified in `this.loadSpecRequired`. Clones `loadSpecRequired` into `loadSpec` to indicate\n   * that the data that *must* be loaded is now the data that *has* been loaded.\n   */\n  private loadNewData(onChannelLoaded?: PerChannelCallback): void {\n    this.setUnloaded();\n    this.loadSpec = {\n      ...this.loadSpecRequired,\n      subregion: this.loadSpecRequired.subregion.clone(),\n    };\n    this.loader?.loadVolumeData(this, undefined, onChannelLoaded);\n  }\n\n  // we calculate the physical size of the volume (voxels*pixel_size)\n  // and then normalize to the max physical dimension\n  setVoxelSize(size: Vector3): void {\n    // only set the data if it is > 0.  zero is not an allowed value.\n    size.x = size.x > 0 ? size.x : 1.0;\n    size.y = size.y > 0 ? size.y : 1.0;\n    size.z = size.z > 0 ? size.z : 1.0;\n    this.physicalPixelSize = size;\n\n    this.physicalSize = this.imageInfo.originalSize.clone().multiply(this.physicalPixelSize);\n    // Volume is scaled such that its largest physical dimension is 1 world unit - save that dimension for conversions\n    this.physicalScale = Math.max(this.physicalSize.x, this.physicalSize.y, this.physicalSize.z);\n    // Compute the volume's max extent - scaled to max dimension.\n    this.normPhysicalSize = this.physicalSize.clone().divideScalar(this.physicalScale);\n    // While we're here, pick a power of 10 that divides into our max dimension a reasonable number of times\n    // and save it to be the length of tick marks in 3d.\n    this.tickMarkPhysicalLength = 10 ** Math.floor(Math.log10(this.physicalScale / 2));\n  }\n\n  setUnitSymbol(symbol: string): void {\n    this.physicalUnitSymbol = symbol;\n  }\n\n  /** Computes the center of the volume subset */\n  getContentCenter(): Vector3 {\n    // center point: (normRegionSize / 2 + normRegionOffset - 0.5) * normPhysicalSize;\n    return this.normRegionSize\n      .clone()\n      .divideScalar(2)\n      .add(this.normRegionOffset)\n      .subScalar(0.5)\n      .multiply(this.normPhysicalSize);\n  }\n\n  cleanup(): void {\n    // no op\n  }\n\n  getChannel(channelIndex: number): Channel {\n    return this.channels[channelIndex];\n  }\n\n  onChannelLoaded(batch: number[]): void {\n    // check to see if all channels are now loaded, and fire an event(?)\n    if (this.loadSpec.channels.every((channelIndex) => this.channels[channelIndex].loaded)) {\n      this.loaded = true;\n    }\n    batch.forEach((channelIndex) => this.channelLoadCallback?.(this, channelIndex));\n    this.volumeDataObservers.forEach((observer) => observer.onVolumeData(this, batch));\n  }\n\n  /**\n   * Assign volume data via a 2d array containing the z slices as tiles across it.  Assumes that the incoming data is consistent with the image's pre-existing imageInfo tile metadata.\n   * @param {number} channelIndex\n   * @param {Uint8Array} atlasdata\n   * @param {number} atlaswidth\n   * @param {number} atlasheight\n   */\n  setChannelDataFromAtlas(channelIndex: number, atlasdata: Uint8Array, atlaswidth: number, atlasheight: number): void {\n    this.channels[channelIndex].setBits(atlasdata, atlaswidth, atlasheight);\n    const { x, y, z } = this.imageInfo.subregionSize;\n    this.channels[channelIndex].unpackVolumeFromAtlas(x, y, z);\n    this.onChannelLoaded([channelIndex]);\n  }\n\n  // ASSUMES that this.channelData.options is already set and incoming data is consistent with it\n  /**\n   * Assign volume data as a 3d array ordered x,y,z. The xy size must be equal to tilewidth*tileheight from the imageInfo used to construct this Volume.  Assumes that the incoming data is consistent with the image's pre-existing imageInfo tile metadata.\n   * @param {number} channelIndex\n   * @param {Uint8Array} volumeData\n   */\n  setChannelDataFromVolume(channelIndex: number, volumeData: Uint8Array, range: [number, number]): void {\n    const { subregionSize, atlasTileDims } = this.imageInfo;\n    this.channels[channelIndex].setFromVolumeData(\n      volumeData,\n      subregionSize.x,\n      subregionSize.y,\n      subregionSize.z,\n      atlasTileDims.x * subregionSize.x,\n      atlasTileDims.y * subregionSize.y,\n      range[0],\n      range[1]\n    );\n    this.onChannelLoaded([channelIndex]);\n  }\n\n  // TODO: decide if this should update imageInfo or not. For now, leave imageInfo alone as the \"original\" data\n  /**\n   * Add a new channel ready to receive data from one of the setChannelDataFrom* calls.\n   * Name and color will be defaulted if not provided. For now, leave imageInfo alone as the \"original\" data\n   * @param {string} name\n   * @param {Array.<number>} color [r,g,b]\n   */\n  appendEmptyChannel(name: string, color?: [number, number, number]): number {\n    const idx = this.imageInfo.numChannels;\n    const chname = name || \"channel_\" + idx;\n    const chcolor = color || getColorByChannelIndex(idx);\n    this.numChannels += 1;\n    this.channelNames.push(chname);\n    this.channelColorsDefault.push(chcolor);\n\n    this.channels.push(new Channel(chname));\n\n    for (let i = 0; i < this.volumeDataObservers.length; ++i) {\n      this.volumeDataObservers[i].onVolumeChannelAdded(this, idx);\n    }\n\n    return idx;\n  }\n\n  /**\n   * Get a value from the volume data\n   * @return {number} the intensity value from the given channel at the given xyz location\n   * @param {number} c The channel index\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   */\n  getIntensity(c: number, x: number, y: number, z: number): number {\n    return this.channels[c].getIntensity(x, y, z);\n  }\n\n  /**\n   * Get the 256-bin histogram for the given channel\n   * @return {Histogram} the histogram\n   * @param {number} c The channel index\n   */\n  getHistogram(c: number): Histogram {\n    return this.channels[c].getHistogram();\n  }\n\n  /**\n   * Set the lut for the given channel\n   * @param {number} c The channel index\n   * @param {Array.<number>} lut The lut as a 256 element array\n   */\n  setLut(c: number, lut: Lut): void {\n    this.channels[c].setLut(lut);\n  }\n\n  /**\n   * Set the color palette for the given channel\n   * @param {number} c The channel index\n   * @param {Array.<number>} palette The colors as a 256 element array * RGBA\n   */\n  setColorPalette(c: number, palette: Uint8Array): void {\n    this.channels[c].setColorPalette(palette);\n  }\n\n  /**\n   * Set the color palette alpha multiplier for the given channel.\n   * This will blend between the ordinary color lut and this colorPalette lut.\n   * @param {number} c The channel index\n   * @param {number} alpha The alpha value as a number from 0 to 1\n   */\n  setColorPaletteAlpha(c: number, alpha: number): void {\n    this.channels[c].setColorPaletteAlpha(alpha);\n  }\n\n  /**\n   * Return the intrinsic rotation associated with this volume (radians)\n   * @return {Array.<number>} the xyz Euler angles (radians)\n   */\n  getRotation(): [number, number, number] {\n    // default axis order is XYZ\n    return this.imageInfo.transform.rotation.toArray();\n  }\n\n  /**\n   * Return the intrinsic translation (pivot center delta) associated with this volume, in normalized volume units\n   * @return {Array.<number>} the xyz translation in normalized volume units\n   */\n  getTranslation(): [number, number, number] {\n    return this.voxelsToWorldSpace(this.imageInfo.transform.translation.toArray());\n  }\n\n  /**\n   * Return a translation in normalized volume units, given a translation in image voxels\n   * @return {Array.<number>} the xyz translation in normalized volume units\n   */\n  voxelsToWorldSpace(xyz: [number, number, number]): [number, number, number] {\n    // ASSUME: translation is in original image voxels.\n    // account for pixel_size and normalized scaling in the threejs volume representation we're using\n    const m = 1.0 / Math.max(this.physicalSize.x, Math.max(this.physicalSize.y, this.physicalSize.z));\n    return new Vector3().fromArray(xyz).multiply(this.physicalPixelSize).multiplyScalar(m).toArray();\n  }\n\n  addVolumeDataObserver(o: VolumeDataObserver): void {\n    this.volumeDataObservers.push(o);\n  }\n\n  removeVolumeDataObserver(o: VolumeDataObserver): void {\n    if (o) {\n      const i = this.volumeDataObservers.indexOf(o);\n      if (i !== -1) {\n        this.volumeDataObservers.splice(i, 1);\n      }\n    }\n  }\n\n  removeAllVolumeDataObservers(): void {\n    this.volumeDataObservers = [];\n  }\n}\n","type MaybeCacheEntry = CacheEntry | null;\ntype CacheEntry = {\n  /** The data contained in this entry */\n  data: ArrayBuffer;\n  /** The previous entry in the LRU list (more recently used) */\n  prev: MaybeCacheEntry;\n  /** The next entry in the LRU list (less recently used) */\n  next: MaybeCacheEntry;\n  /** The key which indexes this entry */\n  key: string;\n};\n\n/** Default: 250MB. Should be large enough to be useful but safe for most any computer that can run the app */\nconst CACHE_MAX_SIZE_DEFAULT = 250_000_000;\n\nexport default class VolumeCache {\n  private entries: Map<string, CacheEntry>;\n\n  public readonly maxSize: number;\n  private currentSize: number;\n\n  // Ends of a linked list of entries, to track LRU and evict efficiently\n  private first: MaybeCacheEntry;\n  private last: MaybeCacheEntry;\n  // TODO implement some way to manage used vs unused (prefetched) entries so\n  // that prefetched entries which are never used don't get highest priority!\n\n  constructor(maxSize = CACHE_MAX_SIZE_DEFAULT) {\n    this.entries = new Map();\n    this.maxSize = maxSize;\n    this.currentSize = 0;\n\n    this.first = null;\n    this.last = null;\n  }\n\n  // Hide these behind getters so they're definitely never set from the outside\n  /** The size of all data arrays currently stored in this cache, in bytes. */\n  public get size() {\n    return this.currentSize;\n  }\n\n  /** The number of entries currently stored in this cache. */\n  public get numberOfEntries() {\n    return this.entries.size;\n  }\n\n  /**\n   * Removes an entry from a store but NOT the LRU list.\n   * Only call from a method with the word \"evict\" in it!\n   */\n  private removeEntryFromStore(entry: CacheEntry): void {\n    this.entries.delete(entry.key);\n    this.currentSize -= entry.data.byteLength;\n  }\n\n  /**\n   * Removes an entry from the LRU list but NOT its store.\n   * Entry must be replaced in list or removed from store, or it will never be evicted!\n   */\n  private removeEntryFromList(entry: CacheEntry): void {\n    const { prev, next } = entry;\n\n    if (prev) {\n      prev.next = next;\n    } else {\n      this.first = next;\n    }\n\n    if (next) {\n      next.prev = prev;\n    } else {\n      this.last = prev;\n    }\n  }\n\n  /** Adds an entry which is *not currently in the list* to the front of the list. */\n  private addEntryAsFirst(entry: CacheEntry): void {\n    if (this.first) {\n      this.first.prev = entry;\n    } else {\n      this.last = entry;\n    }\n    entry.next = this.first;\n    entry.prev = null;\n    this.first = entry;\n  }\n\n  /** Moves an entry which is *currently in the list* to the front of the list. */\n  private moveEntryToFirst(entry: CacheEntry): void {\n    if (entry === this.first) return;\n    this.removeEntryFromList(entry);\n    this.addEntryAsFirst(entry);\n  }\n\n  /** Evicts the least recently used entry from the cache. */\n  private evictLast(): void {\n    if (!this.last) {\n      console.error(\"VolumeCache: attempt to evict last entry from cache when no last entry is set\");\n      return;\n    }\n\n    this.removeEntryFromStore(this.last);\n\n    if (this.last.prev) {\n      this.last.prev.next = null;\n    }\n    this.last = this.last.prev;\n  }\n\n  /** Evicts a specific entry from the cache. */\n  private evict(entry: CacheEntry): void {\n    this.removeEntryFromStore(entry);\n    this.removeEntryFromList(entry);\n  }\n\n  /**\n   * Adds a new entry to the cache.\n   * @returns {boolean} a boolean indicating whether the insertion succeeded.\n   */\n  public insert(key: string, data: ArrayBuffer): boolean {\n    if (data.byteLength > this.maxSize) {\n      console.error(\"VolumeCache: attempt to insert a single entry larger than the cache\");\n      return false;\n    }\n\n    // Check if entry is already in cache\n    // This will move the entry to the front of the LRU list, if present\n    const getResult = this.getEntry(key);\n    if (getResult !== undefined) {\n      getResult.data = data;\n      return true;\n    }\n\n    // Add new entry to cache\n    const newEntry: CacheEntry = { data, prev: null, next: null, key };\n    this.addEntryAsFirst(newEntry);\n    this.entries.set(key, newEntry);\n    this.currentSize += data.byteLength;\n\n    // Evict until size is within limit\n    while (this.currentSize > this.maxSize) {\n      this.evictLast();\n    }\n    return true;\n  }\n\n  /** Internal implementation of `get`. Returns all entry metadata, not just the raw data. */\n  private getEntry(key: string): CacheEntry | undefined {\n    const result = this.entries.get(key);\n    if (result) {\n      this.moveEntryToFirst(result);\n    }\n    return result;\n  }\n\n  /** Attempts to get a single entry from the cache. */\n  public get(key: string): ArrayBuffer | undefined {\n    return this.getEntry(key)?.data;\n  }\n\n  /** Clears all cache entries whose keys begin with the specified prefix. */\n  public clearWithPrefix(prefix: string): void {\n    for (const [key, entry] of this.entries.entries()) {\n      if (key.startsWith(prefix)) {\n        this.evict(entry);\n      }\n    }\n  }\n\n  /** Clears all data from the cache. */\n  public clear(): void {\n    while (this.last) {\n      this.evictLast();\n    }\n  }\n}\n","export const defaultColors: [number, number, number][] = [\n  [255, 0, 255],\n  [255, 255, 255],\n  [0, 255, 255],\n];\n\ninterface HSVColor {\n  h: number;\n  s: number;\n  v: number;\n}\n// 0 <= (h, s, v) <= 1\n// returns 0 <= (r, g, b) <= 255 rounded to nearest integer\n// you can also pass in just one arg as an object of {h, s, v} props.\nfunction HSVtoRGB(h: number | HSVColor, s: number, v: number): [number, number, number] {\n  let r, g, b;\n  let hh = 0;\n  if (arguments.length === 1) {\n    const hsv = h as HSVColor;\n    (s = hsv.s), (v = hsv.v), (hh = hsv.h);\n  } else {\n    hh = h as number;\n  }\n  const i = Math.floor(hh * 6);\n  const f = hh * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      (r = v), (g = t), (b = p);\n      break;\n    case 1:\n      (r = q), (g = v), (b = p);\n      break;\n    case 2:\n      (r = p), (g = v), (b = t);\n      break;\n    case 3:\n      (r = p), (g = q), (b = v);\n      break;\n    case 4:\n      (r = t), (g = p), (b = v);\n      break;\n    case 5:\n      (r = v), (g = p), (b = q);\n      break;\n  }\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n\n// 1993 Park-Miller LCG\nfunction LCG(s) {\n  return function () {\n    s = Math.imul(48271, s) | 0 % 2147483647;\n    return (s & 2147483647) / 2147483648;\n  };\n}\n// Use it like so:\nconst myrand = LCG(123);\n\n// if index exceeds defaultColors start choosing random ones\n// returns [r,g,b] 0-255 range\nexport const getColorByChannelIndex = (index: number): [number, number, number] => {\n  if (!defaultColors[index]) {\n    defaultColors[index] = HSVtoRGB(myrand(), myrand() * 0.5 + 0.5, myrand() * 0.5 + 0.5);\n  }\n  return defaultColors[index];\n};\n","import { Box3, Vector3 } from \"three\";\n\nimport Volume, { ImageInfo } from \"../Volume.js\";\nimport { buildDefaultMetadata } from \"./VolumeLoaderUtils.js\";\nimport { PrefetchDirection } from \"./zarr_utils/types.js\";\n\nexport class LoadSpec {\n  time = 0;\n  /** The max size of a volume atlas that may be produced by a load. Used to pick the appropriate multiscale level. */\n  maxAtlasEdge?: number;\n  /** An optional bias added to the scale level index after the optimal level is picked based on `maxAtlasEdge`. */\n  scaleLevelBias?: number;\n  /**\n   * The max scale level to load. Even when this is specified, the loader may pick a *lower* scale level based on\n   * limits imposed by `scaleLevelBias` and `maxAtlasEdge` (or their defaults if unspecified).\n   */\n  multiscaleLevel?: number;\n  /** Subregion of volume to load. If not specified, the entire volume is loaded. Specify as floats between 0-1. */\n  subregion = new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1));\n  channels?: number[];\n}\n\nexport function loadSpecToString(spec: LoadSpec): string {\n  const { min, max } = spec.subregion;\n  return `${spec.multiscaleLevel}:${spec.time}:x(${min.x},${max.x}):y(${min.y},${max.y}):z(${min.z},${max.z})`;\n}\n\nexport class VolumeDims {\n  // shape: [t, c, z, y, x]\n  shape: number[] = [0, 0, 0, 0, 0];\n  // spacing: [t, c, z, y, x]; generally expect 1 for non-spatial dimensions\n  spacing: number[] = [1, 1, 1, 1, 1];\n  spaceUnit = \"μm\";\n  timeUnit = \"s\";\n  // TODO make this an enum?\n  dataType = \"uint8\";\n}\n\nexport type LoadedVolumeInfo = {\n  imageInfo: ImageInfo;\n  loadSpec: LoadSpec;\n};\n\n/**\n * @callback PerChannelCallback\n * @param {string} imageurl\n * @param {Volume} volume\n * @param {number} channelindex\n */\nexport type PerChannelCallback = (volume: Volume, channelIndex: number) => void;\n\n/**\n * @callback RawChannelDataCallback - allow lists of channel indices and data arrays to be passed to the callback\n * @param {number[]} channelIndex - The indices of the channels that were loaded\n * @param {Uint8Array[]} data - The raw data for each channel (renormalized to 0-255 range)\n * @param {[number, number][]} ranges - The min and max values for each channel in their original range\n * @param {[number, number]} atlasDims - The dimensions of the atlas, if the data is in an atlas format\n */\nexport type RawChannelDataCallback = (\n  channelIndex: number[],\n  data: Uint8Array[],\n  ranges: [number, number][],\n  atlasDims?: [number, number]\n) => void;\n\n/**\n * Loads volume data from a source specified by a `LoadSpec`.\n *\n * Loaders may keep state for reuse between volume creation and volume loading, and should be kept alive until volume\n * loading is complete. (See `createVolume`)\n */\nexport interface IVolumeLoader {\n  /** Use VolumeDims to further refine a `LoadSpec` for use in `createVolume` */\n  loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]>;\n\n  /**\n   * Create an empty `Volume` from a `LoadSpec`, which must be passed to `loadVolumeData` to begin loading.\n   * Optionally pass a callback to respond whenever new channel data is loaded into the volume.\n   */\n  createVolume(loadSpec: LoadSpec, onChannelLoaded?: PerChannelCallback): Promise<Volume>;\n\n  /**\n   * Begin loading a volume's data, as specified in its `LoadSpec`.\n   * Pass a callback to respond when this request loads a new channel. This callback will execute after the\n   * one assigned in `createVolume`, if any.\n   */\n  // TODO make this return a promise that resolves when loading is done?\n  // TODO this is not cancellable in the sense that any async requests initiated here are not stored\n  // in a way that they can be interrupted.\n  // TODO explicitly passing a `LoadSpec` is now rarely useful. Remove?\n  loadVolumeData(volume: Volume, loadSpec?: LoadSpec, onChannelLoaded?: PerChannelCallback): void;\n\n  /** Change which directions to prioritize when prefetching. Currently only implemented on `OMEZarrLoader`. */\n  setPrefetchPriority(directions: PrefetchDirection[]): void;\n\n  /**\n   * By default channel data can arrive out of order and at different times.\n   * This can cause the rendering to update in a way that is not visually appealing.\n   * In particular, during time series playback or Z slice playback, we would like\n   * to see all channels update at the same time.\n   * @param sync Set true to force all requested channels to load at the same time\n   */\n  syncMultichannelLoading(sync: boolean): void;\n}\n\n/** Abstract class which allows loaders to accept and return types that are easier to transfer to/from a worker. */\nexport abstract class ThreadableVolumeLoader implements IVolumeLoader {\n  /** Unchanged from `IVolumeLoader`. See that interface for details. */\n  abstract loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]>;\n\n  /**\n   * Creates an `ImageInfo` object from a `LoadSpec`, which may be passed to the `Volume` constructor to create an\n   * empty volume that can accept data loaded with the given `LoadSpec`.\n   *\n   * Also returns a new `LoadSpec` that may have been modified from the input `LoadSpec` to reflect the constraints or\n   * abilities of the loader. This new `LoadSpec` should be used when constructing the `Volume`, _not_ the original.\n   */\n  abstract createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo>;\n\n  /**\n   * Begins loading per-channel data for the volume specified by `imageInfo` and `loadSpec`.\n   *\n   * Returns a promise that resolves to reflect any modifications to `imageInfo` and/or `loadSpec` that need to be made\n   * based on this load. Actual loaded channel data is passed to `onData` as it is loaded. Depending on the format,\n   * the returned array may be in simple 3d dimension order or reflect a 2d atlas. If the latter, the dimensions of the\n   * atlas are passed as the third argument to `onData`.\n   */\n  abstract loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<Partial<LoadedVolumeInfo>>;\n\n  setPrefetchPriority(_directions: PrefetchDirection[]): void {\n    // no-op by default\n  }\n\n  syncMultichannelLoading(_sync: boolean): void {\n    // default behavior is async, to update channels as they arrive, depending on each\n    // loader's implementation details.\n  }\n\n  async createVolume(loadSpec: LoadSpec, onChannelLoaded?: PerChannelCallback): Promise<Volume> {\n    const { imageInfo, loadSpec: adjustedLoadSpec } = await this.createImageInfo(loadSpec);\n    const vol = new Volume(imageInfo, adjustedLoadSpec, this);\n    vol.channelLoadCallback = onChannelLoaded;\n    vol.imageMetadata = buildDefaultMetadata(imageInfo);\n    return vol;\n  }\n\n  async loadVolumeData(\n    volume: Volume,\n    loadSpecOverride?: LoadSpec,\n    onChannelLoaded?: PerChannelCallback\n  ): Promise<void> {\n    const onChannelData: RawChannelDataCallback = (channelIndices, dataArrays, ranges, atlasDims) => {\n      for (let i = 0; i < channelIndices.length; i++) {\n        const channelIndex = channelIndices[i];\n        const data = dataArrays[i];\n        const range = ranges[i];\n        if (atlasDims) {\n          volume.setChannelDataFromAtlas(channelIndex, data, atlasDims[0], atlasDims[1]);\n        } else {\n          volume.setChannelDataFromVolume(channelIndex, data, range);\n        }\n        onChannelLoaded?.(volume, channelIndex);\n      }\n    };\n\n    const spec = { ...loadSpecOverride, ...volume.loadSpec };\n    const { imageInfo, loadSpec } = await this.loadRawChannelData(volume.imageInfo, spec, onChannelData);\n\n    if (imageInfo) {\n      volume.imageInfo = imageInfo;\n      volume.updateDimensions();\n    }\n    volume.loadSpec = { ...loadSpec, ...spec };\n  }\n}\n","import { Box3, Vector2, Vector3 } from \"three\";\n\nimport {\n  ThreadableVolumeLoader,\n  type LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport type { ImageInfo } from \"../Volume.js\";\nimport VolumeCache from \"../VolumeCache.js\";\nimport { DATARANGE_UINT8 } from \"../types.js\";\n\ninterface PackedChannelsImage {\n  name: string;\n  channels: number[];\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\ntype JsonImageInfo = {\n  name: string;\n  version?: string;\n  images: PackedChannelsImage[];\n\n  /** X size of the *original* (not downsampled) volume, in pixels */\n  width: number;\n  /** Y size of the *original* (not downsampled) volume, in pixels */\n  height: number;\n  /** Number of rows of z-slice tiles (not pixels) in the texture atlas */\n  rows: number;\n  /** Number of columns of z-slice tiles (not pixels) in the texture atlas */\n  cols: number;\n  /** Width of a single atlas tile in pixels */\n  tile_width: number;\n  /** Height of a single atlas tile in pixels */\n  tile_height: number;\n  /** Width of the texture atlas in pixels; equivalent to `tile_width * cols` */\n  atlas_width: number;\n  /** Height of the texture atlas in pixels; equivalent to `tile_height * rows` */\n  atlas_height: number;\n  /** Number of tiles in the texture atlas (or number of z-slices in the volume segment) */\n  tiles: number;\n  /** Physical x size of a single *original* (not downsampled) pixel */\n  pixel_size_x: number;\n  /** Physical y size of a single *original* (not downsampled) pixel */\n  pixel_size_y: number;\n  /** Physical z size of a single pixel */\n  pixel_size_z: number;\n  /** Symbol of physical unit used by `pixel_size_(x|y|z)` fields */\n  pixel_size_unit?: string;\n\n  channels: number;\n  channel_names: string[];\n  channel_colors?: [number, number, number][];\n\n  times?: number;\n  time_scale?: number;\n  time_unit?: string;\n\n  // TODO should be optional?\n  transform: {\n    translation: [number, number, number];\n    rotation: [number, number, number];\n  };\n  userData?: Record<string, unknown>;\n};\n/* eslint-enable @typescript-eslint/naming-convention */\n\nconst convertImageInfo = (json: JsonImageInfo): ImageInfo => ({\n  name: json.name,\n\n  originalSize: new Vector3(json.width, json.height, json.tiles),\n  atlasTileDims: new Vector2(json.cols, json.rows),\n  volumeSize: new Vector3(json.tile_width, json.tile_height, json.tiles),\n  subregionSize: new Vector3(json.tile_width, json.tile_height, json.tiles),\n  subregionOffset: new Vector3(0, 0, 0),\n  physicalPixelSize: new Vector3(json.pixel_size_x, json.pixel_size_y, json.pixel_size_z),\n  spatialUnit: json.pixel_size_unit || \"μm\",\n\n  numChannels: json.channels,\n  channelNames: json.channel_names,\n  channelColors: json.channel_colors,\n\n  times: json.times || 1,\n  timeScale: json.time_scale || 1,\n  timeUnit: json.time_unit || \"s\",\n\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n\n  transform: {\n    translation: json.transform?.translation\n      ? new Vector3().fromArray(json.transform.translation)\n      : new Vector3(0, 0, 0),\n    rotation: json.transform?.rotation ? new Vector3().fromArray(json.transform.rotation) : new Vector3(0, 0, 0),\n  },\n\n  userData: json.userData,\n});\n\nclass JsonImageInfoLoader extends ThreadableVolumeLoader {\n  urls: string[];\n  jsonInfo: (JsonImageInfo | undefined)[];\n\n  cache?: VolumeCache;\n\n  constructor(urls: string | string[], cache?: VolumeCache) {\n    super();\n\n    if (Array.isArray(urls)) {\n      this.urls = urls;\n    } else {\n      this.urls = [urls];\n    }\n\n    this.jsonInfo = new Array(this.urls.length);\n    this.cache = cache;\n  }\n\n  private async getJsonImageInfo(time: number): Promise<JsonImageInfo> {\n    const cachedInfo = this.jsonInfo[time];\n    if (cachedInfo) {\n      return cachedInfo;\n    }\n\n    const response = await fetch(this.urls[time]);\n    const imageInfo = (await response.json()) as JsonImageInfo;\n\n    imageInfo.pixel_size_unit = imageInfo.pixel_size_unit || \"μm\";\n    imageInfo.times = imageInfo.times || this.urls.length;\n    this.jsonInfo[time] = imageInfo;\n    return imageInfo;\n  }\n\n  async loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n\n    const d = new VolumeDims();\n    d.shape = [jsonInfo.times || 1, jsonInfo.channels, jsonInfo.tiles, jsonInfo.tile_height, jsonInfo.tile_width];\n    d.spacing = [1, 1, jsonInfo.pixel_size_z, jsonInfo.pixel_size_y, jsonInfo.pixel_size_x];\n    d.spaceUnit = jsonInfo.pixel_size_unit || \"μm\";\n    d.dataType = \"uint8\";\n    return [d];\n  }\n\n  async createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n    return { imageInfo: convertImageInfo(jsonInfo), loadSpec };\n  }\n\n  async loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<{ loadSpec?: LoadSpec }> {\n    // if you need to adjust image paths prior to download,\n    // now is the time to do it.\n    // Try to figure out the urlPrefix from the LoadSpec.\n    // For this format we assume the image data is in the same directory as the json file.\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n\n    let images = jsonInfo?.images;\n    if (!images) {\n      return {};\n    }\n\n    const requestedChannels = loadSpec.channels;\n    if (requestedChannels) {\n      // If only some channels are requested, load only images which contain at least one requested channel\n      images = images.filter(({ channels }) => channels.some((ch) => ch in requestedChannels));\n    }\n\n    // This regex removes everything after the last slash, so the url had better be simple.\n    const urlPrefix = this.urls[loadSpec.time].replace(/[^/]*$/, \"\");\n    images = images.map((element) => ({ ...element, name: urlPrefix + element.name }));\n\n    const w = imageInfo.atlasTileDims.x * imageInfo.volumeSize.x;\n    const h = imageInfo.atlasTileDims.y * imageInfo.volumeSize.y;\n    const wrappedOnData = (ch: number[], data: Uint8Array[], ranges: [number, number][]) =>\n      onData(ch, data, ranges, [w, h]);\n    JsonImageInfoLoader.loadVolumeAtlasData(images, wrappedOnData, this.cache);\n\n    const adjustedLoadSpec = {\n      ...loadSpec,\n      // `subregion` and `multiscaleLevel` are unused by this loader\n      subregion: new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1)),\n      multiscaleLevel: 0,\n      // include all channels in any loaded images\n      channels: images.flatMap(({ channels }) => channels),\n    };\n    return { loadSpec: adjustedLoadSpec };\n  }\n\n  /**\n   * load per-channel volume data from a batch of image files containing the volume slices tiled across the images\n   * @param {Array.<{name:string, channels:Array.<number>}>} imageArray\n   * @param {RawChannelDataCallback} onData Per-channel callback. Called when each channel's atlased volume data is loaded\n   * @param {VolumeCache} cache\n   * @example loadVolumeAtlasData([{\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_0.png\",\n   *     \"channels\": [0, 1, 2]\n   * }, {\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_1.png\",\n   *     \"channels\": [3, 4, 5]\n   * }, {\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_2.png\",\n   *     \"channels\": [6, 7, 8]\n   * }], mycallback);\n   */\n  static loadVolumeAtlasData(\n    imageArray: PackedChannelsImage[],\n    onData: RawChannelDataCallback,\n    cache?: VolumeCache\n  ): void {\n    imageArray.forEach(async (image) => {\n      // Because the data is fetched such that one fetch returns a whole batch,\n      // if any in batch is cached then they all should be. So if any in batch is NOT cached,\n      // then we will have to do a batch request. This logic works both ways because it's all or nothing.\n      let cacheHit = true;\n      for (let j = 0; j < Math.min(image.channels.length, 4); ++j) {\n        const chindex = image.channels[j];\n        const cacheResult = cache?.get(`${image.name}/${chindex}`);\n        if (cacheResult) {\n          // all data coming from this loader is natively 8-bit\n          onData([chindex], [new Uint8Array(cacheResult)], [DATARANGE_UINT8]);\n        } else {\n          cacheHit = false;\n          // we can stop checking because we know we are going to have to fetch the whole batch\n          break;\n        }\n      }\n\n      // if all channels were in cache then we can move on to the next\n      // image (batch) without requesting\n      if (cacheHit) {\n        return;\n      }\n\n      const response = await fetch(image.name, { mode: \"cors\" });\n      const blob = await response.blob();\n      const bitmap = await createImageBitmap(blob);\n\n      const canvas = new OffscreenCanvas(bitmap.width, bitmap.height);\n      const ctx = canvas.getContext(\"2d\") as OffscreenCanvasRenderingContext2D | null;\n      if (!ctx) {\n        console.log(\"Error creating canvas 2d context for \" + image.name);\n        return;\n      }\n      ctx.globalCompositeOperation = \"copy\";\n      ctx.globalAlpha = 1.0;\n      ctx.drawImage(bitmap, 0, 0);\n      const iData = ctx.getImageData(0, 0, bitmap.width, bitmap.height);\n\n      const channelsBits: Uint8Array[] = [];\n      const length = bitmap.width * bitmap.height;\n\n      // allocate channels in batch\n      for (let ch = 0; ch < Math.min(image.channels.length, 4); ++ch) {\n        channelsBits.push(new Uint8Array(length));\n      }\n\n      // extract the data\n      for (let j = 0; j < Math.min(image.channels.length, 4); ++j) {\n        for (let px = 0; px < length; px++) {\n          channelsBits[j][px] = iData.data[px * 4 + j];\n        }\n      }\n\n      // done with `iData` and `canvas` now.\n\n      for (let ch = 0; ch < Math.min(image.channels.length, 4); ++ch) {\n        const chindex = image.channels[ch];\n        cache?.insert(`${image.name}/${chindex}`, channelsBits[ch]);\n        // NOTE: the atlas dimensions passed in here are currently unused by `JSONImageInfoLoader`\n        // all data coming from this loader is natively 8-bit\n        onData([chindex], [channelsBits[ch]], [DATARANGE_UINT8], [bitmap.width, bitmap.height]);\n      }\n    });\n  }\n}\n\nexport { JsonImageInfoLoader };\n","import { Box3, Vector3 } from \"three\";\n\nimport * as zarr from \"@zarrita/core\";\nimport { get as zarrGet, slice, Slice } from \"@zarrita/indexing\";\nimport { AbsolutePath } from \"@zarrita/storage\";\n// Importing `FetchStore` from its home subpackage (@zarrita/storage) causes errors.\n// Getting it from the top-level package means we don't get its type. This is also a bug, but it's more acceptable.\nimport { FetchStore } from \"zarrita\";\n\nimport { ImageInfo } from \"../Volume.js\";\nimport VolumeCache from \"../VolumeCache.js\";\nimport SubscribableRequestQueue from \"../utils/SubscribableRequestQueue.js\";\nimport {\n  ThreadableVolumeLoader,\n  LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport {\n  composeSubregion,\n  computePackedAtlasDims,\n  convertSubregionToPixels,\n  pickLevelToLoad,\n  unitNameToSymbol,\n} from \"./VolumeLoaderUtils.js\";\nimport ChunkPrefetchIterator from \"./zarr_utils/ChunkPrefetchIterator.js\";\nimport WrappedStore from \"./zarr_utils/WrappedStore.js\";\nimport {\n  getDimensionCount,\n  getScale,\n  matchSourceScaleLevels,\n  orderByDimension,\n  orderByTCZYX,\n  remapAxesToTCZYX,\n} from \"./zarr_utils/utils.js\";\nimport type {\n  OMEZarrMetadata,\n  PrefetchDirection,\n  SubscriberId,\n  TCZYX,\n  ZarrSource,\n  NumericZarrArray,\n} from \"./zarr_utils/types.js\";\n\nconst CHUNK_REQUEST_CANCEL_REASON = \"chunk request cancelled\";\n\n// returns the converted data and the original min and max values (which have been remapped to 0 and 255)\nfunction convertChannel(channelData: zarr.TypedArray<zarr.NumberDataType>): [Uint8Array, number, number] {\n  // get min and max\n  let min = channelData[0];\n  let max = channelData[0];\n  for (let i = 0; i < channelData.length; i++) {\n    const val = channelData[i];\n    if (val < min) {\n      min = val;\n    }\n    if (val > max) {\n      max = val;\n    }\n  }\n\n  if (channelData instanceof Uint8Array) {\n    return [channelData as Uint8Array, min, max];\n  }\n\n  // normalize and convert to u8\n  const u8 = new Uint8Array(channelData.length);\n  const range = max - min;\n  for (let i = 0; i < channelData.length; i++) {\n    u8[i] = ((channelData[i] - min) / range) * 255;\n  }\n\n  return [u8, min, max];\n}\n\nexport type ZarrLoaderFetchOptions = {\n  /** The max. number of requests the loader can issue at a time. Ignored if the constructor also receives a queue. */\n  concurrencyLimit?: number;\n  /**\n   * The max. number of *prefetch* requests the loader can issue at a time. Set lower than `concurrencyLimit` to ensure\n   * that prefetching leaves room in the queue for actual loads. Ignored if the constructor also receives a queue.\n   */\n  prefetchConcurrencyLimit?: number;\n  /**\n   * The max. number of chunks to prefetch outward in either direction. E.g. if a load requests chunks with z coords 3\n   * and 4 and `maxPrefetchDistance` in z is 2, the loader will prefetch similar chunks with z coords 1, 2, 5, and 6\n   * (or until it hits `maxPrefetchChunks`). Ordered TZYX.\n   */\n  maxPrefetchDistance: [number, number, number, number];\n  /** The max. number of total chunks that can be prefetched after any load. */\n  maxPrefetchChunks: number;\n  /** The initial directions to prioritize when prefetching */\n  priorityDirections?: PrefetchDirection[];\n};\n\ntype ZarrChunkFetchInfo = {\n  sourceIdx: number;\n  key: string;\n};\n\nconst DEFAULT_FETCH_OPTIONS = {\n  maxPrefetchDistance: [5, 5, 5, 5] as [number, number, number, number],\n  maxPrefetchChunks: 30,\n};\n\nclass OMEZarrLoader extends ThreadableVolumeLoader {\n  /** The ID of the subscriber responsible for \"actual loads\" (non-prefetch requests) */\n  private loadSubscriber: SubscriberId | undefined;\n  /** The ID of the subscriber responsible for prefetches, so that requests can be cancelled and reissued */\n  private prefetchSubscriber: SubscriberId | undefined;\n\n  // TODO: this property should definitely be owned by `Volume` if this loader is ever used by multiple volumes.\n  //   This may cause errors or incorrect results otherwise!\n  private maxExtent?: Box3;\n\n  private syncChannels = false;\n\n  private constructor(\n    /**\n     * Array of records, each containing the objects and metadata we need to load from one source of multiscale zarr\n     * data. See documentation on `ZarrSource` for more.\n     */\n    private sources: ZarrSource[],\n    /** Handle to a `SubscribableRequestQueue` for smart concurrency management and request cancelling/reissuing. */\n    private requestQueue: SubscribableRequestQueue,\n    /** Options to configure (pre)fetching behavior. */\n    private fetchOptions: ZarrLoaderFetchOptions = DEFAULT_FETCH_OPTIONS,\n    /** Direction(s) to prioritize when prefetching. Stored separate from `fetchOptions` since it may be mutated. */\n    private priorityDirections: PrefetchDirection[] = []\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a new `OMEZarrLoader`.\n   *\n   * @param urls The URL(s) of the OME-Zarr data to load. If `urls` is an array, the loader will attempt to find scale\n   *  levels with exactly the same size in every source. If matching level(s) are available, the loader will produce a\n   *  volume containing all channels from every provided zarr in the order they appear in `urls`. If no matching sets\n   *  of scale levels are available, creation fails.\n   * @param scenes The scene(s) to load from each URL. If `urls` is an array, `scenes` may either be an array of values\n   *  corresponding to each URL, or a single value to apply to all URLs. Default 0.\n   * @param cache A cache to use for storing fetched data. If not provided, a new cache will be created.\n   * @param queue A queue to use for managing requests. If not provided, a new queue will be created.\n   * @param fetchOptions Options to configure (pre)fetching behavior.\n   */\n  static async createLoader(\n    urls: string | string[],\n    scenes: number | number[] = 0,\n    cache?: VolumeCache,\n    queue?: SubscribableRequestQueue,\n    fetchOptions?: ZarrLoaderFetchOptions\n  ): Promise<OMEZarrLoader> {\n    // Setup queue and store, get basic metadata\n    if (!queue) {\n      queue = new SubscribableRequestQueue(fetchOptions?.concurrencyLimit, fetchOptions?.prefetchConcurrencyLimit);\n    }\n    const urlsArr = Array.isArray(urls) ? urls : [urls];\n    const scenesArr = Array.isArray(scenes) ? scenes : [scenes];\n\n    // Create one `ZarrSource` per URL\n    const sourceProms = urlsArr.map(async (url, i) => {\n      const store = new WrappedStore<RequestInit>(new FetchStore(url), cache, queue);\n      const root = zarr.root(store);\n      const group = await zarr.open(root, { kind: \"group\" });\n      const { multiscales, omero } = group.attrs as OMEZarrMetadata;\n\n      // Pick scene (multiscale)\n      let scene = scenesArr[Math.min(i, scenesArr.length - 1)];\n      if (scene > multiscales.length) {\n        console.warn(`WARNING: OMEZarrLoader: scene ${scene} is invalid. Using scene 0.`);\n        scene = 0;\n      }\n      const multiscaleMetadata = multiscales[scene];\n\n      // Open all scale levels of multiscale\n      const lvlProms = multiscaleMetadata.datasets.map(({ path }) => zarr.open(root.resolve(path), { kind: \"array\" }));\n      const scaleLevels = (await Promise.all(lvlProms)) as NumericZarrArray[];\n      const axesTCZYX = remapAxesToTCZYX(multiscaleMetadata.axes);\n\n      return {\n        scaleLevels,\n        multiscaleMetadata,\n        omeroMetadata: omero,\n        axesTCZYX,\n        channelOffset: 0,\n      } as ZarrSource;\n    });\n    const sources = await Promise.all(sourceProms);\n\n    // Set `channelOffset`s so we can match channel indices to sources\n    let channelCount = 0;\n    for (const s of sources) {\n      s.channelOffset = channelCount;\n      channelCount += s.omeroMetadata.channels.length;\n    }\n    // Ensure the sizes of all sources' scale levels are matched up. See this function's docs for more.\n    matchSourceScaleLevels(sources);\n    // TODO: if `matchSourceScaleLevels` returned successfully, every one of these sources' `multiscaleMetadata` is the\n    // same in every field we care about, so we only ever use the first source's `multiscaleMetadata` after this point.\n    // Should we only store one `OMEMultiscale` record total, rather than one per source?\n    const priorityDirs = fetchOptions?.priorityDirections ? fetchOptions.priorityDirections.slice() : undefined;\n    return new OMEZarrLoader(sources, queue, fetchOptions, priorityDirs);\n  }\n\n  private getUnitSymbols(): [string, string] {\n    const source = this.sources[0];\n    // Assume all spatial axes in all sources have the same units - we have no means of storing per-axis unit symbols\n    const xi = source.axesTCZYX[4];\n    const spaceUnitName = source.multiscaleMetadata.axes[xi].unit;\n    const spaceUnitSymbol = unitNameToSymbol(spaceUnitName) || spaceUnitName || \"\";\n\n    const ti = source.axesTCZYX[0];\n    const timeUnitName = ti > -1 ? source.multiscaleMetadata.axes[ti].unit : undefined;\n    const timeUnitSymbol = unitNameToSymbol(timeUnitName) || timeUnitName || \"\";\n\n    return [spaceUnitSymbol, timeUnitSymbol];\n  }\n\n  private getLevelShapesZYX(): [number, number, number][] {\n    const source = this.sources[0];\n    const [z, y, x] = source.axesTCZYX.slice(-3);\n    return source.scaleLevels.map(({ shape }) => [z === -1 ? 1 : shape[z], shape[y], shape[x]]);\n  }\n\n  private getScale(level: number): TCZYX<number> {\n    return getScale(this.sources[0].multiscaleMetadata.datasets[level], this.sources[0].axesTCZYX);\n  }\n\n  private orderByDimension<T>(valsTCZYX: TCZYX<T>, sourceIdx = 0): T[] {\n    return orderByDimension(valsTCZYX, this.sources[sourceIdx].axesTCZYX);\n  }\n\n  private orderByTCZYX<T>(valsDimension: T[], defaultValue: T, sourceIdx = 0): TCZYX<T> {\n    return orderByTCZYX(valsDimension, this.sources[sourceIdx].axesTCZYX, defaultValue);\n  }\n\n  /**\n   * Converts a volume channel index to the index of its zarr source and its channel index within that zarr.\n   * e.g., if the loader has 2 sources, the first with 3 channels and the second with 2, then `matchChannelToSource(4)`\n   * returns `[1, 1]` (the second channel of the second source).\n   */\n  private matchChannelToSource(absoluteChannelIndex: number): { sourceIndex: number; channelIndexInSource: number } {\n    const lastSrcIdx = this.sources.length - 1;\n    const lastSrc = this.sources[lastSrcIdx];\n    const lastSrcNumChannels = lastSrc.scaleLevels[0].shape[lastSrc.axesTCZYX[1]];\n\n    if (absoluteChannelIndex > lastSrc.channelOffset + lastSrcNumChannels) {\n      throw new Error(\"Channel index out of range\");\n    }\n\n    const firstGreaterIdx = this.sources.findIndex((src) => src.channelOffset > absoluteChannelIndex);\n    const sourceIndex = firstGreaterIdx === -1 ? lastSrcIdx : firstGreaterIdx - 1;\n    const channelIndexInSource = absoluteChannelIndex - this.sources[sourceIndex].channelOffset;\n    return { sourceIndex, channelIndexInSource };\n  }\n\n  /**\n   * Change which directions to prioritize when prefetching. All chunks will be prefetched in these directions before\n   * any chunks are prefetched in any other directions.\n   */\n  setPrefetchPriority(directions: PrefetchDirection[]): void {\n    this.priorityDirections = directions;\n  }\n\n  syncMultichannelLoading(sync: boolean): void {\n    this.syncChannels = sync;\n  }\n\n  loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const [spaceUnit, timeUnit] = this.getUnitSymbols();\n    // Compute subregion size so we can factor that in\n    const maxExtent = this.maxExtent ?? new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1));\n    const subregion = composeSubregion(loadSpec.subregion, maxExtent);\n    const regionSize = subregion.getSize(new Vector3());\n    const regionArr = [1, 1, regionSize.z, regionSize.y, regionSize.x];\n\n    const result = this.sources[0].scaleLevels.map((level, i) => {\n      const scale = this.getScale(i);\n      const dims = new VolumeDims();\n\n      dims.spaceUnit = spaceUnit;\n      dims.timeUnit = timeUnit;\n      dims.shape = this.orderByTCZYX(level.shape, 1).map((val, idx) => Math.max(Math.ceil(val * regionArr[idx]), 1));\n      dims.spacing = this.orderByTCZYX(scale, 1);\n\n      return dims;\n    });\n\n    return Promise.resolve(result);\n  }\n\n  createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    // We ensured most info (dims, chunks, etc.) matched between sources earlier, so we can just use the first source.\n    const source0 = this.sources[0];\n    const [t, , z, y, x] = source0.axesTCZYX;\n    const hasT = t > -1;\n    const hasZ = z > -1;\n\n    const shape0 = source0.scaleLevels[0].shape;\n    const levelToLoad = pickLevelToLoad(loadSpec, this.getLevelShapesZYX());\n    const shapeLv = source0.scaleLevels[levelToLoad].shape;\n\n    const [spatialUnit, timeUnit] = this.getUnitSymbols();\n\n    // Now we care about other sources: # of channels is the `channelOffset` of the last source plus its # of channels\n    const sourceLast = this.sources[this.sources.length - 1];\n    const cLast = sourceLast.axesTCZYX[1];\n    const lastHasC = cLast > -1;\n    const numChannels = sourceLast.channelOffset + (lastHasC ? sourceLast.scaleLevels[levelToLoad].shape[cLast] : 1);\n    const times = hasT ? shapeLv[t] : 1;\n\n    if (!this.maxExtent) {\n      this.maxExtent = loadSpec.subregion.clone();\n    }\n    const pxDims0 = convertSubregionToPixels(\n      loadSpec.subregion,\n      new Vector3(shape0[x], shape0[y], hasZ ? shape0[z] : 1)\n    );\n    const pxSize0 = pxDims0.getSize(new Vector3());\n    const pxDimsLv = convertSubregionToPixels(\n      loadSpec.subregion,\n      new Vector3(shapeLv[x], shapeLv[y], hasZ ? shapeLv[z] : 1)\n    );\n    const pxSizeLv = pxDimsLv.getSize(new Vector3());\n\n    const atlasTileDims = computePackedAtlasDims(pxSizeLv.z, pxSizeLv.x, pxSizeLv.y);\n\n    // Channel names is the other place where we have to check every source\n    // Track which channel names we've seen so far, so that we can rename them to avoid name collisions\n    const channelNamesMap = new Map<string, number>();\n    const channelNames = this.sources.flatMap((src) =>\n      src.omeroMetadata.channels.map((ch) => {\n        const numMatchingChannels = channelNamesMap.get(ch.label);\n\n        if (numMatchingChannels !== undefined) {\n          // If e.g. we've seen channel \"Membrane\" once before, rename this one to \"Membrane (1)\"\n          channelNamesMap.set(ch.label, numMatchingChannels + 1);\n          return `${ch.label} (${numMatchingChannels})`;\n        } else {\n          channelNamesMap.set(ch.label, 1);\n          return ch.label;\n        }\n      })\n    );\n\n    // for physicalPixelSize, we use the scale of the first level\n    const scale5d = this.getScale(0);\n    // assume that ImageInfo wants the timeScale of level 0\n    const timeScale = hasT ? scale5d[t] : 1;\n\n    const imgdata: ImageInfo = {\n      name: source0.omeroMetadata.name,\n\n      originalSize: pxSize0,\n      atlasTileDims,\n      volumeSize: pxSizeLv,\n      subregionSize: pxSizeLv.clone(),\n      subregionOffset: new Vector3(0, 0, 0),\n      physicalPixelSize: new Vector3(scale5d[x], scale5d[y], hasZ ? scale5d[z] : Math.min(scale5d[x], scale5d[y])),\n      spatialUnit,\n\n      numChannels,\n      channelNames,\n      times,\n      timeScale,\n      timeUnit,\n      numMultiscaleLevels: source0.scaleLevels.length,\n      multiscaleLevel: levelToLoad,\n\n      transform: {\n        translation: new Vector3(0, 0, 0),\n        rotation: new Vector3(0, 0, 0),\n      },\n    };\n\n    // The `LoadSpec` passed in at this stage should represent the subset which this loader loads, not that\n    // which the volume contains. The volume contains the full extent of the subset recognized by this loader.\n    const fullExtentLoadSpec: LoadSpec = {\n      ...loadSpec,\n      subregion: new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1)),\n    };\n\n    return Promise.resolve({ imageInfo: imgdata, loadSpec: fullExtentLoadSpec });\n  }\n\n  private async prefetchChunk(\n    scaleLevel: NumericZarrArray,\n    coords: TCZYX<number>,\n    subscriber: SubscriberId\n  ): Promise<void> {\n    const { store, path } = scaleLevel;\n    const separator = path.endsWith(\"/\") ? \"\" : \"/\";\n    const key = path + separator + this.orderByDimension(coords).join(\"/\");\n    try {\n      // Calling `get` and doing nothing with the result still triggers a cache check, fetch, and insertion\n      await store.get(key as AbsolutePath, { subscriber, isPrefetch: true });\n    } catch (e) {\n      if (e !== CHUNK_REQUEST_CANCEL_REASON) {\n        throw e;\n      }\n    }\n  }\n\n  /** Reads a list of chunk keys requested by a `loadVolumeData` call and sets up appropriate prefetch requests. */\n  private beginPrefetch(keys: ZarrChunkFetchInfo[], scaleLevel: number): void {\n    // Convert keys to arrays of coords\n    const chunkCoords = keys.map(({ sourceIdx, key }) => {\n      const numDims = getDimensionCount(this.sources[sourceIdx].axesTCZYX);\n      const coordsInDimensionOrder = key\n        .trim()\n        .split(\"/\")\n        .slice(-numDims)\n        .filter((s) => s !== \"\")\n        .map((s) => parseInt(s, 10));\n      const sourceCoords = this.orderByTCZYX(coordsInDimensionOrder, 0, sourceIdx);\n      // Convert source channel index to absolute channel index for `ChunkPrefetchIterator`'s benefit\n      // (we match chunk coordinates output from `ChunkPrefetchIterator` back to sources below)\n      sourceCoords[1] += this.sources[sourceIdx].channelOffset;\n      return sourceCoords;\n    });\n\n    // Get number of chunks per dimension in every source array\n    const chunkDimsTCZYX = this.sources.map((src) => {\n      const level = src.scaleLevels[scaleLevel];\n      const chunkDimsUnordered = level.shape.map((dim, idx) => Math.ceil(dim / level.chunks[idx]));\n      return this.orderByTCZYX(chunkDimsUnordered, 1);\n    });\n    // `ChunkPrefetchIterator` yields chunk coordinates in order of roughly how likely they are to be loaded next\n    const prefetchIterator = new ChunkPrefetchIterator(\n      chunkCoords,\n      this.fetchOptions.maxPrefetchDistance,\n      chunkDimsTCZYX,\n      this.priorityDirections\n    );\n\n    const subscriber = this.requestQueue.addSubscriber();\n    let prefetchCount = 0;\n    for (const chunk of prefetchIterator) {\n      if (prefetchCount >= this.fetchOptions.maxPrefetchChunks) {\n        break;\n      }\n      // Match absolute channel coordinate back to source index and channel index\n      const { sourceIndex, channelIndexInSource } = this.matchChannelToSource(chunk[1]);\n      const sourceScaleLevel = this.sources[sourceIndex].scaleLevels[scaleLevel];\n      chunk[1] = channelIndexInSource;\n      this.prefetchChunk(sourceScaleLevel, chunk, subscriber);\n      prefetchCount++;\n    }\n\n    // Clear out old prefetch requests (requests which also cover this new prefetch will be preserved)\n    if (this.prefetchSubscriber !== undefined) {\n      this.requestQueue.removeSubscriber(this.prefetchSubscriber, CHUNK_REQUEST_CANCEL_REASON);\n    }\n    this.prefetchSubscriber = subscriber;\n  }\n\n  private updateImageInfoForLoad(imageInfo: ImageInfo, loadSpec: LoadSpec): ImageInfo {\n    // Apply `this.maxExtent` to subregion, if it exists\n    const maxExtent = this.maxExtent ?? new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1));\n    const subregion = composeSubregion(loadSpec.subregion, maxExtent);\n\n    // Pick the level to load based on the subregion size\n    const multiscaleLevel = pickLevelToLoad({ ...loadSpec, subregion }, this.getLevelShapesZYX());\n    const array0Shape = this.sources[0].scaleLevels[multiscaleLevel].shape;\n\n    // Convert subregion to volume voxels\n    const [z, y, x] = this.sources[0].axesTCZYX.slice(2);\n    const regionPx = convertSubregionToPixels(\n      subregion,\n      new Vector3(array0Shape[x], array0Shape[y], z === -1 ? 1 : array0Shape[z])\n    );\n\n    // Derive other image info properties from subregion and level to load\n    const subregionSize = regionPx.getSize(new Vector3());\n    const atlasTileDims = computePackedAtlasDims(subregionSize.z, subregionSize.x, subregionSize.y);\n    const volumeExtent = convertSubregionToPixels(\n      maxExtent,\n      new Vector3(array0Shape[x], array0Shape[y], z === -1 ? 1 : array0Shape[z])\n    );\n    const volumeSize = volumeExtent.getSize(new Vector3());\n\n    return {\n      ...imageInfo,\n      atlasTileDims,\n      volumeSize,\n      subregionSize,\n      subregionOffset: regionPx.min,\n      multiscaleLevel,\n    };\n  }\n\n  loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<{ imageInfo: ImageInfo }> {\n    // This seemingly useless line keeps a stable local copy of `syncChannels` which the async closures below capture\n    // so that changes to `this.syncChannels` don't affect the behavior of loads in progress.\n    const syncChannels = this.syncChannels;\n\n    const updatedImageInfo = this.updateImageInfoForLoad(imageInfo, loadSpec);\n    const { numChannels, multiscaleLevel } = updatedImageInfo;\n    const channelIndexes = loadSpec.channels ?? Array.from({ length: numChannels }, (_, i) => i);\n\n    const subscriber = this.requestQueue.addSubscriber();\n\n    // Prefetch housekeeping: we want to save keys involved in this load to prefetch later\n    const keys: ZarrChunkFetchInfo[] = [];\n    const reportKeyBase = (sourceIdx: number, key: string, sub: SubscriberId) => {\n      if (sub === subscriber) {\n        keys.push({ sourceIdx, key });\n      }\n    };\n\n    const resultChannelIndices: number[] = [];\n    const resultChannelData: Uint8Array[] = [];\n    const resultChannelRanges: [number, number][] = [];\n\n    const channelPromises = channelIndexes.map(async (ch) => {\n      // Build slice spec\n      const min = updatedImageInfo.subregionOffset;\n      const max = min.clone().add(updatedImageInfo.subregionSize);\n      const { sourceIndex: sourceIdx, channelIndexInSource: sourceCh } = this.matchChannelToSource(ch);\n      const unorderedSpec = [loadSpec.time, sourceCh, slice(min.z, max.z), slice(min.y, max.y), slice(min.x, max.x)];\n\n      const level = this.sources[sourceIdx].scaleLevels[multiscaleLevel];\n      const sliceSpec = this.orderByDimension(unorderedSpec as TCZYX<number | Slice>, sourceIdx);\n      const reportKey = (key: string, sub: SubscriberId) => reportKeyBase(sourceIdx, key, sub);\n\n      try {\n        const result = await zarrGet(level, sliceSpec, { opts: { subscriber, reportKey } });\n        const converted = convertChannel(result.data);\n        if (syncChannels) {\n          resultChannelData.push(converted[0]);\n          resultChannelIndices.push(ch);\n          resultChannelRanges.push([converted[1], converted[2]]);\n        } else {\n          onData([ch], [converted[0]], [[converted[1], converted[2]]]);\n        }\n      } catch (e) {\n        // TODO: verify that cancelling requests in progress doesn't leak memory\n        if (e !== CHUNK_REQUEST_CANCEL_REASON) {\n          console.log(e);\n          throw e;\n        }\n      }\n    });\n\n    // Cancel any in-flight requests from previous loads that aren't useful to this one\n    if (this.loadSubscriber !== undefined) {\n      this.requestQueue.removeSubscriber(this.loadSubscriber, CHUNK_REQUEST_CANCEL_REASON);\n    }\n    this.loadSubscriber = subscriber;\n\n    this.beginPrefetch(keys, multiscaleLevel);\n\n    Promise.all(channelPromises).then(() => {\n      if (syncChannels) {\n        onData(resultChannelIndices, resultChannelData, resultChannelRanges);\n      }\n      this.requestQueue.removeSubscriber(subscriber, CHUNK_REQUEST_CANCEL_REASON);\n    });\n    return Promise.resolve({ imageInfo: updatedImageInfo });\n  }\n}\n\nexport { OMEZarrLoader };\n","import { Box3, Vector3 } from \"three\";\n\nimport {\n  ThreadableVolumeLoader,\n  type LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport { computePackedAtlasDims } from \"./VolumeLoaderUtils\";\nimport { ImageInfo } from \"../Volume\";\nimport { DATARANGE_UINT8 } from \"../types.js\";\n\n// this is the form in which a 4D numpy array arrives as converted\n// by jupyterlab into a js object.\n// This loader does not yet support multiple time samples.\nexport type RawArrayData = {\n  // expected to be \"uint8\" always\n  dtype: \"uint8\";\n  // [c,z,y,x]\n  shape: [number, number, number, number];\n  // the bits (assumed uint8!!)\n  buffer: DataView;\n};\n\n// minimal metadata for visualization\nexport type RawArrayInfo = {\n  name: string;\n  sizeX: number;\n  sizeY: number;\n  sizeZ: number;\n  sizeC: number;\n  physicalPixelSize: [number, number, number];\n  spatialUnit: string;\n  channelNames: string[];\n  userData?: Record<string, unknown>;\n};\n\nexport interface RawArrayLoaderOptions {\n  data: RawArrayData;\n  metadata: RawArrayInfo;\n}\n\nconst convertImageInfo = (json: RawArrayInfo): ImageInfo => ({\n  name: json.name,\n\n  // assumption: the data is already sized to fit in our viewer's preferred\n  // memory footprint (a tiled atlas texture as of this writing)\n  originalSize: new Vector3(json.sizeX, json.sizeY, json.sizeZ),\n  atlasTileDims: computePackedAtlasDims(json.sizeZ, json.sizeX, json.sizeY),\n  volumeSize: new Vector3(json.sizeX, json.sizeY, json.sizeZ),\n  subregionSize: new Vector3(json.sizeX, json.sizeY, json.sizeZ),\n  subregionOffset: new Vector3(0, 0, 0),\n  physicalPixelSize: new Vector3(json.physicalPixelSize[0], json.physicalPixelSize[1], json.physicalPixelSize[2]),\n  spatialUnit: json.spatialUnit || \"μm\",\n\n  numChannels: json.sizeC,\n  channelNames: json.channelNames,\n  channelColors: undefined, //json.channelColors,\n\n  times: 1,\n  timeScale: 1,\n  timeUnit: \"s\",\n\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n\n  transform: {\n    translation: new Vector3(0, 0, 0),\n    rotation: new Vector3(0, 0, 0),\n  },\n\n  userData: json.userData,\n});\n\nclass RawArrayLoader extends ThreadableVolumeLoader {\n  data: RawArrayData;\n  jsonInfo: RawArrayInfo;\n\n  constructor(rawData: RawArrayData, rawDataInfo: RawArrayInfo) {\n    super();\n    this.jsonInfo = rawDataInfo;\n    this.data = rawData;\n    // check consistent dims\n    if (\n      this.data.shape[0] !== this.jsonInfo.sizeC ||\n      this.data.shape[1] !== this.jsonInfo.sizeZ ||\n      this.data.shape[2] !== this.jsonInfo.sizeY ||\n      this.data.shape[3] !== this.jsonInfo.sizeX\n    ) {\n      throw new Error(\"RawArrayLoader: data shape does not match metadata\");\n    }\n  }\n\n  async loadDims(_loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const jsonInfo = this.jsonInfo;\n\n    const d = new VolumeDims();\n    d.shape = [1, jsonInfo.sizeC, jsonInfo.sizeZ, jsonInfo.sizeY, jsonInfo.sizeX];\n    d.spacing = [1, 1, jsonInfo.physicalPixelSize[2], jsonInfo.physicalPixelSize[1], jsonInfo.physicalPixelSize[0]];\n    d.spaceUnit = jsonInfo.spatialUnit || \"μm\";\n    d.dataType = \"uint8\";\n    return [d];\n  }\n\n  async createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    return { imageInfo: convertImageInfo(this.jsonInfo), loadSpec };\n  }\n\n  async loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<{ loadSpec?: LoadSpec }> {\n    const requestedChannels = loadSpec.channels;\n\n    for (let chindex = 0; chindex < imageInfo.numChannels; ++chindex) {\n      if (requestedChannels && requestedChannels.length > 0 && !requestedChannels.includes(chindex)) {\n        continue;\n      }\n      const volSizeBytes = this.data.shape[3] * this.data.shape[2] * this.data.shape[1]; // x*y*z pixels * 1 byte/pixel\n      const channelData = new Uint8Array(this.data.buffer.buffer, chindex * volSizeBytes, volSizeBytes);\n      // all data coming from this loader is natively 8-bit\n      onData([chindex], [channelData], [DATARANGE_UINT8]);\n    }\n\n    const adjustedLoadSpec = {\n      ...loadSpec,\n      // `subregion` and `multiscaleLevel` are unused by this loader\n      subregion: new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1)),\n      multiscaleLevel: 0,\n    };\n    return { loadSpec: adjustedLoadSpec };\n  }\n}\n\nexport { RawArrayLoader };\n","import { fromUrl } from \"geotiff\";\nimport { Vector3 } from \"three\";\n\nimport {\n  ThreadableVolumeLoader,\n  LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport { computePackedAtlasDims } from \"./VolumeLoaderUtils.js\";\nimport type { ImageInfo } from \"../Volume.js\";\n\nfunction prepareXML(xml: string): string {\n  // trim trailing unicode zeros?\n  // eslint-disable-next-line no-control-regex\n  const expr = /[\\u0000]$/g;\n  return xml.trim().replace(expr, \"\").trim();\n}\n\nfunction getOME(xml: string): Element {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xml, \"text/xml\");\n  const omeEl = xmlDoc.getElementsByTagName(\"OME\")[0];\n  return omeEl;\n}\n\nclass OMEDims {\n  sizex = 0;\n  sizey = 0;\n  sizez = 0;\n  sizec = 0;\n  sizet = 0;\n  unit = \"\";\n  pixeltype = \"\";\n  dimensionorder = \"\";\n  pixelsizex = 0;\n  pixelsizey = 0;\n  pixelsizez = 0;\n  channelnames: string[] = [];\n}\n\nfunction getOMEDims(imageEl: Element): OMEDims {\n  const dims = new OMEDims();\n\n  const pixelsEl = imageEl.getElementsByTagName(\"Pixels\")[0];\n  dims.sizex = Number(pixelsEl.getAttribute(\"SizeX\"));\n  dims.sizey = Number(pixelsEl.getAttribute(\"SizeY\"));\n  dims.sizez = Number(pixelsEl.getAttribute(\"SizeZ\"));\n  dims.sizec = Number(pixelsEl.getAttribute(\"SizeC\"));\n  dims.sizet = Number(pixelsEl.getAttribute(\"SizeT\"));\n  dims.unit = pixelsEl.getAttribute(\"PhysicalSizeXUnit\") || \"\";\n  dims.pixeltype = pixelsEl.getAttribute(\"Type\") || \"\";\n  dims.dimensionorder = pixelsEl.getAttribute(\"DimensionOrder\") || \"XYZCT\";\n  dims.pixelsizex = Number(pixelsEl.getAttribute(\"PhysicalSizeX\"));\n  dims.pixelsizey = Number(pixelsEl.getAttribute(\"PhysicalSizeY\"));\n  dims.pixelsizez = Number(pixelsEl.getAttribute(\"PhysicalSizeZ\"));\n  const channelsEls = pixelsEl.getElementsByTagName(\"Channel\");\n  for (let i = 0; i < channelsEls.length; ++i) {\n    const name = channelsEls[i].getAttribute(\"Name\");\n    const id = channelsEls[i].getAttribute(\"ID\");\n    dims.channelnames.push(name ? name : id ? id : \"Channel\" + i);\n  }\n\n  return dims;\n}\n\nconst getBytesPerSample = (type: string): number => (type === \"uint8\" ? 1 : type === \"uint16\" ? 2 : 4);\n\n// Despite the class `TiffLoader` extends, this loader is not threadable, since geotiff internally uses features that\n// aren't available on workers. It uses its own specialized workers anyways.\nclass TiffLoader extends ThreadableVolumeLoader {\n  url: string;\n  dims?: OMEDims;\n\n  constructor(url: string) {\n    super();\n    this.url = url;\n  }\n\n  private async loadOmeDims(): Promise<OMEDims> {\n    if (!this.dims) {\n      const tiff = await fromUrl(this.url, { allowFullFile: true });\n      // DO NOT DO THIS, ITS SLOW\n      // const imagecount = await tiff.getImageCount();\n      // read the FIRST image\n      const image = await tiff.getImage();\n\n      const tiffimgdesc = prepareXML(image.getFileDirectory().ImageDescription);\n      const omeEl = getOME(tiffimgdesc);\n\n      const image0El = omeEl.getElementsByTagName(\"Image\")[0];\n      this.dims = getOMEDims(image0El);\n    }\n    return this.dims;\n  }\n\n  async loadDims(_loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const dims = await this.loadOmeDims();\n\n    const d = new VolumeDims();\n    d.shape = [dims.sizet, dims.sizec, dims.sizez, dims.sizey, dims.sizex];\n    d.spacing = [1, 1, dims.pixelsizez, dims.pixelsizey, dims.pixelsizex];\n    d.spaceUnit = dims.unit ? dims.unit : \"micron\";\n    d.dataType = dims.pixeltype ? dims.pixeltype : \"uint8\";\n    return [d];\n  }\n\n  async createImageInfo(_loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    const dims = await this.loadOmeDims();\n    // compare with sizex, sizey\n    //const width = image.getWidth();\n    //const height = image.getHeight();\n\n    // TODO allow user setting of this downsampling info?\n    // TODO allow ROI selection: range of x,y,z,c for a given t\n    const atlasDims = computePackedAtlasDims(dims.sizez, dims.sizex, dims.sizey);\n    // fit tiles to max of 2048x2048?\n    const targetSize = 2048;\n    const tilesizex = Math.floor(targetSize / atlasDims.x);\n    const tilesizey = Math.floor(targetSize / atlasDims.y);\n\n    // load tiff and check metadata\n\n    const imgdata: ImageInfo = {\n      name: \"TEST\",\n\n      originalSize: new Vector3(dims.sizex, dims.sizey, dims.sizez),\n      atlasTileDims: atlasDims,\n      volumeSize: new Vector3(tilesizex, tilesizey, dims.sizez),\n      subregionSize: new Vector3(tilesizex, tilesizey, dims.sizez),\n      subregionOffset: new Vector3(0, 0, 0),\n      physicalPixelSize: new Vector3(dims.pixelsizex, dims.pixelsizey, dims.pixelsizez),\n      spatialUnit: dims.unit || \"\",\n\n      numChannels: dims.sizec,\n      channelNames: dims.channelnames,\n\n      times: dims.sizet,\n      timeScale: 1,\n      timeUnit: \"\",\n\n      numMultiscaleLevels: 1,\n      multiscaleLevel: 0,\n\n      transform: {\n        translation: new Vector3(0, 0, 0),\n        rotation: new Vector3(0, 0, 0),\n      },\n    };\n\n    // This loader uses no fields from `LoadSpec`. Initialize volume with defaults.\n    return { imageInfo: imgdata, loadSpec: new LoadSpec() };\n  }\n\n  async loadRawChannelData(\n    imageInfo: ImageInfo,\n    _loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<Record<string, never>> {\n    const dims = await this.loadOmeDims();\n\n    // do each channel on a worker?\n    for (let channel = 0; channel < imageInfo.numChannels; ++channel) {\n      const params = {\n        channel: channel,\n        // these are target xy sizes for the in-memory volume data\n        // they may or may not be the same size as original xy sizes\n        tilesizex: imageInfo.volumeSize.x,\n        tilesizey: imageInfo.volumeSize.y,\n        sizec: imageInfo.numChannels,\n        sizez: imageInfo.volumeSize.z,\n        dimensionOrder: dims.dimensionorder,\n        bytesPerSample: getBytesPerSample(dims.pixeltype),\n        url: this.url,\n      };\n      const worker = new Worker(new URL(\"../workers/FetchTiffWorker\", import.meta.url));\n      worker.onmessage = (e) => {\n        const u8 = e.data.data;\n        const channel = e.data.channel;\n        const range = e.data.range;\n        onData([channel], [u8], [range]);\n        worker.terminate();\n      };\n      worker.onerror = (e) => {\n        alert(\"Error: Line \" + e.lineno + \" in \" + e.filename + \": \" + e.message);\n      };\n      worker.postMessage(params);\n    }\n\n    return {};\n  }\n}\n\nexport { TiffLoader };\n","import { Box3, Vector2, Vector3 } from \"three\";\n\nimport { ImageInfo } from \"../Volume.js\";\nimport { LoadSpec } from \"./IVolumeLoader.js\";\n\nexport const MAX_ATLAS_EDGE = 4096;\n\n// Map from units to their symbols\nconst UNIT_SYMBOLS = {\n  angstrom: \"Å\",\n  day: \"d\",\n  foot: \"ft\",\n  hour: \"h\",\n  inch: \"in\",\n  meter: \"m\",\n  mile: \"mi\",\n  minute: \"min\",\n  parsec: \"pc\",\n  second: \"s\",\n  yard: \"yd\",\n};\n\n// Units which may take SI prefixes (e.g. micro-, tera-)\nconst SI_UNITS: (keyof typeof UNIT_SYMBOLS)[] = [\"meter\", \"second\"];\n\n// SI prefixes which abbreviate in nonstandard ways\nconst SI_PREFIX_ABBVS = {\n  micro: \"μ\",\n  deca: \"da\",\n};\n\n/** Converts a full spatial or temporal unit name supported by OME-Zarr to its unit symbol */\n// (see https://ngff.openmicroscopy.org/latest/#axes-md)\nexport function unitNameToSymbol(unitName?: string): string | null {\n  if (unitName === undefined) {\n    return null;\n  }\n\n  if (UNIT_SYMBOLS[unitName]) {\n    return UNIT_SYMBOLS[unitName];\n  }\n\n  const prefixedSIUnit = SI_UNITS.find((siUnit) => unitName.endsWith(siUnit));\n  if (prefixedSIUnit) {\n    const prefix = unitName.substring(0, unitName.length - prefixedSIUnit.length);\n\n    if (SI_PREFIX_ABBVS[prefix]) {\n      // \"special\" SI prefix\n      return SI_PREFIX_ABBVS[prefix] + UNIT_SYMBOLS[prefixedSIUnit];\n    }\n\n    // almost all SI prefixes are abbreviated by first letter, capitalized if prefix ends with \"a\"\n    const capitalize = prefix.endsWith(\"a\");\n    const prefixAbbr = capitalize ? prefix[0].toUpperCase() : prefix[0];\n    return prefixAbbr + UNIT_SYMBOLS[prefixedSIUnit];\n  }\n\n  return null;\n}\n\n// We want to find the most \"square\" packing of z tw by th tiles.\n// Compute number of rows and columns.\nexport function computePackedAtlasDims(z: number, tw: number, th: number): Vector2 {\n  let nextrows = 1;\n  let nextcols = z;\n  let ratio = (nextcols * tw) / (nextrows * th);\n  let nrows = nextrows;\n  let ncols = nextcols;\n  while (ratio > 1) {\n    nrows = nextrows;\n    ncols = nextcols;\n    nextcols -= 1;\n    nextrows = Math.ceil(z / nextcols);\n    ratio = (nextcols * tw) / (nextrows * th);\n  }\n  return new Vector2(nrows, ncols);\n}\n\n/** Picks the largest scale level that can fit into a texture atlas with edges no longer than `maxAtlasEdge`. */\nexport function estimateLevelForAtlas(spatialDimsZYX: [number, number, number][], maxAtlasEdge = MAX_ATLAS_EDGE) {\n  if (spatialDimsZYX.length <= 1) {\n    return 0;\n  }\n\n  // update levelToLoad after we get size info about multiscales\n  let levelToLoad = spatialDimsZYX.length - 1;\n  for (let i = 0; i < spatialDimsZYX.length; ++i) {\n    // estimate atlas size:\n    const x = spatialDimsZYX[i][2];\n    const y = spatialDimsZYX[i][1];\n    const z = spatialDimsZYX[i][0];\n    const xtiles = Math.floor(maxAtlasEdge / x);\n    const ytiles = Math.floor(maxAtlasEdge / y);\n\n    if (xtiles * ytiles >= z) {\n      levelToLoad = i;\n      break;\n    }\n  }\n  return levelToLoad;\n}\n\ntype ZYX = [number, number, number];\nconst maxCeil = (val: number): number => Math.max(Math.ceil(val), 1);\nconst scaleDims = (size: Vector3, [z, y, x]: ZYX): ZYX => [\n  maxCeil(z * size.z),\n  maxCeil(y * size.y),\n  maxCeil(x * size.x),\n];\n\nexport function scaleDimsToSubregion(subregion: Box3, dims: ZYX): ZYX {\n  const size = subregion.getSize(new Vector3());\n  return scaleDims(size, dims);\n}\n\nexport function scaleMultipleDimsToSubregion(subregion: Box3, dims: ZYX[]): ZYX[] {\n  const size = subregion.getSize(new Vector3());\n  return dims.map((dim) => scaleDims(size, dim));\n}\n\n/**\n * Picks the best scale level to load based on scale level dimensions and a `LoadSpec`. This calls\n * `estimateLevelForAtlas`, then accounts for `LoadSpec`'s scale level picking properties:\n * - `multiscaleLevel` imposes a minimum scale level (or *maximum* resolution level) to load\n * - `maxAtlasEdge` sets the maximum size of the texture atlas that may be produced by a load\n * - `scaleLevelBias` offsets the scale level index after the optimal level is picked based on `maxAtlasEdge`\n *\n *  This function assumes that `spatialDimsZYX` has already been appropriately scaled to match `loadSpec`'s `subregion`.\n */\nexport function pickLevelToLoadUnscaled(loadSpec: LoadSpec, spatialDimsZYX: ZYX[]): number {\n  const optimalLevel = estimateLevelForAtlas(spatialDimsZYX, loadSpec.maxAtlasEdge);\n  const levelToLoad = Math.max(optimalLevel + (loadSpec.scaleLevelBias ?? 0), loadSpec.multiscaleLevel ?? 0);\n  return Math.max(0, Math.min(spatialDimsZYX.length - 1, levelToLoad));\n}\n\n/**\n * Picks the best scale level to load based on scale level dimensions and a `LoadSpec`. This calls\n * `estimateLevelForAtlas` and accounts for all properties of `LoadSpec` considered by\n * `pickLevelToLoadUnscaled`, and additionally scales the dimensions of the scale levels to account for the\n * `LoadSpec`'s `subregion` property.\n */\nexport function pickLevelToLoad(loadSpec: LoadSpec, spatialDimsZYX: ZYX[]): number {\n  const scaledDims = scaleMultipleDimsToSubregion(loadSpec.subregion, spatialDimsZYX);\n  return pickLevelToLoadUnscaled(loadSpec, scaledDims);\n}\n\n/** Given the size of a volume in pixels, convert a `Box3` in the 0-1 range to pixels */\nexport function convertSubregionToPixels(region: Box3, size: Vector3): Box3 {\n  const min = region.min.clone().multiply(size).floor();\n  const max = region.max.clone().multiply(size).ceil();\n\n  // ensure it's always valid to specify the same number at both ends and get a single slice\n  if (min.x === max.x && min.x < size.x) {\n    max.x += 1;\n  }\n  if (min.y === max.y && min.y < size.y) {\n    max.y += 1;\n  }\n  if (min.z === max.z && min.z < size.z) {\n    max.z += 1;\n  }\n\n  return new Box3(min, max);\n}\n\n/**\n * Return the subset of `container` specified by `region`, assuming that `region` contains fractional values (between 0\n * and 1). i.e. if `container`'s range on the X axis is 0-4 and `region`'s is 0.25-0.5, the result will have range 1-2.\n */\nexport function composeSubregion(region: Box3, container: Box3): Box3 {\n  const size = container.getSize(new Vector3());\n  const min = region.min.clone().multiply(size).add(container.min);\n  const max = region.max.clone().multiply(size).add(container.min);\n  return new Box3(min, max);\n}\n\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// currently everything needed can come from the imageInfo\n// but in the future each IVolumeLoader could have a completely separate implementation.\nexport function buildDefaultMetadata(imageInfo: ImageInfo): Record<string, unknown> {\n  const physicalSize = imageInfo.volumeSize.clone().multiply(imageInfo.physicalPixelSize);\n  const metadata = {};\n  metadata[\"Dimensions\"] = { ...imageInfo.subregionSize };\n  metadata[\"Original dimensions\"] = { ...imageInfo.originalSize };\n  metadata[\"Physical size\"] = {\n    x: physicalSize.x + imageInfo.spatialUnit,\n    y: physicalSize.y + imageInfo.spatialUnit,\n    z: physicalSize.z + imageInfo.spatialUnit,\n  };\n  metadata[\"Physical size per pixel\"] = {\n    x: imageInfo.physicalPixelSize.x + imageInfo.spatialUnit,\n    y: imageInfo.physicalPixelSize.y + imageInfo.spatialUnit,\n    z: imageInfo.physicalPixelSize.z + imageInfo.spatialUnit,\n  };\n  metadata[\"Channels\"] = imageInfo.numChannels;\n  metadata[\"Time series frames\"] = imageInfo.times || 1;\n  // don't add User data if it's empty\n  if (imageInfo.userData && !isEmpty(imageInfo.userData)) {\n    metadata[\"User data\"] = imageInfo.userData;\n  }\n  return metadata;\n}\n","import { ThreadableVolumeLoader } from \"./IVolumeLoader.js\";\nimport { OMEZarrLoader, type ZarrLoaderFetchOptions } from \"./OmeZarrLoader.js\";\nimport { JsonImageInfoLoader } from \"./JsonImageInfoLoader.js\";\nimport { RawArrayLoader, RawArrayLoaderOptions } from \"./RawArrayLoader.js\";\nimport { TiffLoader } from \"./TiffLoader.js\";\nimport VolumeCache from \"../VolumeCache.js\";\nimport SubscribableRequestQueue from \"../utils/SubscribableRequestQueue.js\";\n\nexport { PrefetchDirection } from \"./zarr_utils/types.js\";\n\nexport const enum VolumeFileFormat {\n  ZARR = \"zarr\",\n  JSON = \"json\",\n  TIFF = \"tiff\",\n  DATA = \"data\",\n}\n\n// superset of all necessary loader options\nexport type CreateLoaderOptions = {\n  fileType?: VolumeFileFormat;\n  cache?: VolumeCache;\n  queue?: SubscribableRequestQueue;\n  scene?: number;\n  fetchOptions?: ZarrLoaderFetchOptions;\n  rawArrayOptions?: RawArrayLoaderOptions;\n};\n\nexport function pathToFileType(path: string): VolumeFileFormat {\n  if (path.endsWith(\".json\")) {\n    return VolumeFileFormat.JSON;\n  } else if (path.endsWith(\".tif\") || path.endsWith(\".tiff\")) {\n    return VolumeFileFormat.TIFF;\n  }\n  return VolumeFileFormat.ZARR;\n}\n\nexport async function createVolumeLoader(\n  path: string | string[],\n  options?: CreateLoaderOptions\n): Promise<ThreadableVolumeLoader> {\n  const pathString = Array.isArray(path) ? path[0] : path;\n  const fileType = options?.fileType || pathToFileType(pathString);\n\n  switch (fileType) {\n    case VolumeFileFormat.ZARR:\n      return await OMEZarrLoader.createLoader(\n        path,\n        options?.scene,\n        options?.cache,\n        options?.queue,\n        options?.fetchOptions\n      );\n    case VolumeFileFormat.JSON:\n      return new JsonImageInfoLoader(path, options?.cache);\n    case VolumeFileFormat.TIFF:\n      return new TiffLoader(pathString);\n    case VolumeFileFormat.DATA:\n      if (!options?.rawArrayOptions) {\n        throw new Error(\"Must provide RawArrayOptions for RawArrayLoader\");\n      }\n      return new RawArrayLoader(options?.rawArrayOptions.data, options?.rawArrayOptions.metadata);\n  }\n}\n","import { PrefetchDirection, TCZYX } from \"./types\";\n\ntype TZYX = [number, number, number, number];\n\ntype PrefetchDirectionState = {\n  direction: PrefetchDirection;\n  chunks: TCZYX<number>[];\n  start: number;\n  /** May be either a number for all channels or an array of ends per-channels */\n  end: number | number[];\n};\n\nconst allEqual = <T>(arr: T[]): boolean => arr.every((v) => v === arr[0]);\n\nconst pushN = <T>(arr: T[], val: T, n: number): void => {\n  for (let i = 0; i < n; i++) {\n    arr.push(val);\n  }\n};\n\nconst directionToIndex = (dir: PrefetchDirection): number => {\n  const absDir = dir >> 1; // shave off sign bit to get index in TZYX\n  return absDir + Number(absDir !== 0); // convert TZYX -> TCZYX by skipping c (index 1)\n};\n\nfunction updateMinMax(val: number, minmax: [number, number]): void {\n  if (val < minmax[0]) {\n    minmax[0] = val;\n  }\n\n  if (val > minmax[1]) {\n    minmax[1] = val;\n  }\n}\n\n/**\n * Since the user is most likely to want nearby data (in space or time) first, we should prefetch those chunks first.\n *\n * Given a list of just-loaded chunks and some bounds, `ChunkPrefetchIterator` iterates evenly outwards in T/Z/Y/X.\n */\n// NOTE: Assumes `chunks` form a rectangular prism! Will create gaps otherwise! (in practice they always should)\nexport default class ChunkPrefetchIterator {\n  directionStates: PrefetchDirectionState[];\n  priorityDirectionStates: PrefetchDirectionState[];\n\n  constructor(\n    chunks: TCZYX<number>[],\n    tzyxMaxPrefetchOffset: TZYX,\n    tczyxChunksPerSource: TCZYX<number>[],\n    priorityDirections?: PrefetchDirection[]\n  ) {\n    // Get min and max chunk coordinates for T/Z/Y/X\n    const extrema: [number, number][] = [\n      [Infinity, -Infinity],\n      [Infinity, -Infinity],\n      [Infinity, -Infinity],\n      [Infinity, -Infinity],\n    ];\n\n    for (const chunk of chunks) {\n      updateMinMax(chunk[0], extrema[0]);\n      updateMinMax(chunk[2], extrema[1]);\n      updateMinMax(chunk[3], extrema[2]);\n      updateMinMax(chunk[4], extrema[3]);\n    }\n\n    // Create `PrefetchDirectionState`s for each direction\n    this.directionStates = [];\n    this.priorityDirectionStates = [];\n\n    for (const [direction, start] of extrema.flat().entries()) {\n      const dimension = direction >> 1; // shave off sign bit to get index in TZYX\n      const tczyxIndex = dimension + Number(dimension !== 0); // convert TZYX -> TCZYX by skipping c (index 1)\n      let end: number | number[];\n      if (direction & 1) {\n        // Positive direction - end is either the max coordinate in the fetched set plus the max offset in this\n        // dimension, or the max chunk coordinate in this dimension, whichever comes first\n        const endsPerSource = tczyxChunksPerSource.map((chunkDims) => {\n          return Math.min(start + tzyxMaxPrefetchOffset[dimension], chunkDims[tczyxIndex] - 1);\n        });\n\n        // Save some time: if all sources have the same end, we can just store that\n        if (allEqual(endsPerSource)) {\n          end = endsPerSource[0];\n        } else {\n          // Otherwise, expand our ends per source array to ends per channel\n          end = [];\n          for (const [i, sourceEnd] of endsPerSource.entries()) {\n            pushN(end, sourceEnd, tczyxChunksPerSource[i][1]);\n          }\n        }\n        // end = Math.min(start + tzyxMaxPrefetchOffset[dimension], tczyxChunksPerDimension[dimension] - 1);\n      } else {\n        // Negative direction - end is either the min coordinate in the fetched set minus the max offset in this\n        // dimension, or 0, whichever comes first\n        end = Math.max(start - tzyxMaxPrefetchOffset[dimension], 0);\n      }\n      const directionState = { direction, start, end, chunks: [] };\n\n      if (priorityDirections && priorityDirections.includes(direction)) {\n        this.priorityDirectionStates.push(directionState);\n      } else {\n        this.directionStates.push(directionState);\n      }\n    }\n\n    // Fill each `PrefetchDirectionState` with chunks at the border of the fetched set\n    for (const chunk of chunks) {\n      for (const dir of this.directionStates) {\n        if (chunk[directionToIndex(dir.direction)] === dir.start) {\n          dir.chunks.push(chunk);\n        }\n      }\n      for (const dir of this.priorityDirectionStates) {\n        if (chunk[directionToIndex(dir.direction)] === dir.start) {\n          dir.chunks.push(chunk);\n        }\n      }\n    }\n  }\n\n  private static *iterateDirections(directions: PrefetchDirectionState[]): Generator<TCZYX<number>> {\n    let offset = 1;\n\n    while (directions.length > 0) {\n      // Remove directions in which we have reached the end (or, if per-channel ends, the end for all channels)\n      directions = directions.filter((dir) => {\n        const end = Array.isArray(dir.end) ? Math.max(...dir.end) : dir.end;\n        if (dir.direction & 1) {\n          return dir.start + offset <= end;\n        } else {\n          return dir.start - offset >= end;\n        }\n      });\n\n      // Yield chunks one chunk farther out in every remaining direction\n      for (const dir of directions) {\n        const offsetDir = offset * (dir.direction & 1 ? 1 : -1);\n        for (const chunk of dir.chunks) {\n          // Skip this chunk if this channel has a specific per-channel end and we've reached it\n          if (Array.isArray(dir.end) && chunk[directionToIndex(dir.direction)] + offsetDir > dir.end[chunk[1]]) {\n            continue;\n          }\n          const newChunk = chunk.slice() as TCZYX<number>;\n          newChunk[directionToIndex(dir.direction)] += offsetDir;\n          yield newChunk;\n        }\n      }\n\n      offset += 1;\n    }\n  }\n\n  *[Symbol.iterator](): Iterator<TCZYX<number>> {\n    // Yield all chunks in priority direction(s) first, if any\n    if (this.priorityDirectionStates.length > 0) {\n      for (const chunk of ChunkPrefetchIterator.iterateDirections(this.priorityDirectionStates)) {\n        yield chunk;\n      }\n    }\n\n    // Then yield all chunks in other directions\n    for (const chunk of ChunkPrefetchIterator.iterateDirections(this.directionStates)) {\n      yield chunk;\n    }\n  }\n}\n","import { FetchStore } from \"zarrita\";\nimport { AbsolutePath, AsyncMutable, Readable } from \"@zarrita/storage\";\n\nimport SubscribableRequestQueue from \"../../utils/SubscribableRequestQueue\";\nimport VolumeCache from \"../../VolumeCache\";\n\nimport { SubscriberId } from \"./types\";\n\ntype WrappedStoreOpts<Opts> = {\n  options?: Opts;\n  subscriber: SubscriberId;\n  reportKey?: (key: string, subscriber: SubscriberId) => void;\n  isPrefetch?: boolean;\n};\n\n/**\n * `Readable` is zarrita's minimal abstraction for any source of data.\n * `WrappedStore` wraps another `Readable` and adds (optional) connections to `VolumeCache` and `RequestQueue`.\n */\nclass WrappedStore<Opts, S extends Readable<Opts> = Readable<Opts>> implements AsyncMutable<WrappedStoreOpts<Opts>> {\n  constructor(private baseStore: S, private cache?: VolumeCache, private queue?: SubscribableRequestQueue) {}\n  // Dummy implementation to make this class easier to use in tests\n  set(_key: AbsolutePath, _value: Uint8Array): Promise<void> {\n    return Promise.resolve();\n  }\n\n  private async getAndCache(key: AbsolutePath, cacheKey: string, opts?: Opts): Promise<Uint8Array | undefined> {\n    const result = await this.baseStore.get(key, opts);\n    if (this.cache && result) {\n      this.cache.insert(cacheKey, result);\n    }\n    return result;\n  }\n\n  async get(key: AbsolutePath, opts?: WrappedStoreOpts<Opts> | undefined): Promise<Uint8Array | undefined> {\n    const ZARR_EXTS = [\".zarray\", \".zgroup\", \".zattrs\", \"zarr.json\"];\n    if (!this.cache || ZARR_EXTS.some((s) => key.endsWith(s))) {\n      return this.baseStore.get(key, opts?.options);\n    }\n    if (opts?.reportKey) {\n      opts.reportKey(key, opts.subscriber);\n    }\n\n    let keyPrefix = (this.baseStore as FetchStore).url ?? \"\";\n    if (keyPrefix !== \"\" && !(keyPrefix instanceof URL) && !keyPrefix.endsWith(\"/\")) {\n      keyPrefix += \"/\";\n    }\n\n    const fullKey = keyPrefix + key.slice(1);\n\n    // Check the cache\n    const cacheResult = this.cache.get(fullKey);\n    if (cacheResult) {\n      return new Uint8Array(cacheResult);\n    }\n\n    // Not in cache; load the chunk and cache it\n    if (this.queue && opts) {\n      return this.queue.addRequest(\n        fullKey,\n        opts.subscriber,\n        () => this.getAndCache(key, fullKey, opts?.options),\n        opts.isPrefetch\n      );\n    } else {\n      // Should we ever hit this code?  We should always have a request queue.\n      return this.getAndCache(key, fullKey, opts?.options);\n    }\n  }\n}\n\nexport default WrappedStore;\n","import * as zarr from \"@zarrita/core\";\n\nimport type WrappedStore from \"./WrappedStore.js\";\nimport type SubscribableRequestQueue from \"../../utils/SubscribableRequestQueue.js\";\n\nexport type TCZYX<T> = [T, T, T, T, T];\nexport type SubscriberId = ReturnType<SubscribableRequestQueue[\"addSubscriber\"]>;\n\n/**\n * Directions in which to move outward from the loaded set of chunks while prefetching.\n *\n * Ordered in pairs of opposite directions both because that's a sensible order in which to prefetch for our purposes,\n * and because it lets us treat the least significant bit as the sign. So `direction >> 1` gives the index of the\n * direction in TZYX-ordered arrays, and `direction & 1` gives the sign of the direction (e.g. positive vs negative Z).\n */\nexport const enum PrefetchDirection {\n  T_MINUS = 0,\n  T_PLUS = 1,\n\n  Z_MINUS = 2,\n  Z_PLUS = 3,\n\n  Y_MINUS = 4,\n  Y_PLUS = 5,\n\n  X_MINUS = 6,\n  X_PLUS = 7,\n}\n\nexport type OMECoordinateTransformation =\n  | {\n      type: \"identity\";\n    }\n  | {\n      type: \"translation\";\n      translation: number[];\n    }\n  | {\n      type: \"scale\";\n      scale: number[];\n    }\n  | {\n      type: \"translation\" | \"scale\";\n      path: string;\n    };\n\nexport type OMEAxis = {\n  name: string;\n  type?: string;\n  unit?: string;\n};\n\nexport type OMEDataset = {\n  path: string;\n  coordinateTransformations?: OMECoordinateTransformation[];\n};\n\n// https://ngff.openmicroscopy.org/latest/#multiscale-md\nexport type OMEMultiscale = {\n  version?: string;\n  name?: string;\n  axes: OMEAxis[];\n  datasets: OMEDataset[];\n  coordinateTransformations?: OMECoordinateTransformation[];\n  type?: string;\n  metadata?: Record<string, unknown>;\n};\n\n// https://ngff.openmicroscopy.org/latest/#omero-md\nexport type OmeroTransitionalMetadata = {\n  id: number;\n  name: string;\n  version: string;\n  channels: {\n    active: boolean;\n    coefficient: number;\n    color: string;\n    family: string;\n    inverted: boolean;\n    label: string;\n    window: {\n      end: number;\n      max: number;\n      min: number;\n      start: number;\n    };\n  }[];\n};\n\nexport type OMEZarrMetadata = {\n  multiscales: OMEMultiscale[];\n  omero: OmeroTransitionalMetadata;\n};\n\nexport type NumericZarrArray = zarr.Array<zarr.NumberDataType, WrappedStore<RequestInit>>;\n\n/** A record with everything we need to access and use a single remote source of multiscale OME-Zarr data. */\nexport type ZarrSource = {\n  /** Representations of each scale level in this zarr. We pick one and pass it to zarrita to load data. */\n  scaleLevels: NumericZarrArray[];\n  /**\n   * Zarr dimensions may be ordered in many ways or missing altogether (e.g. TCXYZ, TYX). `axesTCZYX` represents\n   * dimension order as a mapping from dimensions to their indices in dimension-ordered arrays for this source.\n   */\n  axesTCZYX: TCZYX<number>;\n  /** OME-specified metadata record with most useful info on the current image, e.g. sizes, axis order, etc. */\n  multiscaleMetadata: OMEMultiscale;\n  /** OME-specified \"transitional\" metadata record which we mostly ignore, but which gives channel & volume names. */\n  omeroMetadata: OmeroTransitionalMetadata;\n  /** Which channels in the volume come out of this source - i.e. source channel 0 is volume channel `channelOffset` */\n  channelOffset: number;\n};\n","import {\n  NumericZarrArray,\n  OMEAxis,\n  OMECoordinateTransformation,\n  OMEDataset,\n  OMEMultiscale,\n  TCZYX,\n  ZarrSource,\n} from \"./types.js\";\n\n/** Turns `axesTCZYX` into the number of dimensions in the array */\nexport const getDimensionCount = ([t, c, z]: TCZYX<number>) => 2 + Number(t > -1) + Number(c > -1) + Number(z > -1);\n\nexport function remapAxesToTCZYX(axes: OMEAxis[]): TCZYX<number> {\n  const axesTCZYX: TCZYX<number> = [-1, -1, -1, -1, -1];\n  const axisNames = [\"t\", \"c\", \"z\", \"y\", \"x\"];\n\n  axes.forEach((axis, idx) => {\n    const axisIdx = axisNames.indexOf(axis.name);\n    if (axisIdx > -1) {\n      axesTCZYX[axisIdx] = idx;\n    } else {\n      console.error(\"ERROR: UNRECOGNIZED AXIS in zarr: \" + axis.name);\n    }\n  });\n\n  // it is possible that Z might not exist but we require X and Y at least.\n  if (axesTCZYX[3] === -1 || axesTCZYX[4] === -1) {\n    console.error(\"ERROR: zarr loader expects a y and an x axis.\");\n  }\n\n  return axesTCZYX;\n}\n\n/** Reorder an array of values [T, C, Z, Y, X] to the given dimension order */\nexport function orderByDimension<T>(valsTCZYX: TCZYX<T>, orderTCZYX: TCZYX<number>): T[] {\n  const specLen = getDimensionCount(orderTCZYX);\n  const result: T[] = Array(specLen);\n\n  orderTCZYX.forEach((val, idx) => {\n    if (val >= 0) {\n      if (val >= specLen) {\n        throw new Error(\"Unexpected axis index\");\n      }\n      result[val] = valsTCZYX[idx];\n    }\n  });\n\n  return result;\n}\n\n/** Reorder an array of values in the given dimension order to [T, C, Z, Y, X] */\nexport function orderByTCZYX<T>(valsDimension: T[], orderTCZYX: TCZYX<number>, defaultValue: T): TCZYX<T> {\n  const result: TCZYX<T> = [defaultValue, defaultValue, defaultValue, defaultValue, defaultValue];\n\n  orderTCZYX.forEach((val, idx) => {\n    if (val >= 0) {\n      if (val >= valsDimension.length) {\n        throw new Error(\"Unexpected axis index\");\n      }\n      result[idx] = valsDimension[val];\n    }\n  });\n\n  return result;\n}\n\n/** Select the scale transform from an OME metadata object with coordinate transforms, and return it in TCZYX order */\nexport function getScale(dataset: OMEDataset | OMEMultiscale, orderTCZYX: TCZYX<number>): TCZYX<number> {\n  const transforms = dataset.coordinateTransformations;\n\n  if (transforms === undefined) {\n    console.error(\"ERROR: no coordinate transformations for scale level\");\n    return [1, 1, 1, 1, 1];\n  }\n\n  // this assumes we'll never encounter the \"path\" variant\n  const isScaleTransform = (t: OMECoordinateTransformation): t is { type: \"scale\"; scale: number[] } =>\n    t.type === \"scale\";\n\n  // there can be any number of coordinateTransformations\n  // but there must be only one of type \"scale\".\n  const scaleTransform = transforms.find(isScaleTransform);\n  if (!scaleTransform) {\n    console.error(`ERROR: no coordinate transformation of type \"scale\" for scale level`);\n    return [1, 1, 1, 1, 1];\n  }\n\n  const scale = scaleTransform.scale.slice();\n  return orderByTCZYX(scale, orderTCZYX, 1);\n}\n\n/**\n * Defines a partial order of zarr arrays based on their size. Specifically:\n * - If array size x, y, z are all equal, the arrays are equal\n * - otherwise, if all xyz of `a` are less than or equal to those of `b`, `a` is less than `b` (and vice versa)\n * - if some xyz is less and some is greater, the arrays are uncomparable\n */\nfunction compareZarrArraySize(\n  aArr: NumericZarrArray,\n  aTCZYX: TCZYX<number>,\n  bArr: NumericZarrArray,\n  bTCZYX: TCZYX<number>\n): number | undefined {\n  const aZ = aTCZYX[2] > -1 ? aArr.shape[aTCZYX[2]] : 1;\n  const bZ = bTCZYX[2] > -1 ? bArr.shape[bTCZYX[2]] : 1;\n  const diffZ = aZ - bZ;\n  const diffY = aArr.shape[aTCZYX[3]] - bArr.shape[bTCZYX[3]];\n  const diffX = aArr.shape[aTCZYX[4]] - bArr.shape[bTCZYX[4]];\n\n  if (diffZ === 0 && diffY === 0 && diffX === 0) {\n    return 0;\n  } else if (diffZ <= 0 && diffY <= 0 && diffX <= 0) {\n    return -1;\n  } else if (diffZ >= 0 && diffY >= 0 && diffX >= 0) {\n    return 1;\n  } else {\n    return undefined;\n  }\n}\n\nconst EPSILON = 0.0000001;\nconst aboutEquals = (a: number, b: number): boolean => Math.abs(a - b) < EPSILON;\n\nfunction scaleTransformsAreEqual(aSrc: ZarrSource, aLevel: number, bSrc: ZarrSource, bLevel: number): boolean {\n  const aScale = getScale(aSrc.multiscaleMetadata.datasets[aLevel], aSrc.axesTCZYX);\n  const bScale = getScale(bSrc.multiscaleMetadata.datasets[bLevel], bSrc.axesTCZYX);\n  return aboutEquals(aScale[2], bScale[2]) && aboutEquals(aScale[3], bScale[3]) && aboutEquals(aScale[4], bScale[4]);\n}\n\n/**\n * Ensures that all scale levels in `sources` are matched up by size. More precisely: enforces that, for any scale\n * level `i`, the size of zarr array `s[i]` is equal for every source `s`. We accomplish this by removing any arrays\n * (and their associated OME dataset metadata) which don't match up in all sources.\n *\n * Note that this function modifies the input `sources` array rather than returning a new value.\n *\n * Assumes all sources have scale levels ordered by size from largest to smallest. (This should always be true for\n * compliant OME-Zarr data.)\n */\nexport function matchSourceScaleLevels(sources: ZarrSource[]): void {\n  if (sources.length < 2) {\n    return;\n  }\n\n  // Save matching scale levels and metadata here\n  const matchedLevels: NumericZarrArray[][] = Array.from({ length: sources.length }, () => []);\n  const matchedMetas: OMEDataset[][] = Array.from({ length: sources.length }, () => []);\n\n  // Start as many index counters as we have sources\n  const scaleIndexes: number[] = new Array(sources.length).fill(0);\n  while (scaleIndexes.every((val, idx) => val < sources[idx].scaleLevels.length)) {\n    // First pass: find the smallest source / determine if all sources are equal\n    let allEqual = true;\n    let smallestIdx = 0;\n    let smallestSrc = sources[0];\n    let smallestArr = smallestSrc.scaleLevels[scaleIndexes[0]];\n    for (let currentIdx = 1; currentIdx < sources.length; currentIdx++) {\n      const currentSrc = sources[currentIdx];\n      const currentArr = currentSrc.scaleLevels[scaleIndexes[currentIdx]];\n\n      const ordering = compareZarrArraySize(smallestArr, smallestSrc.axesTCZYX, currentArr, currentSrc.axesTCZYX);\n      if (!ordering) {\n        // Arrays are equal, or they are uncomparable\n        if (ordering === undefined) {\n          throw new Error(\"Incompatible zarr arrays: pixel dimensions are mismatched\");\n        }\n        // Now we know the arrays are equal, but they may still be invalid to match up because...\n        // ...they have different scale transformations\n        if (!scaleTransformsAreEqual(smallestSrc, scaleIndexes[smallestIdx], currentSrc, scaleIndexes[currentIdx])) {\n          throw new Error(\"Incompatible zarr arrays: scale levels of equal size have different scale transformations\");\n        }\n        // ...they have different numbers of timesteps\n        const largestT = smallestSrc.axesTCZYX[0] > -1 ? smallestArr.shape[smallestSrc.axesTCZYX[0]] : 1;\n        const currentT = currentSrc.axesTCZYX[0] > -1 ? currentArr.shape[currentSrc.axesTCZYX[0]] : 1;\n        if (largestT !== currentT) {\n          throw new Error(\"Incompatible zarr arrays: different numbers of timesteps\");\n        }\n      } else {\n        allEqual = false;\n        if (ordering > 0) {\n          smallestIdx = currentIdx;\n          smallestSrc = currentSrc;\n          smallestArr = currentArr;\n        }\n      }\n    }\n\n    if (allEqual) {\n      // We've found a matching set of scale levels! Save it and increment all indexes\n      for (let i = 0; i < scaleIndexes.length; i++) {\n        const currentSrc = sources[i];\n        const matchedScaleLevel = scaleIndexes[i];\n        matchedLevels[i].push(currentSrc.scaleLevels[matchedScaleLevel]);\n        matchedMetas[i].push(currentSrc.multiscaleMetadata.datasets[matchedScaleLevel]);\n        scaleIndexes[i] += 1;\n      }\n    } else {\n      // Increment the indexes of the sources which are larger than the smallest\n      for (const [idx, srcIdx] of scaleIndexes.entries()) {\n        const currentSrc = sources[idx];\n        const currentArr = currentSrc.scaleLevels[srcIdx];\n        const ordering = compareZarrArraySize(smallestArr, smallestSrc.axesTCZYX, currentArr, currentSrc.axesTCZYX);\n        if (ordering !== 0) {\n          scaleIndexes[idx] += 1;\n        }\n      }\n    }\n  }\n\n  if (sources[0].scaleLevels.length === 0) {\n    throw new Error(\"Incompatible zarr arrays: no sets of scale levels found that matched in all sources\");\n  }\n\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].scaleLevels = matchedLevels[i];\n    sources[i].multiscaleMetadata.datasets = matchedMetas[i];\n  }\n}\n","import { Camera, OrthographicCamera, Vector3 } from \"three\";\n\nexport interface Bounds {\n  bmin: Vector3;\n  bmax: Vector3;\n}\n\nexport interface FuseChannel {\n  chIndex: number;\n  lut: Uint8Array;\n  // zero is a sentinel value to disable from fusion\n  rgbColor: [number, number, number] | number;\n}\n\n/** If `FuseChannel.rgbColor` is this value, it is disabled from fusion. */\nexport const FUSE_DISABLED_RGB_COLOR = 0;\n\n/**\n * Provide options to control the visual appearance of a Volume\n * @typedef {Object} VolumeChannelDisplayOptions\n * @property {boolean} enabled array of boolean per channel\n * @property {Array.<number>} color array of rgb per channel\n * @property {Array.<number>} specularColor array of rgb per channel\n * @property {Array.<number>} emissiveColor array of rgb per channel\n * @property {number} glossiness array of float per channel\n * @property {boolean} isosurfaceEnabled array of boolean per channel\n * @property {number} isovalue array of number per channel\n * @property {number} isosurfaceOpacity array of number per channel\n * @example let options = {\n   };\n */\nexport interface VolumeChannelDisplayOptions {\n  enabled?: boolean;\n  color?: [number, number, number];\n  specularColor?: [number, number, number];\n  emissiveColor?: [number, number, number];\n  glossiness?: number;\n  isosurfaceEnabled?: boolean;\n  isovalue?: number;\n  isosurfaceOpacity?: number;\n}\n\nexport enum RenderMode {\n  RAYMARCH = 0,\n  PATHTRACE = 1,\n  SLICE = 2,\n}\n\n/**\n * Provide options to control the visual appearance of a Volume\n * @typedef {Object} VolumeDisplayOptions\n * @property {Array.<VolumeChannelDisplayOptions>} channels array of channel display options\n * @property {number} density\n * @property {Array.<number>} translation xyz\n * @property {Array.<number>} rotation xyz angles in radians\n * @property {number} maskChannelIndex\n * @property {number} maskAlpha\n * @property {Array.<number>} clipBounds [xmin, xmax, ymin, ymax, zmin, zmax] all range from 0 to 1 as a percentage of the volume on that axis\n * @property {Array.<number>} scale xyz voxel size scaling\n * @property {boolean} maxProjection true or false (ray marching)\n * @property {number} renderMode 0 for raymarch, 1 for pathtrace\n * @property {number} shadingMethod 0 for phase, 1 for brdf, 2 for hybrid (path tracer)\n * @property {Array.<number>} gamma [min, max, scale]\n * @property {number} primaryRayStepSize in voxels\n * @property {number} secondaryRayStepSize in voxels\n * @property {boolean} showBoundingBox true or false\n * @property {Array.<number>} boundingBoxColor r,g,b for bounding box lines\n * @example let options = {\n   };\n */\nexport interface VolumeDisplayOptions {\n  channels?: VolumeChannelDisplayOptions[];\n  density?: number;\n  translation?: [number, number, number];\n  rotation?: [number, number, number];\n  maskChannelIndex?: number;\n  maskAlpha?: number;\n  clipBounds?: [number, number, number, number, number, number];\n  maxProjection?: boolean;\n  renderMode?: RenderMode;\n  shadingMethod?: number;\n  gamma?: [number, number, number];\n  primaryRayStepSize?: number;\n  secondaryRayStepSize?: number;\n  showBoundingBox?: boolean;\n  boundingBoxColor?: [number, number, number];\n}\n\nexport const isOrthographicCamera = (def: Camera): def is OrthographicCamera =>\n  def && (def as OrthographicCamera).isOrthographicCamera;\n\nexport const enum ViewportCorner {\n  TOP_LEFT = \"top_left\",\n  TOP_RIGHT = \"top_right\",\n  BOTTOM_LEFT = \"bottom_left\",\n  BOTTOM_RIGHT = \"bottom_right\",\n}\nexport const isTop = (corner: ViewportCorner): boolean =>\n  corner === ViewportCorner.TOP_LEFT || corner === ViewportCorner.TOP_RIGHT;\nexport const isRight = (corner: ViewportCorner): boolean =>\n  corner === ViewportCorner.TOP_RIGHT || corner === ViewportCorner.BOTTOM_RIGHT;\n\nexport const DATARANGE_UINT8: [number, number] = [0, 255];\n","/** Object format used when passing multiple requests to RequestQueue at once. */\nexport type Request<V> = {\n  key: string;\n  requestAction: () => Promise<V>;\n};\n\nexport const DEFAULT_REQUEST_CANCEL_REASON = \"request cancelled\";\n\n/**\n * Internal object interface used by RequestQueue to store request metadata and callbacks.\n */\ninterface RequestItem<V> {\n  /** Key used to index this queue item. */\n  key: string;\n  /** Action to be run. */\n  action: () => Promise<V>;\n  /** Reference to the promise object that will be resolved when the action is complete. */\n  promise: Promise<V>;\n  /** Callback used to resolve the promise. */\n  resolve: (value?: V | PromiseLike<V> | undefined) => void;\n  /** Callback used to reject the promise. */\n  reject: (reason?: unknown) => void;\n  /** Optional, used to track timeouts if the item will be added to the queue later. */\n  timeoutId?: ReturnType<typeof setTimeout>;\n}\n\n/**\n * Manages a queue of asynchronous requests with unique string keys, which can be added to or cancelled.\n * If redundant requests with the same key are issued, the request action will only be run once per key\n * while the original request is still in the queue.\n */\nexport default class RequestQueue {\n  /**\n   * The maximum number of requests that can be handled concurrently.\n   * Once reached, additional requests will be queued up to run once a running request completes.\n   */\n  private maxActiveRequests: number;\n\n  /**\n   * The maximum number of requests that can be handled concurrently if only low-priority requests are waiting. Set\n   * lower than `concurrencyLimit` to always leave space for high-priority requests. Cannot be set higher than\n   * `concurrencyLimit`.\n   */\n  private maxLowPriorityRequests: number;\n\n  /** A queue of requests that are ready to be executed, in order of request time. */\n  private queue: string[];\n\n  /** A queue of low-priority tasks that are ready to be executed. `queue` must be empty before any of these tasks run. */\n  private queueLowPriority: string[];\n\n  /** Stores all requests, even those that are currently active. */\n  private allRequests: Map<string, RequestItem<unknown>>;\n\n  /** Stores requests whose actions are currently being run. */\n  private activeRequests: Set<string>;\n\n  /**\n   * Creates a new RequestQueue.\n   * @param maxActiveRequests The maximum number of requests that will be handled concurrently. This is 10 by default.\n   * @param maxLowPriorityRequests The maximum number of low-priority requests that will be handled concurrently. Equal\n   *    to `maxActiveRequests` by default, but may be set lower to always leave space for new high-priority requests.\n   */\n  constructor(maxActiveRequests = 10, maxLowPriorityRequests = 5) {\n    this.allRequests = new Map();\n    this.activeRequests = new Set();\n    this.queue = [];\n    this.queueLowPriority = [];\n    this.maxActiveRequests = maxActiveRequests;\n    this.maxLowPriorityRequests = Math.min(maxActiveRequests, maxLowPriorityRequests);\n  }\n\n  /**\n   * Stores request metadata to the internal map of all pending requests.\n   * @param key string identifier of the request.\n   * @param requestAction callable function action of the request.\n   * @returns a reference to the new, registered RequestItem.\n   */\n  private registerRequest<T>(key: string, requestAction: () => Promise<T>): RequestItem<T> {\n    // Create a new promise and store the resolve and reject callbacks for later.\n    // This lets us perform the actual action at a later point, when the request is at the\n    // front of the processing queue.\n    let promiseResolve, promiseReject;\n    const promise = new Promise<T>((resolve, reject) => {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n    // Store the request data.\n    const requestItem = {\n      key: key,\n      action: requestAction,\n      resolve: promiseResolve,\n      reject: promiseReject,\n      promise,\n    };\n    this.allRequests.set(key, requestItem);\n    return requestItem;\n  }\n\n  /**\n   * Moves a registered request into the processing queue, clearing any timeouts on the request.\n   * @param key string identifier of the request.\n   * @param lowPriority Whether this request should be added with low priority. False by default.\n   */\n  private addRequestToQueue(key: string, lowPriority?: boolean): void {\n    // Check that this request is not cancelled.\n    if (this.allRequests.has(key)) {\n      // Clear the request timeout, if it has one, since it is being added to the queue.\n      const requestItem = this.allRequests.get(key);\n      if (requestItem && requestItem.timeoutId) {\n        clearTimeout(requestItem.timeoutId);\n        requestItem.timeoutId = undefined;\n      }\n      if (!this.queue.includes(key) && !this.queueLowPriority.includes(key)) {\n        // Add to queue and check if the request can be processed right away.\n        if (lowPriority) {\n          this.queueLowPriority.push(key);\n        } else {\n          this.queue.push(key);\n        }\n        this.dequeue();\n      }\n    }\n  }\n\n  /**\n   * Adds a request with a unique key to the queue, if it doesn't already exist.\n   * @param key The key used to track the request.\n   * @param requestAction Function that will be called to complete the request. The function\n   *  will be run only once per unique key while the request exists, and may be deferred by the\n   *  queue at any time.\n   * @param lowPriority Whether this request should be added with low priority. False by default.\n   * @param delayMs Minimum delay, in milliseconds, before this request should be executed.\n   *\n   * NOTE: Cancelling a request while the action is running WILL NOT stop the action. If this behavior is desired,\n   * actions must be responsible for checking the RequestQueue, determining if the request is still valid (e.g.\n   * using `.hasRequest()`), and stopping or returning early.\n   *\n   * @returns A promise that will resolve on completion of the request, or reject if the request is cancelled.\n   *  If multiple requests are issued with the same key, a promise for the first request will be returned\n   *  until the request is resolved or cancelled.\n   *  Note that the return type of the promise will match that of the first request's instance.\n   */\n  public addRequest<T>(key: string, requestAction: () => Promise<T>, lowPriority = false, delayMs = 0): Promise<T> {\n    if (!this.allRequests.has(key)) {\n      // New request!\n      const requestItem = this.registerRequest(key, requestAction);\n      // If a delay is set, wait to add this to the queue.\n      if (delayMs > 0) {\n        const timeoutId = setTimeout(() => this.addRequestToQueue(key, lowPriority), delayMs);\n        // Save timeout information to request metadata\n        requestItem.timeoutId = timeoutId;\n      } else {\n        // No delay, add immediately\n        this.addRequestToQueue(key, lowPriority);\n      }\n    } else {\n      const lowPriorityIndex = this.queueLowPriority.indexOf(key);\n      if (lowPriorityIndex > -1 && !lowPriority) {\n        // This request is registered and queued, but is now being requested with high priority.\n        // Promote it to high priority.\n        this.queueLowPriority.splice(lowPriorityIndex, 1);\n        this.addRequestToQueue(key);\n      } else if (delayMs <= 0) {\n        // This request is registered, but is now being requested without a delay.\n        // Move into queue immediately if it's not already added, and clear any timeouts it may have.\n        this.addRequestToQueue(key, lowPriority);\n      }\n    }\n\n    const promise = this.allRequests.get(key)?.promise;\n    if (!promise) {\n      throw new Error(\"Found no promise to return when getting stored request data.\");\n    }\n    return promise as Promise<T>;\n  }\n\n  /**\n   * Adds multiple requests to the queue, with an optional delay between each.\n   * @param requests An array of RequestItems, which include a key and a request action.\n   * @param lowPriority Whether these requests should be added with low priority. False by default.\n   * @param delayMs An optional minimum delay in milliseconds to be added between each request.\n   *  For example, a delay of 10 ms will cause the second request to be added to the processing queue\n   *  after 10 ms, the third to added after 20 ms, and so on. Set to 10 ms by default.\n   * @returns An array of promises corresponding to the provided requests. (i.e., the `i`th value\n   * of the returned array will be a Promise for the resolution of `requests[i]`). If a request\n   *  with a matching key is already pending, returns the promise for the initial request.\n   */\n  public addRequests<T>(requests: Request<T>[], lowPriority = false, delayMs = 10): Promise<unknown>[] {\n    const promises: Promise<unknown>[] = [];\n    for (let i = 0; i < requests.length; i++) {\n      const item = requests[i];\n      const promise = this.addRequest(item.key, item.requestAction, lowPriority, delayMs * i);\n      promises.push(promise);\n    }\n    return promises;\n  }\n\n  /**\n   * Attempts to remove and run the next queued request item, if resources are available.\n   * @returns true if a request was started, or false if there are too many\n   * requests already active.\n   */\n  private async dequeue(): Promise<void> {\n    const numRequests = this.activeRequests.size;\n    if (\n      numRequests >= this.maxActiveRequests ||\n      (this.queue.length === 0 && (numRequests >= this.maxLowPriorityRequests || this.queueLowPriority.length === 0))\n    ) {\n      return;\n    }\n\n    const requestKey = this.queue.shift() ?? this.queueLowPriority.shift();\n    if (!requestKey) {\n      return;\n    }\n    if (this.activeRequests.has(requestKey)) {\n      // This request is already active, try the next one instead. (this shouldn't happen)\n      this.dequeue();\n      return;\n    }\n\n    const requestItem = this.allRequests.get(requestKey);\n    if (!requestItem) {\n      return;\n    }\n\n    const key = requestItem.key;\n    // Mark that this request is active\n    this.activeRequests.add(key);\n\n    await requestItem.action().then(requestItem.resolve, requestItem.reject);\n    this.activeRequests.delete(key);\n    this.allRequests.delete(key);\n    this.dequeue();\n  }\n\n  /**\n   * Removes any request matching the provided key from the queue and rejects its promise.\n   * @param key The key that should be matched against.\n   * @param cancelReason A message or object that will be used as the promise rejection.\n   */\n  public cancelRequest(key: string, cancelReason: unknown = DEFAULT_REQUEST_CANCEL_REASON): void {\n    if (!this.allRequests.has(key)) {\n      return;\n    }\n    const requestItem = this.allRequests.get(key);\n    if (requestItem) {\n      if (requestItem.timeoutId) {\n        // Cancel requests that have not been queued yet.\n        clearTimeout(requestItem.timeoutId);\n      }\n      // Reject the request, then clear from the queue and known requests.\n      requestItem.reject(cancelReason);\n    }\n    const queueIndex = this.queue.indexOf(key);\n    if (queueIndex > -1) {\n      this.queue.splice(queueIndex, 1);\n    } else {\n      const lowPriorityIndex = this.queueLowPriority.indexOf(key);\n      if (lowPriorityIndex > -1) {\n        this.queueLowPriority.splice(lowPriorityIndex, 1);\n      }\n    }\n    this.allRequests.delete(key);\n    this.activeRequests.delete(key);\n  }\n\n  /**\n   * Rejects all request promises and clears the queue.\n   * @param cancelReason A message or object that will be used as the promise rejection.\n   */\n  public cancelAllRequests(cancelReason: unknown = DEFAULT_REQUEST_CANCEL_REASON): void {\n    // Clear the queue so we don't do extra work while filtering it\n    this.queue = [];\n    this.queueLowPriority = [];\n    for (const key of this.allRequests.keys()) {\n      this.cancelRequest(key, cancelReason);\n    }\n  }\n\n  /**\n   * Returns whether a request with the given key exists in the RequestQueue and is not cancelled.\n   * @param key the key to search for.\n   * @returns true if the request is in the RequestQueue.\n   */\n  public hasRequest(key: string): boolean {\n    return this.allRequests.has(key);\n  }\n\n  /**\n   * Returns whether the request with the given key is currently running (not waiting in the queue).\n   * @param key the key to search for.\n   * @returns true if the request is actively running.\n   */\n  public requestRunning(key: string): boolean {\n    return this.activeRequests.has(key);\n  }\n}\n","import RequestQueue from \"./RequestQueue.js\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Resolver = (value?: any) => void;\ntype Rejecter = (reason?: unknown) => void;\n\ntype RequestSubscription = {\n  subscriberId: number;\n  resolve: Resolver;\n  reject: Rejecter;\n};\n\n/**\n * An extension of `RequestQueue` that adds a concept of \"subscribers,\" which may share references to a single request\n * or cancel their subscription without disrupting the request for other subscribers.\n */\nexport default class SubscribableRequestQueue {\n  private queue: RequestQueue;\n\n  /** The next unused subscriber ID. Increments whenever a subscriber is added. */\n  private nextSubscriberId: number;\n  /**\n   * Map of subscribers keyed by ID. Subscribers store a map to all their subscriptions by request key.\n   * Subscribers are only useful as handles to cancel subscriptions early, so we only need to store rejecters here.\n   */\n  private subscribers: Map<number, Map<string, Rejecter>>;\n  /** Map from \"inner\" request (managed by `queue`) to \"outer\" promises generated per-subscriber. */\n  private requests: Map<string, RequestSubscription[]>;\n\n  /**\n   * Since `SubscribableRequestQueue` wraps `RequestQueue`, its constructor may either take the same arguments as the\n   * `RequestQueue` constructor and create a new `RequestQueue`, or it may take an existing `RequestQueue` to wrap.\n   */\n  constructor(maxActiveRequests?: number, maxLowPriorityRequests?: number);\n  constructor(inner: RequestQueue);\n  constructor(maxActiveRequests?: number | RequestQueue, maxLowPriorityRequests?: number) {\n    if (typeof maxActiveRequests === \"number\" || maxActiveRequests === undefined) {\n      this.queue = new RequestQueue(maxActiveRequests, maxLowPriorityRequests);\n    } else {\n      this.queue = maxActiveRequests;\n    }\n    this.nextSubscriberId = 0;\n    this.subscribers = new Map();\n    this.requests = new Map();\n  }\n\n  /** Resolves all subscriptions to request `key` with `value` */\n  private resolveAll<T>(key: string, value: T): void {\n    const requests = this.requests.get(key);\n    if (requests) {\n      for (const { resolve, subscriberId } of requests) {\n        resolve(value);\n        this.subscribers.get(subscriberId)?.delete(key);\n      }\n      this.requests.delete(key);\n    }\n  }\n\n  /** Rejects all subscriptions to request `key` with `reason` */\n  private rejectAll(key: string, reason: unknown): void {\n    const requests = this.requests.get(key);\n    if (requests) {\n      for (const { reject, subscriberId } of requests) {\n        reject(reason);\n        this.subscribers.get(subscriberId)?.delete(key);\n      }\n      this.requests.delete(key);\n    }\n  }\n\n  /** Adds a new request subscriber. Returns a unique ID to identify this subscriber. */\n  addSubscriber(): number {\n    const subscriberId = this.nextSubscriberId;\n    this.nextSubscriberId++;\n    this.subscribers.set(subscriberId, new Map());\n    return subscriberId;\n  }\n\n  /**\n   * Queues a new request, or adds a subscription if the request is already queued/running.\n   *\n   * If `subscriberId` is already subscribed to the request, this rejects the existing promise and returns a new one.\n   */\n  addRequest<T>(\n    key: string,\n    subscriberId: number,\n    requestAction: () => Promise<T>,\n    lowPriority?: boolean,\n    delayMs?: number\n  ): Promise<T> {\n    // Create single underlying request if it does not yet exist\n    this.queue\n      .addRequest(key, requestAction, lowPriority, delayMs)\n      .then((value) => this.resolveAll(key, value))\n      .catch((reason) => this.rejectAll(key, reason));\n\n    if (!this.requests.has(key)) {\n      this.requests.set(key, []);\n    }\n\n    // Validate subscriber\n    if (subscriberId >= this.nextSubscriberId || subscriberId < 0) {\n      throw new Error(`SubscribableRequestQueue: subscriber id ${subscriberId} has not been registered`);\n    }\n    const subscriber = this.subscribers.get(subscriberId);\n    if (!subscriber) {\n      throw new Error(`SubscribableRequestQueue: subscriber id ${subscriberId} has been removed`);\n    }\n    const existingRequest = subscriber.get(key);\n    if (existingRequest) {\n      this.rejectSubscription(key, existingRequest, \"SubscribableRequestQueue: request re-queued while running\");\n    }\n\n    // Create promise and add to list of requests\n    return new Promise<T>((resolve, reject) => {\n      this.requests.get(key)?.push({ resolve, reject, subscriberId });\n      this.subscribers.get(subscriberId)?.set(key, reject);\n    });\n  }\n\n  /**\n   * Rejects a subscription and removes it from the list of subscriptions for a request, then cancels the underlying\n   * request if it is no longer subscribed and is not running already.\n   */\n  private rejectSubscription(key: string, reject: Rejecter, cancelReason?: unknown): void {\n    // Reject the outer \"subscription\" promise\n    reject(cancelReason);\n\n    // Get the list of subscriptions for this request\n    const subscriptions = this.requests.get(key);\n    if (!subscriptions) {\n      // This should never happen\n      return;\n    }\n    // Remove this request subscription by ref equality to `reject`\n    const idx = subscriptions.findIndex((sub) => sub.reject === reject);\n    if (idx >= 0) {\n      subscriptions.splice(idx, 1);\n    }\n\n    // Remove the underlying request if there are no more subscribers and the request is not already running\n    if (subscriptions.length < 1 && !this.queue.requestRunning(key)) {\n      this.queue.cancelRequest(key, cancelReason);\n      this.requests.delete(key);\n    }\n  }\n\n  /** Cancels a request subscription, and cancels the underlying request if it is no longer subscribed or running. */\n  cancelRequest(key: string, subscriberId: number, cancelReason?: unknown): boolean {\n    const subscriber = this.subscribers.get(subscriberId);\n    if (!subscriber) {\n      return false;\n    }\n\n    const reject = subscriber.get(key);\n    if (!reject) {\n      return false;\n    }\n\n    this.rejectSubscription(key, reject, cancelReason);\n    subscriber.delete(key);\n    return true;\n  }\n\n  /** Removes a subscriber and cancels its remaining subscriptions. */\n  removeSubscriber(subscriberId: number, cancelReason?: unknown): void {\n    const subscriptions = this.subscribers.get(subscriberId);\n    if (subscriptions) {\n      for (const [key, reject] of subscriptions.entries()) {\n        this.rejectSubscription(key, reject, cancelReason);\n      }\n      this.subscribers.delete(subscriberId);\n    }\n  }\n\n  /** Returns whether a request with the given `key` is running or waiting in the queue */\n  hasRequest(key: string): boolean {\n    return this.queue.hasRequest(key);\n  }\n\n  /** Returns whether a request with the given `key` is running */\n  requestRunning(key: string): boolean {\n    return this.queue.requestRunning(key);\n  }\n\n  /** Returns whether a subscriber with the given `subscriberId` exists */\n  hasSubscriber(subscriberId: number): boolean {\n    return this.subscribers.has(subscriberId);\n  }\n\n  /** Returns whether a subscriber with the given `subscriberId` is subscribed to the request with the given `key` */\n  isSubscribed(subscriberId: number, key: string): boolean {\n    return this.subscribers.get(subscriberId)?.has(key) ?? false;\n  }\n}\n","import VolumeCache from \"../VolumeCache.js\";\nimport { VolumeFileFormat, createVolumeLoader, pathToFileType } from \"../loaders/index.js\";\nimport { ThreadableVolumeLoader } from \"../loaders/IVolumeLoader.js\";\nimport RequestQueue from \"../utils/RequestQueue.js\";\nimport SubscribableRequestQueue from \"../utils/SubscribableRequestQueue.js\";\nimport type { WorkerRequest, WorkerRequestPayload, WorkerResponse, WorkerResponsePayload } from \"./types.js\";\nimport { WorkerMsgType, WorkerResponseResult } from \"./types.js\";\nimport { rebuildImageInfo, rebuildLoadSpec } from \"./util.js\";\n\nlet cache: VolumeCache | undefined = undefined;\nlet queue: RequestQueue | undefined = undefined;\nlet subscribableQueue: SubscribableRequestQueue | undefined = undefined;\nlet loader: ThreadableVolumeLoader | undefined = undefined;\nlet initialized = false;\nlet copyOnLoad = false;\n\ntype MessageHandler<T extends WorkerMsgType> = (payload: WorkerRequestPayload<T>) => Promise<WorkerResponsePayload<T>>;\n\nconst messageHandlers: { [T in WorkerMsgType]: MessageHandler<T> } = {\n  [WorkerMsgType.INIT]: ({ maxCacheSize, maxActiveRequests, maxLowPriorityRequests }) => {\n    if (!initialized) {\n      cache = new VolumeCache(maxCacheSize);\n      queue = new RequestQueue(maxActiveRequests, maxLowPriorityRequests);\n      subscribableQueue = new SubscribableRequestQueue(queue);\n      initialized = true;\n    }\n    return Promise.resolve();\n  },\n\n  [WorkerMsgType.CREATE_LOADER]: async ({ path, options }) => {\n    const pathString = Array.isArray(path) ? path[0] : path;\n    const fileType = options?.fileType || pathToFileType(pathString);\n    copyOnLoad = fileType === VolumeFileFormat.JSON;\n    loader = await createVolumeLoader(path, { ...options, cache, queue: subscribableQueue });\n    return loader !== undefined;\n  },\n\n  [WorkerMsgType.CREATE_VOLUME]: async (loadSpec) => {\n    if (loader === undefined) {\n      throw new Error(\"No loader created\");\n    }\n\n    return await loader.createImageInfo(rebuildLoadSpec(loadSpec));\n  },\n\n  [WorkerMsgType.LOAD_DIMS]: async (loadSpec) => {\n    if (loader === undefined) {\n      throw new Error(\"No loader created\");\n    }\n    return await loader.loadDims(rebuildLoadSpec(loadSpec));\n  },\n\n  [WorkerMsgType.LOAD_VOLUME_DATA]: async ({ imageInfo, loadSpec, loaderId, loadId }) => {\n    if (loader === undefined) {\n      throw new Error(\"No loader created\");\n    }\n\n    return await loader.loadRawChannelData(\n      rebuildImageInfo(imageInfo),\n      rebuildLoadSpec(loadSpec),\n      (channelIndex, data, ranges, atlasDims) => {\n        const message: WorkerResponse<WorkerMsgType> = {\n          responseResult: WorkerResponseResult.EVENT,\n          loaderId,\n          loadId,\n          channelIndex,\n          data,\n          ranges,\n          atlasDims,\n        };\n        const dataTransfers = data.map((d) => d.buffer);\n        (self as unknown as Worker).postMessage(message, copyOnLoad ? [] : dataTransfers);\n      }\n    );\n  },\n\n  [WorkerMsgType.SET_PREFETCH_PRIORITY_DIRECTIONS]: (directions) => {\n    // Silently does nothing if the loader isn't an `OMEZarrLoader`\n    loader?.setPrefetchPriority(directions);\n    return Promise.resolve();\n  },\n\n  [WorkerMsgType.SYNCHRONIZE_MULTICHANNEL_LOADING]: (syncChannels) => {\n    loader?.syncMultichannelLoading(syncChannels);\n    return Promise.resolve();\n  },\n};\n\nself.onmessage = async <T extends WorkerMsgType>({ data }: MessageEvent<WorkerRequest<T>>) => {\n  const { msgId, type, payload } = data;\n  let message: WorkerResponse<T>;\n\n  try {\n    const response = await messageHandlers[type](payload);\n    message = { responseResult: WorkerResponseResult.SUCCESS, msgId, type, payload: response };\n  } catch (e) {\n    message = { responseResult: WorkerResponseResult.ERROR, msgId, type, payload: (e as Error).message };\n  }\n  self.postMessage(message);\n};\n","import type { ImageInfo } from \"../Volume.js\";\nimport type { CreateLoaderOptions, PrefetchDirection } from \"../loaders/index.js\";\nimport type { LoadSpec, LoadedVolumeInfo, VolumeDims } from \"../loaders/IVolumeLoader.js\";\n\n/** The types of requests that can be made to the worker. Mostly corresponds to methods on `IVolumeLoader`. */\nexport const enum WorkerMsgType {\n  INIT,\n  CREATE_LOADER,\n  CREATE_VOLUME,\n  LOAD_DIMS,\n  LOAD_VOLUME_DATA,\n  SET_PREFETCH_PRIORITY_DIRECTIONS,\n  SYNCHRONIZE_MULTICHANNEL_LOADING,\n}\n\n/** The kind of response a worker can return - `SUCCESS`, `ERROR`, or `EVENT`. */\nexport const enum WorkerResponseResult {\n  SUCCESS,\n  ERROR,\n  EVENT,\n}\n\n/** All messages to/from a worker carry a `msgId`, a `type`, and a `payload` (whose type is determined by `type`). */\ntype WorkerMsgBase<T extends WorkerMsgType, P> = {\n  msgId: number;\n  type: T;\n  payload: P;\n};\n\n/** Maps each `WorkerMsgType` to the type of the payload of requests of that type. */\nexport type WorkerRequestPayload<T extends WorkerMsgType> = {\n  [WorkerMsgType.INIT]: {\n    maxCacheSize?: number;\n    maxActiveRequests?: number;\n    maxLowPriorityRequests?: number;\n  };\n  [WorkerMsgType.CREATE_LOADER]: {\n    path: string | string[];\n    options?: CreateLoaderOptions;\n  };\n  [WorkerMsgType.CREATE_VOLUME]: LoadSpec;\n  [WorkerMsgType.LOAD_DIMS]: LoadSpec;\n  [WorkerMsgType.LOAD_VOLUME_DATA]: {\n    imageInfo: ImageInfo;\n    loadSpec: LoadSpec;\n    loaderId: number;\n    loadId: number;\n  };\n  [WorkerMsgType.SET_PREFETCH_PRIORITY_DIRECTIONS]: PrefetchDirection[];\n  [WorkerMsgType.SYNCHRONIZE_MULTICHANNEL_LOADING]: boolean;\n}[T];\n\n/** Maps each `WorkerMsgType` to the type of the payload of responses of that type. */\nexport type WorkerResponsePayload<T extends WorkerMsgType> = {\n  [WorkerMsgType.INIT]: void;\n  [WorkerMsgType.CREATE_LOADER]: boolean;\n  [WorkerMsgType.CREATE_VOLUME]: LoadedVolumeInfo;\n  [WorkerMsgType.LOAD_DIMS]: VolumeDims[];\n  [WorkerMsgType.LOAD_VOLUME_DATA]: Partial<LoadedVolumeInfo>;\n  [WorkerMsgType.SET_PREFETCH_PRIORITY_DIRECTIONS]: void;\n  [WorkerMsgType.SYNCHRONIZE_MULTICHANNEL_LOADING]: void;\n}[T];\n\n/** Currently the only event a loader can produce is a `ChannelLoadEvent` when a batch of channels loads. */\nexport type ChannelLoadEvent = {\n  loaderId: number;\n  loadId: number;\n  channelIndex: number[];\n  data: Uint8Array[];\n  ranges: [number, number][];\n  atlasDims?: [number, number];\n};\n\n/** All valid types of worker requests, with some `WorkerMsgType` and a matching payload type. */\nexport type WorkerRequest<T extends WorkerMsgType> = WorkerMsgBase<T, WorkerRequestPayload<T>>;\n/** All valid types of worker responses: `SUCCESS` with a matching payload, `ERROR` with a message, or an `EVENT`. */\nexport type WorkerResponse<T extends WorkerMsgType> =\n  | ({ responseResult: WorkerResponseResult.SUCCESS } & WorkerMsgBase<T, WorkerResponsePayload<T>>)\n  | ({ responseResult: WorkerResponseResult.ERROR } & WorkerMsgBase<T, string>)\n  | ({ responseResult: WorkerResponseResult.EVENT } & ChannelLoadEvent);\n","import { Box3, Vector2, Vector3 } from \"three\";\nimport { LoadSpec } from \"../loaders/IVolumeLoader\";\nimport { ImageInfo } from \"../Volume\";\n\n/** Recreates a `LoadSpec` that has just been sent to/from a worker to restore three.js object prototypes */\nexport function rebuildLoadSpec(spec: LoadSpec): LoadSpec {\n  return {\n    ...spec,\n    subregion: new Box3(new Vector3().copy(spec.subregion.min), new Vector3().copy(spec.subregion.max)),\n  };\n}\n\n/** Recreates an `ImageInfo` that has just been sent to/from a worker to restore three.js object prototypes */\nexport function rebuildImageInfo(imageInfo: ImageInfo): ImageInfo {\n  return {\n    ...imageInfo,\n    originalSize: new Vector3().copy(imageInfo.originalSize),\n    atlasTileDims: new Vector2().copy(imageInfo.atlasTileDims),\n    volumeSize: new Vector3().copy(imageInfo.volumeSize),\n    subregionSize: new Vector3().copy(imageInfo.subregionSize),\n    subregionOffset: new Vector3().copy(imageInfo.subregionOffset),\n    physicalPixelSize: new Vector3().copy(imageInfo.physicalPixelSize),\n    transform: {\n      translation: new Vector3().copy(imageInfo.transform.translation),\n      rotation: new Vector3().copy(imageInfo.transform.rotation),\n    },\n  };\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_babel_runtime_regenerator_index_js-node_modules_babel_runtime_helpers_es-31f4f7\",\"vendors-node_modules_babel_runtime_helpers_esm_classCallCheck_js-node_modules_babel_runtime_h-896aaa\"], () => (__webpack_require__(\"./src/workers/VolumeLoadWorker.ts\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".volume-viewer-ui.bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_workers_VolumeLoadWorker_ts\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_aics_volume_viewer\"] = self[\"webpackChunk_aics_volume_viewer\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\n\t\t__webpack_require__.e(\"vendors-node_modules_babel_runtime_regenerator_index_js-node_modules_babel_runtime_helpers_es-31f4f7\"),\n\t\t__webpack_require__.e(\"vendors-node_modules_babel_runtime_helpers_esm_classCallCheck_js-node_modules_babel_runtime_h-896aaa\")\n\t]).then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":["DataTexture","RedFormat","UnsignedByteType","RGBAFormat","LinearFilter","NearestFilter","Histogram","Lut","LUT_ARRAY_LENGTH","Channel","name","_classCallCheck","loaded","imgData","data","Uint8ClampedArray","width","height","rawMin","rawMax","dataTexture","Uint8Array","lutTexture","minFilter","magFilter","generateMipmaps","volumeData","histogram","dims","lut","createFromMinMax","colorPalette","fill","colorPaletteAlpha","_createClass","key","value","combineLuts","rgbColor","out","ret","rgb","set","i","image","needsUpdate","setRawDataRange","min","max","remapDomains","getHistogram","getIntensity","x","y","z","getIntensityFromAtlas","numXtiles","tilex","tiley","Math","floor","offset","rebuildDataTexture","w","h","dispose","format","type","setBits","bitsArray","buffer","_this$histogram$findA","findAutoIJBins","_this$histogram$findA2","_slicedToArray","hmin","hmax","setLut","unpackVolumeFromAtlas","volimgdata","atlasrow","tileoffset","tilerowoffset","destOffset","j","subarray","setFromVolumeData","vx","vy","vz","ax","ay","arguments","length","undefined","packToAtlas","console","log","sourceOffset","setColorPalette","palette","setColorPaletteAlpha","alpha","default","bins","Uint32Array","dataMin","dataMax","maxBin","nonzeroPixelCount","getMin","getMax","getNumBins","getBin","findBinOfPercentile","pct","pixcount","limit","count","findBestFitBins","AUTO_THRESHOLD","threshold","findAutoMinMax","PERCENTAGE","th","b","e","getColorByChannelIndex","clamp","val","cmin","cmax","lerp","xmin","xmax","a","remapDomain","valueMin","valueMax","oldMin","oldMax","newMin","newMax","pctOfRange","newValue","pctOfOldRange","remapped","remapDomainForCP","iOld","pctOfNewRange","LUT_ENTRIES","controlPointToRGBA","controlPoint","color","opacity","controlPoints","createFullRange","tmp","startVal","push","endVal","createFromWindowLevel","wnd","lvl","createFromControlPoints","sort","rgba","startx","c0","c1","color0","color1","lastIndex","createFromEqHistogram","map","div","lutControlPoints","slope","lastSlope","lastOpacity","round","createLabelColors","lastr","lastg","lastb","lasta","r","g","remapLut","remapControlPoints","newLut","i0","i1","ceil","newControlPoints","cp","newCP","Vector2","Vector3","LoadSpec","MAX_ATLAS_EDGE","pickLevelToLoadUnscaled","getDefaultImageInfo","originalSize","atlasTileDims","volumeSize","subregionSize","subregionOffset","physicalPixelSize","spatialUnit","numChannels","channelNames","channelColors","times","timeScale","timeUnit","numMultiscaleLevels","multiscaleLevel","transform","translation","rotation","Volume","imageInfo","loadSpec","loader","_objectSpread","scaleLevelBias","maxAtlasEdge","channels","Array","from","_val","idx","loadSpecRequired","slice","subregion","clone","imageMetadata","normRegionSize","normRegionOffset","physicalSize","physicalScale","normPhysicalSize","tickMarkPhysicalLength","setVoxelSize","channelColorsDefault","index","channel","toArray","physicalUnitSymbol","volumeDataObservers","setUnloaded","forEach","isLoaded","updateDimensions","_this$imageInfo","divide","mustLoadNewData","_this","time","containsBox","some","includes","mayLoadNewScaleLevel","equals","_updateRequiredData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","required","onChannelLoaded","shouldReload","_this$loader","dimsZYX","levelToLoad","wrap","_callee$","_context","prev","next","loadDims","sent","_ref","shape","loadNewData","stop","updateRequiredData","_x","_x2","apply","_this$loader2","loadVolumeData","size","multiply","divideScalar","pow","log10","setUnitSymbol","symbol","getContentCenter","add","subScalar","cleanup","getChannel","channelIndex","batch","_this2","every","_this2$channelLoadCal","channelLoadCallback","call","observer","onVolumeData","setChannelDataFromAtlas","atlasdata","atlaswidth","atlasheight","_this$imageInfo$subre","setChannelDataFromVolume","range","_this$imageInfo2","appendEmptyChannel","chname","chcolor","onVolumeChannelAdded","c","getRotation","getTranslation","voxelsToWorldSpace","xyz","m","fromArray","multiplyScalar","addVolumeDataObserver","o","removeVolumeDataObserver","indexOf","splice","removeAllVolumeDataObservers","CACHE_MAX_SIZE_DEFAULT","VolumeCache","maxSize","entries","Map","currentSize","first","last","get","removeEntryFromStore","entry","byteLength","removeEntryFromList","addEntryAsFirst","moveEntryToFirst","evictLast","error","evict","insert","getResult","getEntry","newEntry","result","_this$getEntry","clearWithPrefix","prefix","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","startsWith","err","f","clear","defaultColors","HSVtoRGB","v","hh","hsv","p","q","t","LCG","imul","myrand","Box3","buildDefaultMetadata","_defineProperty","loadSpecToString","spec","_spec$subregion","concat","VolumeDims","ThreadableVolumeLoader","setPrefetchPriority","_directions","syncMultichannelLoading","_sync","_createVolume","_yield$this$createIma","adjustedLoadSpec","vol","createImageInfo","abrupt","createVolume","_loadVolumeData","_callee2","volume","loadSpecOverride","onChannelData","_yield$this$loadRawCh","_callee2$","_context2","channelIndices","dataArrays","ranges","atlasDims","loadRawChannelData","_x3","_x4","_x5","DATARANGE_UINT8","convertImageInfo","json","_json$transform","_json$transform2","tiles","cols","rows","tile_width","tile_height","pixel_size_x","pixel_size_y","pixel_size_z","pixel_size_unit","channel_names","channel_colors","time_scale","time_unit","userData","JsonImageInfoLoader","_ThreadableVolumeLoad","_inherits","urls","cache","_callSuper","isArray","jsonInfo","_getJsonImageInfo","cachedInfo","response","fetch","getJsonImageInfo","_loadDims","d","spacing","spaceUnit","dataType","_createImageInfo","_callee3","_callee3$","_context3","_loadRawChannelData","_callee4","onData","images","requestedChannels","urlPrefix","wrappedOnData","_callee4$","_context4","filter","ch","replace","element","loadVolumeAtlasData","flatMap","_ref2","_x6","imageArray","_ref3","_callee5","cacheHit","chindex","cacheResult","blob","bitmap","canvas","ctx","iData","channelsBits","_j","px","_ch","_chindex","_callee5$","_context5","mode","createImageBitmap","OffscreenCanvas","getContext","globalCompositeOperation","globalAlpha","drawImage","getImageData","_x7","zarr","zarrGet","FetchStore","SubscribableRequestQueue","composeSubregion","computePackedAtlasDims","convertSubregionToPixels","pickLevelToLoad","unitNameToSymbol","ChunkPrefetchIterator","WrappedStore","getDimensionCount","getScale","matchSourceScaleLevels","orderByDimension","orderByTCZYX","remapAxesToTCZYX","CHUNK_REQUEST_CANCEL_REASON","convertChannel","channelData","u8","DEFAULT_FETCH_OPTIONS","maxPrefetchDistance","maxPrefetchChunks","OMEZarrLoader","sources","requestQueue","fetchOptions","priorityDirections","_assertThisInitialized","getUnitSymbols","source","xi","axesTCZYX","spaceUnitName","multiscaleMetadata","axes","unit","spaceUnitSymbol","ti","timeUnitName","timeUnitSymbol","getLevelShapesZYX","_source$axesTCZYX$sli","_source$axesTCZYX$sli2","scaleLevels","level","datasets","valsTCZYX","sourceIdx","valsDimension","defaultValue","matchChannelToSource","absoluteChannelIndex","lastSrcIdx","lastSrc","lastSrcNumChannels","channelOffset","Error","firstGreaterIdx","findIndex","src","sourceIndex","channelIndexInSource","directions","sync","syncChannels","_this$maxExtent","_this$getUnitSymbols","_this$getUnitSymbols2","maxExtent","regionSize","getSize","regionArr","scale","Promise","resolve","source0","_source0$axesTCZYX","hasT","hasZ","shape0","shapeLv","_this$getUnitSymbols3","_this$getUnitSymbols4","sourceLast","cLast","lastHasC","pxDims0","pxSize0","pxDimsLv","pxSizeLv","channelNamesMap","omeroMetadata","numMatchingChannels","label","scale5d","imgdata","fullExtentLoadSpec","_prefetchChunk","scaleLevel","coords","subscriber","store","path","separator","endsWith","join","isPrefetch","t0","prefetchChunk","beginPrefetch","keys","_this3","chunkCoords","numDims","coordsInDimensionOrder","trim","split","parseInt","sourceCoords","chunkDimsTCZYX","chunkDimsUnordered","dim","chunks","prefetchIterator","addSubscriber","prefetchCount","chunk","_this$matchChannelToS","sourceScaleLevel","prefetchSubscriber","removeSubscriber","updateImageInfoForLoad","_this$maxExtent2","array0Shape","_this$sources$0$axesT","_this$sources$0$axesT2","regionPx","volumeExtent","_loadSpec$channels","_this4","updatedImageInfo","channelIndexes","_","reportKeyBase","sub","resultChannelIndices","resultChannelData","resultChannelRanges","channelPromises","_this4$matchChannelTo","sourceCh","unorderedSpec","sliceSpec","reportKey","converted","opts","loadSubscriber","all","then","_createLoader","scenes","queue","urlsArr","scenesArr","sourceProms","channelCount","_iterator2","_step2","priorityDirs","_args4","concurrencyLimit","prefetchConcurrencyLimit","_ref4","url","root","group","_ref5","multiscales","omero","scene","lvlProms","open","kind","attrs","warn","_ref6","createLoader","sizeX","sizeY","sizeZ","sizeC","RawArrayLoader","rawData","rawDataInfo","_loadSpec","volSizeBytes","fromUrl","prepareXML","xml","expr","getOME","parser","DOMParser","xmlDoc","parseFromString","omeEl","getElementsByTagName","OMEDims","getOMEDims","imageEl","pixelsEl","sizex","Number","getAttribute","sizey","sizez","sizec","sizet","pixeltype","dimensionorder","pixelsizex","pixelsizey","pixelsizez","channelsEls","id","channelnames","getBytesPerSample","TiffLoader","_loadOmeDims","tiff","tiffimgdesc","image0El","allowFullFile","getImage","getFileDirectory","ImageDescription","loadOmeDims","targetSize","tilesizex","tilesizey","_loop","params","worker","_loop$","dimensionOrder","bytesPerSample","Worker","URL","import","meta","onmessage","terminate","onerror","alert","lineno","filename","message","postMessage","delegateYield","UNIT_SYMBOLS","angstrom","day","foot","hour","inch","meter","mile","minute","parsec","second","yard","SI_UNITS","SI_PREFIX_ABBVS","micro","deca","unitName","prefixedSIUnit","find","siUnit","substring","capitalize","prefixAbbr","toUpperCase","tw","nextrows","nextcols","ratio","nrows","ncols","estimateLevelForAtlas","spatialDimsZYX","xtiles","ytiles","maxCeil","scaleDims","scaleDimsToSubregion","scaleMultipleDimsToSubregion","_loadSpec$scaleLevelB","_loadSpec$multiscaleL","optimalLevel","scaledDims","region","container","isEmpty","obj","Object","prototype","hasOwnProperty","metadata","PrefetchDirection","VolumeFileFormat","pathToFileType","JSON","TIFF","ZARR","createVolumeLoader","_createVolumeLoader","options","pathString","fileType","DATA","rawArrayOptions","allEqual","arr","pushN","directionToIndex","dir","absDir","updateMinMax","minmax","_Symbol$iterator","tzyxMaxPrefetchOffset","tczyxChunksPerSource","extrema","Infinity","directionStates","priorityDirectionStates","flat","_step2$value","direction","start","dimension","tczyxIndex","end","endsPerSource","chunkDims","_iterator4","_step4","_step4$value","sourceEnd","directionState","_iterator3","_step3","_iterator5","_step5","_iterator6","_step6","_iterator7","_step7","_iterator8","_step8","_chunk2","value$","iterateDirections","finish","t1","_iterator9","_step9","offsetDir","_iterator10","_step10","newChunk","iterateDirections$","_toConsumableArray","Symbol","iterator","baseStore","_key","_value","_getAndCache","cacheKey","getAndCache","_get","_url","ZARR_EXTS","keyPrefix","fullKey","addRequest","axisNames","axis","axisIdx","orderTCZYX","specLen","dataset","transforms","coordinateTransformations","isScaleTransform","scaleTransform","compareZarrArraySize","aArr","aTCZYX","bArr","bTCZYX","aZ","bZ","diffZ","diffY","diffX","EPSILON","aboutEquals","abs","scaleTransformsAreEqual","aSrc","aLevel","bSrc","bLevel","aScale","bScale","matchedLevels","matchedMetas","scaleIndexes","smallestIdx","smallestSrc","smallestArr","currentIdx","currentSrc","currentArr","ordering","largestT","currentT","matchedScaleLevel","srcIdx","FUSE_DISABLED_RGB_COLOR","RenderMode","isOrthographicCamera","def","ViewportCorner","isTop","corner","TOP_LEFT","TOP_RIGHT","isRight","BOTTOM_RIGHT","DEFAULT_REQUEST_CANCEL_REASON","RequestQueue","maxActiveRequests","maxLowPriorityRequests","allRequests","activeRequests","Set","queueLowPriority","registerRequest","requestAction","promiseResolve","promiseReject","promise","reject","requestItem","action","addRequestToQueue","lowPriority","has","timeoutId","clearTimeout","dequeue","_this$allRequests$get","delayMs","setTimeout","lowPriorityIndex","addRequests","requests","promises","item","_dequeue","_this$queue$shift","numRequests","requestKey","shift","cancelRequest","cancelReason","queueIndex","cancelAllRequests","hasRequest","requestRunning","nextSubscriberId","subscribers","resolveAll","_this$subscribers$get","subscriberId","rejectAll","reason","_this$subscribers$get2","existingRequest","rejectSubscription","_this$requests$get","_this$subscribers$get3","subscriptions","_step3$value","hasSubscriber","isSubscribed","_this$subscribers$get4","_this$subscribers$get5","WorkerMsgType","WorkerResponseResult","rebuildImageInfo","rebuildLoadSpec","subscribableQueue","initialized","copyOnLoad","messageHandlers","INIT","maxCacheSize","CREATE_LOADER","CREATE_VOLUME","LOAD_DIMS","LOAD_VOLUME_DATA","_ref7","loaderId","loadId","responseResult","EVENT","dataTransfers","self","SET_PREFETCH_PRIORITY_DIRECTIONS","_loader","SYNCHRONIZE_MULTICHANNEL_LOADING","_loader2","_ref9","_ref8","msgId","payload","SUCCESS","ERROR","copy"],"sourceRoot":""}