{"version":3,"file":"src_workers_VolumeLoadWorker_ts.volume-viewer-ui.bundle.js","mappings":"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AY,EAAE,IAAIL,0CAAO,CAAC,CAAC,CAACsuB,IAAI,CAAC9sB,SAAS,CAACnB,YAAY,CAAC;IACxDC,aAAa,EAAE,IAAIP,0CAAO,CAAC,CAAC,CAACuuB,IAAI,CAAC9sB,SAAS,CAAClB,aAAa,CAAC;IAC1DC,UAAU,EAAE,IAAIP,0CAAO,CAAC,CAAC,CAACsuB,IAAI,CAAC9sB,SAAS,CAACjB,UAAU,CAAC;IACpDC,aAAa,EAAE,IAAIR,0CAAO,CAAC,CAAC,CAACsuB,IAAI,CAAC9sB,SAAS,CAAChB,aAAa,CAAC;IAC1DC,eAAe,EAAE,IAAIT,0CAAO,CAAC,CAAC,CAACsuB,IAAI,CAAC9sB,SAAS,CAACf,eAAe,CAAC;IAC9DC,iBAAiB,EAAE,IAAIV,0CAAO,CAAC,CAAC,CAACsuB,IAAI,CAAC9sB,SAAS,CAACd,iBAAiB,CAAC;IAClEU,SAAS,EAAE;MACTC,WAAW,EAAE,IAAIrB,0CAAO,CAAC,CAAC,CAACsuB,IAAI,CAAC9sB,SAAS,CAACJ,SAAS,CAACC,WAAW,CAAC;MAChEC,QAAQ,EAAE,IAAItB,0CAAO,CAAC,CAAC,CAACsuB,IAAI,CAAC9sB,SAAS,CAACJ,SAAS,CAACE,QAAQ;IAC3D;EACF,CAAC;AACH;;;;;;;;;;AC3BA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WClBA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;UENA;UACA","sources":["webpack://@aics/volume-viewer/./src/Channel.ts","webpack://@aics/volume-viewer/./src/Histogram.ts","webpack://@aics/volume-viewer/./src/Lut.ts","webpack://@aics/volume-viewer/./src/Volume.ts","webpack://@aics/volume-viewer/./src/VolumeCache.ts","webpack://@aics/volume-viewer/./src/constants/colors.ts","webpack://@aics/volume-viewer/./src/loaders/IVolumeLoader.ts","webpack://@aics/volume-viewer/./src/loaders/JsonImageInfoLoader.ts","webpack://@aics/volume-viewer/./src/loaders/OmeZarrLoader.ts","webpack://@aics/volume-viewer/./src/loaders/RawArrayLoader.ts","webpack://@aics/volume-viewer/./src/loaders/TiffLoader.ts","webpack://@aics/volume-viewer/./src/loaders/VolumeLoadError.ts","webpack://@aics/volume-viewer/./src/loaders/VolumeLoaderUtils.ts","webpack://@aics/volume-viewer/./src/loaders/index.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/ChunkPrefetchIterator.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/WrappedStore.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/types.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/utils.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/validation.ts","webpack://@aics/volume-viewer/./src/types.ts","webpack://@aics/volume-viewer/./src/utils/RequestQueue.ts","webpack://@aics/volume-viewer/./src/utils/SubscribableRequestQueue.ts","webpack://@aics/volume-viewer/./src/workers/VolumeLoadWorker.ts","webpack://@aics/volume-viewer/./src/workers/types.ts","webpack://@aics/volume-viewer/./src/workers/util.ts","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|http","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|https","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|url","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source|fs","webpack://@aics/volume-viewer/webpack/bootstrap","webpack://@aics/volume-viewer/webpack/runtime/chunk loaded","webpack://@aics/volume-viewer/webpack/runtime/define property getters","webpack://@aics/volume-viewer/webpack/runtime/ensure chunk","webpack://@aics/volume-viewer/webpack/runtime/get javascript chunk filename","webpack://@aics/volume-viewer/webpack/runtime/global","webpack://@aics/volume-viewer/webpack/runtime/hasOwnProperty shorthand","webpack://@aics/volume-viewer/webpack/runtime/make namespace object","webpack://@aics/volume-viewer/webpack/runtime/publicPath","webpack://@aics/volume-viewer/webpack/runtime/importScripts chunk loading","webpack://@aics/volume-viewer/webpack/runtime/startup chunk dependencies","webpack://@aics/volume-viewer/webpack/before-startup","webpack://@aics/volume-viewer/webpack/startup","webpack://@aics/volume-viewer/webpack/after-startup"],"sourcesContent":["import { DataTexture, RedFormat, UnsignedByteType, RGBAFormat, LinearFilter, NearestFilter } from \"three\";\nimport Histogram from \"./Histogram.js\";\nimport { Lut, LUT_ARRAY_LENGTH } from \"./Lut.js\";\n\ninterface ChannelImageData {\n  /** Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255. */\n  readonly data: Uint8ClampedArray;\n  /** Returns the actual dimensions of the data in the ImageData object, in pixels. */\n  readonly height: number;\n  /** Returns the actual dimensions of the data in the ImageData object, in pixels. */\n  readonly width: number;\n}\n\n// Data and processing for a single channel\nexport default class Channel {\n  public loaded: boolean;\n  public imgData: ChannelImageData;\n  public volumeData: Uint8Array;\n  public name: string;\n  public histogram: Histogram;\n  public lut: Lut;\n  public colorPalette: Uint8Array;\n  public colorPaletteAlpha: number;\n  public dims: [number, number, number];\n  public dataTexture: DataTexture;\n  public lutTexture: DataTexture;\n  public rawMin: number;\n  public rawMax: number;\n\n  constructor(name: string) {\n    this.loaded = false;\n    this.imgData = { data: new Uint8ClampedArray(), width: 0, height: 0 };\n    this.rawMin = 0;\n    this.rawMax = 255;\n\n    // on gpu\n    this.dataTexture = new DataTexture(new Uint8Array(), 0, 0);\n    this.lutTexture = new DataTexture(new Uint8Array(LUT_ARRAY_LENGTH), 256, 1, RGBAFormat, UnsignedByteType);\n    this.lutTexture.minFilter = this.lutTexture.magFilter = LinearFilter;\n    this.lutTexture.generateMipmaps = false;\n\n    this.volumeData = new Uint8Array();\n    this.name = name;\n    this.histogram = new Histogram(new Uint8Array());\n    this.dims = [0, 0, 0];\n\n    // intensity remapping lookup table\n    this.lut = new Lut().createFromMinMax(0, 255);\n\n    // per-intensity color labeling (disabled initially)\n    this.colorPalette = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n    // store in 0..1 range. 1 means fully colorPalette, 0 means fully lut.\n    this.colorPaletteAlpha = 0.0;\n  }\n\n  // rgbColor is [0..255, 0..255, 0..255]\n  public combineLuts(rgbColor: [number, number, number] | number, out?: Uint8Array): Uint8Array {\n    const ret = out ? out : new Uint8Array(LUT_ARRAY_LENGTH);\n    if (!rgbColor) {\n      return ret;\n    }\n    const rgb = [rgbColor[0] / 255.0, rgbColor[1] / 255.0, rgbColor[2] / 255.0];\n    // colorPalette*alpha + rgb*lut*(1-alpha)\n    // a tiny bit faster for the edge cases\n    if (this.colorPaletteAlpha === 1.0) {\n      ret.set(this.colorPalette);\n    } else if (this.colorPaletteAlpha === 0.0) {\n      ret.set(this.lut.lut);\n      for (let i = 0; i < LUT_ARRAY_LENGTH / 4; ++i) {\n        ret[i * 4 + 0] *= rgb[0];\n        ret[i * 4 + 1] *= rgb[1];\n        ret[i * 4 + 2] *= rgb[2];\n      }\n    } else {\n      for (let i = 0; i < LUT_ARRAY_LENGTH / 4; ++i) {\n        ret[i * 4 + 0] =\n          this.colorPalette[i * 4 + 0] * this.colorPaletteAlpha +\n          this.lut.lut[i * 4 + 0] * (1.0 - this.colorPaletteAlpha) * rgb[0];\n        ret[i * 4 + 1] =\n          this.colorPalette[i * 4 + 1] * this.colorPaletteAlpha +\n          this.lut.lut[i * 4 + 1] * (1.0 - this.colorPaletteAlpha) * rgb[1];\n        ret[i * 4 + 2] =\n          this.colorPalette[i * 4 + 2] * this.colorPaletteAlpha +\n          this.lut.lut[i * 4 + 2] * (1.0 - this.colorPaletteAlpha) * rgb[2];\n        ret[i * 4 + 3] =\n          this.colorPalette[i * 4 + 3] * this.colorPaletteAlpha +\n          this.lut.lut[i * 4 + 3] * (1.0 - this.colorPaletteAlpha);\n      }\n    }\n\n    this.lutTexture.image.data.set(ret);\n    this.lutTexture.needsUpdate = true;\n\n    return ret;\n  }\n\n  public setRawDataRange(min: number, max: number): void {\n    // remap the lut which was based on rawMin and rawMax to new min and max\n    // If either of the min/max ranges are both zero, then we have undefined behavior and should\n    // not remap the lut.  This situation can happen at first load, for example,\n    // when one channel has arrived but others haven't.\n    if (!(this.rawMin === 0 && this.rawMax === 0) && !(min === 0 && max === 0)) {\n      this.lut.remapDomains(this.rawMin, this.rawMax, min, max);\n      this.rawMin = min;\n      this.rawMax = max;\n    }\n  }\n\n  public getHistogram(): Histogram {\n    return this.histogram;\n  }\n\n  public getIntensity(x: number, y: number, z: number): number {\n    return this.volumeData[x + y * this.dims[0] + z * (this.dims[0] * this.dims[1])];\n  }\n\n  // how to index into tiled texture atlas\n  public getIntensityFromAtlas(x: number, y: number, z: number): number {\n    const numXtiles = this.imgData.width / this.dims[0];\n    const tilex = z % numXtiles;\n    const tiley = Math.floor(z / numXtiles);\n    const offset = tilex * this.dims[0] + x + (tiley * this.dims[1] + y) * this.imgData.width;\n    return this.imgData.data[offset];\n  }\n\n  private rebuildDataTexture(data: Uint8ClampedArray, w: number, h: number): void {\n    if (this.dataTexture) {\n      this.dataTexture.dispose();\n    }\n    this.dataTexture = new DataTexture(data, w, h);\n    this.dataTexture.format = RedFormat;\n    this.dataTexture.type = UnsignedByteType;\n    this.dataTexture.magFilter = NearestFilter;\n    this.dataTexture.minFilter = NearestFilter;\n    this.dataTexture.generateMipmaps = false;\n    this.dataTexture.needsUpdate = true;\n  }\n\n  // give the channel fresh data and initialize from that data\n  // data is formatted as a texture atlas where each tile is a z slice of the volume\n  public setBits(bitsArray: Uint8Array, w: number, h: number): void {\n    this.imgData = { data: new Uint8ClampedArray(bitsArray.buffer), width: w, height: h };\n\n    this.rebuildDataTexture(this.imgData.data, w, h);\n\n    this.loaded = true;\n    this.histogram = new Histogram(bitsArray);\n\n    const [hmin, hmax] = this.histogram.findAutoIJBins();\n    const lut = new Lut().createFromMinMax(hmin, hmax);\n    this.setLut(lut);\n  }\n\n  // let's rearrange this.imgData.data into a 3d array.\n  // it is assumed to be coming in as a flat Uint8Array of size x*y*z\n  // with x*y*z layout (first row of first plane is the first data in the layout,\n  // then second row of first plane, etc)\n  public unpackVolumeFromAtlas(x: number, y: number, z: number): void {\n    const volimgdata = this.imgData.data;\n\n    this.dims = [x, y, z];\n    this.volumeData = new Uint8Array(x * y * z);\n\n    const numXtiles = this.imgData.width / x;\n    const atlasrow = this.imgData.width;\n    let tilex = 0,\n      tiley = 0,\n      tileoffset = 0,\n      tilerowoffset = 0,\n      destOffset = 0;\n    for (let i = 0; i < z; ++i) {\n      // tile offset\n      tilex = i % numXtiles;\n      tiley = Math.floor(i / numXtiles);\n      tileoffset = tilex * x + tiley * y * atlasrow;\n      for (let j = 0; j < y; ++j) {\n        tilerowoffset = j * atlasrow;\n        destOffset = i * (x * y) + j * x;\n        this.volumeData.set(\n          volimgdata.subarray(tileoffset + tilerowoffset, tileoffset + tilerowoffset + x),\n          destOffset\n        );\n      }\n    }\n  }\n\n  // give the channel fresh volume data and initialize from that data\n  public setFromVolumeData(\n    bitsArray: Uint8Array,\n    vx: number,\n    vy: number,\n    vz: number,\n    ax: number,\n    ay: number,\n    rawMin = 0,\n    rawMax = 255\n  ): void {\n    this.dims = [vx, vy, vz];\n    this.volumeData = bitsArray;\n    // TODO FIXME performance hit for shuffling the data and storing 2 versions of it (could do this in worker at least?)\n    this.packToAtlas(vx, vy, vz, ax, ay);\n    this.loaded = true;\n    // update from current histogram?\n    this.setRawDataRange(rawMin, rawMax);\n    this.histogram = new Histogram(this.volumeData);\n  }\n\n  // given this.volumeData, let's unpack it into a flat textureatlas and fill up this.imgData.\n  private packToAtlas(vx: number, vy: number, vz: number, ax: number, ay: number): void {\n    // big assumptions:\n    // atlassize is a perfect multiple of volumesize in both x and y\n    // ax % vx == 0\n    // ay % vy == 0\n    // and num slices <= num possible slices in atlas.\n    // (ax/vx) * (ay/vy) >= vz\n    if (ax % vx !== 0 || ay % vy !== 0 || (ax / vx) * (ay / vy) < vz) {\n      console.log(\"ERROR - atlas and volume dims are inconsistent\");\n      console.log(ax, ay, vx, vy, vz);\n    }\n\n    this.imgData = {\n      width: ax,\n      height: ay,\n      data: new Uint8ClampedArray(ax * ay),\n    };\n    this.imgData.data.fill(0);\n\n    // deposit slices one by one into the imgData.data from volData.\n    const volimgdata = this.imgData.data;\n\n    const x = vx,\n      y = vy,\n      z = vz;\n\n    const numXtiles = this.imgData.width / x;\n    const atlasrow = this.imgData.width;\n    let tilex = 0,\n      tiley = 0,\n      tileoffset = 0,\n      tilerowoffset = 0,\n      sourceOffset = 0;\n    for (let i = 0; i < z; ++i) {\n      // tile offset\n      tilex = i % numXtiles;\n      tiley = Math.floor(i / numXtiles);\n      tileoffset = tilex * x + tiley * y * atlasrow;\n      for (let j = 0; j < y; ++j) {\n        tilerowoffset = j * atlasrow;\n        sourceOffset = i * (x * y) + j * x;\n        volimgdata.set(this.volumeData.subarray(sourceOffset, sourceOffset + x), tileoffset + tilerowoffset);\n      }\n    }\n\n    this.rebuildDataTexture(this.imgData.data, ax, ay);\n  }\n\n  public setLut(lut: Lut): void {\n    this.lut = lut;\n  }\n\n  // palette should be an uint8array of 256*4 elements (256 rgba8 values)\n  public setColorPalette(palette: Uint8Array): void {\n    this.colorPalette = palette;\n  }\n\n  public setColorPaletteAlpha(alpha: number): void {\n    this.colorPaletteAlpha = alpha;\n  }\n}\n","/**\n * Builds a histogram with 256 bins from a data array. Assume data is 8 bit single channel grayscale.\n * @class\n * @param {Array.<number>} data\n */\nexport default class Histogram {\n  private bins: Uint32Array;\n  private dataMin: number;\n  private dataMax: number;\n  private nonzeroPixelCount: number;\n  public maxBin: number;\n\n  constructor(data: Uint8Array) {\n    // no more than 2^32 pixels of any one intensity in the data!?!?!\n    this.bins = new Uint32Array(256);\n    this.bins.fill(0);\n    this.dataMin = 255;\n    this.dataMax = 0;\n    this.maxBin = 0;\n\n    // build up the histogram\n    for (let i = 0; i < data.length; ++i) {\n      this.bins[data[i]]++;\n    }\n    // track the first and last nonzero bins with at least 1 sample\n    for (let i = 1; i < this.bins.length; i++) {\n      if (this.bins[i] > 0) {\n        this.dataMin = i;\n        break;\n      }\n    }\n    for (let i = this.bins.length - 1; i >= 1; i--) {\n      if (this.bins[i] > 0) {\n        this.dataMax = i;\n        break;\n      }\n    }\n\n    // total number of pixels minus the number of zero pixels\n    this.nonzeroPixelCount = data.length - this.bins[0];\n\n    // get the bin with the most frequently occurring NONZERO value\n    this.maxBin = 1;\n    let max = this.bins[1];\n    for (let i = 1; i < this.bins.length; i++) {\n      if (this.bins[i] > max) {\n        this.maxBin = i;\n        max = this.bins[i];\n      }\n    }\n  }\n\n  /**\n   * Return the min data value\n   * @return {number}\n   */\n  getMin(): number {\n    return this.dataMin;\n  }\n\n  /**\n   * Return the max data value\n   * @return {number}\n   */\n  getMax(): number {\n    return this.dataMax;\n  }\n\n  getNumBins(): number {\n    return this.bins.length;\n  }\n  getBin(i: number): number {\n    return this.bins[i];\n  }\n\n  /**\n   * Find the bin that contains the percentage of pixels below it\n   * @return {number}\n   * @param {number} pct\n   */\n  findBinOfPercentile(pct: number): number {\n    const pixcount = this.nonzeroPixelCount + this.bins[0];\n    const limit = pixcount * pct;\n\n    let i = 0;\n    let count = 0;\n    for (i = 0; i < this.bins.length; ++i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    return i;\n  }\n\n  // Find bins at 10th / 90th percentile\n  findBestFitBins(): [number, number] {\n    const pixcount = this.nonzeroPixelCount;\n    //const pixcount = this.imgData.data.length;\n    const limit = pixcount / 10;\n\n    let i = 0;\n    let count = 0;\n    for (i = 1; i < this.bins.length; ++i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    const hmin = i;\n\n    count = 0;\n    for (i = this.bins.length - 1; i >= 1; --i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    const hmax = i;\n\n    return [hmin, hmax];\n  }\n\n  // Find min and max bins attempting to replicate ImageJ's \"Auto\" button\n  findAutoIJBins(): [number, number] {\n    const AUTO_THRESHOLD = 5000;\n    const pixcount = this.nonzeroPixelCount;\n    //  const pixcount = this.imgData.data.length;\n    const limit = pixcount / 10;\n    const threshold = pixcount / AUTO_THRESHOLD;\n\n    // this will skip the \"zero\" bin which contains pixels of zero intensity.\n    let hmin = this.bins.length - 1;\n    let hmax = 1;\n    for (let i = 1; i < this.bins.length; ++i) {\n      if (this.bins[i] > threshold && this.bins[i] <= limit) {\n        hmin = i;\n        break;\n      }\n    }\n    for (let i = this.bins.length - 1; i >= 1; --i) {\n      if (this.bins[i] > threshold && this.bins[i] <= limit) {\n        hmax = i;\n        break;\n      }\n    }\n\n    if (hmax < hmin) {\n      hmin = 0;\n      hmax = 255;\n    }\n\n    return [hmin, hmax];\n  }\n\n  // Find min and max bins using a percentile of the most commonly occurring value\n  findAutoMinMax(): [number, number] {\n    // simple linear mapping cutting elements with small appearence\n    // get 10% threshold\n    const PERCENTAGE = 0.1;\n    const th = Math.floor(this.bins[this.maxBin] * PERCENTAGE);\n    let b = 0;\n    let e = this.bins.length - 1;\n    for (let x = 1; x < this.bins.length; ++x) {\n      if (this.bins[x] > th) {\n        b = x;\n        break;\n      }\n    }\n    for (let x = this.bins.length - 1; x >= 1; --x) {\n      if (this.bins[x] > th) {\n        e = x;\n        break;\n      }\n    }\n    return [b, e];\n  }\n}\n","import { getColorByChannelIndex } from \"./constants/colors.js\";\nimport Histogram from \"./Histogram.js\";\n\nfunction clamp(val: number, cmin: number, cmax: number): number {\n  return Math.min(Math.max(cmin, val), cmax);\n}\n\nfunction lerp(xmin, xmax, a) {\n  return a * (xmax - xmin) + xmin;\n}\n\n// We have an intensity value that is in the range of valueMin to valueMax.\n// This domain is assumed to have been remapped from oldMin to oldMax.\n// We now wish to find the intensity value that corresponds to the same relative position in the new domain of newMin to newMax.\n// For our Luts valueMin will always be 0, and valueMax will always be 255.\n// oldMin and oldMax will be the domain of the original raw data intensities.\n// newMin and newMax will be the domain of the new raw data intensities.\nfunction remapDomain(\n  value: number,\n  valueMin: number,\n  valueMax: number,\n  oldMin: number,\n  oldMax: number,\n  newMin: number,\n  newMax: number\n): number {\n  const pctOfRange = (value - valueMin) / (valueMax - valueMin);\n  const newValue = (newMax - newMin) * pctOfRange + newMin;\n  // now locate this value as a relative index in the old range\n  const pctOfOldRange = (newValue - oldMin) / (oldMax - oldMin);\n  const remapped = valueMin + pctOfOldRange * (valueMax - valueMin);\n  return remapped;\n}\n\n// We have an intensity value that is in the range of valueMin to valueMax.\n// The input value range is assumed to represent absolute intensity range oldMin to oldMax.\n// We now wish to find the new position of this intensity value\n// when the valueMin-valueMax represents absolute range newMin to newMax\n// After the remapping, the intensity value will be in the range of valueMin to valueMax.\n// For our Luts valueMin will always be 0, and valueMax will always be 255.\n// oldMin and oldMax will be the domain of the original raw data intensities.\n// newMin and newMax will be the domain of the new raw data intensities.\nfunction remapDomainForCP(\n  value: number,\n  valueMin: number,\n  valueMax: number,\n  oldMin: number,\n  oldMax: number,\n  newMin: number,\n  newMax: number\n): number {\n  const pctOfRange = (value - valueMin) / (valueMax - valueMin);\n  // find abs intensity from old range\n  const iOld = (oldMax - oldMin) * pctOfRange + oldMin;\n  // now locate this value as a relative index in the new range\n  const pctOfNewRange = (iOld - newMin) / (newMax - newMin);\n  const remapped = valueMin + pctOfNewRange * (valueMax - valueMin);\n  return remapped;\n}\n\nexport const LUT_ENTRIES = 256;\nexport const LUT_ARRAY_LENGTH = LUT_ENTRIES * 4;\n\n/**\n * @typedef {Object} ControlPoint Used for the TF (transfer function) editor GUI.\n * Need to be converted to LUT for rendering.\n * @property {number} x The X Coordinate\n * @property {number} opacity The Opacity, from 0 to 1\n * @property {Array.<number>} color The Color, 3 numbers from 0-255 for r,g,b\n */\nexport type ControlPoint = {\n  x: number;\n  opacity: number;\n  color: [number, number, number];\n};\n\nfunction controlPointToRGBA(controlPoint) {\n  return [controlPoint.color[0], controlPoint.color[1], controlPoint.color[2], Math.floor(controlPoint.opacity * 255)];\n}\n\n/**\n * @typedef {Object} Lut Used for rendering.\n * @property {Array.<number>} lut LUT_ARRAY_LENGTH element lookup table as array\n * (maps scalar intensity to a rgb color plus alpha, with each value from 0-255)\n * @property {Array.<ControlPoint>} controlPoints\n */\nexport class Lut {\n  public lut: Uint8Array;\n  public controlPoints: ControlPoint[];\n\n  constructor() {\n    this.lut = new Uint8Array(LUT_ARRAY_LENGTH);\n    this.controlPoints = [];\n    this.createFullRange();\n  }\n\n  /**\n   * Generate a piecewise linear lookup table that ramps up from 0 to 1 over the b to e domain.\n   * If e === b, then we use a step function with f(b) = 0 and f(b + 1) = 1\n   *  |\n   * 1|               +---------+-----\n   *  |              /\n   *  |             /\n   *  |            /\n   *  |           /\n   *  |          /\n   * 0+=========+---------------+-----\n   *  0         b    e         255\n   * @return {Lut}\n   * @param {number} b\n   * @param {number} e\n   */\n  createFromMinMax(b: number, e: number): Lut {\n    if (e < b) {\n      // swap\n      const tmp = e;\n      e = b;\n      b = tmp;\n    }\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n    for (let x = 0; x < lut.length / 4; ++x) {\n      lut[x * 4 + 0] = 255;\n      lut[x * 4 + 1] = 255;\n      lut[x * 4 + 2] = 255;\n      if (x > e) {\n        lut[x * 4 + 3] = 255;\n      } else if (x <= b) {\n        lut[x * 4 + 3] = 0;\n      } else {\n        if (e === b) {\n          lut[x * 4 + 3] = 255;\n        } else {\n          const a = (x - b) / (e - b);\n          lut[x * 4 + 3] = lerp(0, 255, a);\n        }\n      }\n    }\n\n    // Edge case: b and e are both out of bounds\n    if (b < 0 && e < 0) {\n      this.lut = lut;\n      this.controlPoints = [\n        { x: 0, opacity: 1, color: [255, 255, 255] },\n        { x: 255, opacity: 1, color: [255, 255, 255] },\n      ];\n      return this;\n    }\n    if (b >= 255 && e >= 255) {\n      this.lut = lut;\n      this.controlPoints = [\n        { x: 0, opacity: 0, color: [255, 255, 255] },\n        { x: 255, opacity: 0, color: [255, 255, 255] },\n      ];\n      return this;\n    }\n\n    // Generate 2 to 4 control points for a minMax LUT, from left to right\n    const controlPoints: ControlPoint[] = [];\n\n    // Add starting point at x = 0\n    let startVal = 0;\n    if (b < 0) {\n      startVal = -b / (e - b);\n    }\n    controlPoints.push({ x: 0, opacity: startVal, color: [255, 255, 255] });\n\n    // If b > 0, add another point at (b, 0)\n    if (b > 0) {\n      controlPoints.push({ x: b, opacity: 0, color: [255, 255, 255] });\n    }\n\n    // If e < 255, Add another point at (e, 1)\n    if (e < 255) {\n      if (e === b) {\n        // Use b + 0.5 as x value instead of e to create a near-vertical ramp\n        controlPoints.push({ x: b + 0.5, opacity: 1, color: [255, 255, 255] });\n      } else {\n        controlPoints.push({ x: e, opacity: 1, color: [255, 255, 255] });\n      }\n    }\n\n    // Add ending point at x = 255\n    let endVal = 1;\n    if (e > 255) {\n      endVal = (255 - b) / (e - b);\n    }\n    controlPoints.push({ x: 255, opacity: endVal, color: [255, 255, 255] });\n\n    this.lut = lut;\n    this.controlPoints = controlPoints;\n    return this;\n  }\n\n  // basically, the identity LUT with respect to opacity\n  createFullRange(): Lut {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n    // simple linear mapping for actual range\n    for (let x = 0; x < lut.length / 4; ++x) {\n      lut[x * 4 + 0] = 255;\n      lut[x * 4 + 1] = 255;\n      lut[x * 4 + 2] = 255;\n      lut[x * 4 + 3] = x;\n    }\n\n    this.lut = lut;\n    this.controlPoints = [\n      { x: 0, opacity: 0, color: [255, 255, 255] },\n      { x: 255, opacity: 1, color: [255, 255, 255] },\n    ];\n    return this;\n  }\n\n  /**\n   * Generate a Window/level lookup table\n   * @return {Lut}\n   * @param {number} wnd in 0..1 range\n   * @param {number} lvl in 0..1 range\n   */\n  createFromWindowLevel(wnd: number, lvl: number): Lut {\n    // simple linear mapping for actual range\n    const b = lvl - wnd * 0.5;\n    const e = lvl + wnd * 0.5;\n    return this.createFromMinMax(b * 255, e * 255);\n  }\n\n  // @param {Object[]} controlPoints - array of {x:number 0..255, opacity:number 0..1, color:array of 3 numbers 0..255}\n  // @return {Uint8Array} array of length 256*4 representing the rgba values of the gradient\n  createFromControlPoints(controlPoints: ControlPoint[]): Lut {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n\n    if (controlPoints.length === 0) {\n      this.lut = lut;\n      this.controlPoints = controlPoints;\n      return this;\n    }\n\n    // ensure they are sorted in ascending order of x\n    controlPoints.sort((a, b) => a.x - b.x);\n\n    // special case only one control point.\n    if (controlPoints.length === 1) {\n      const rgba = controlPointToRGBA(controlPoints[0]);\n      // lut was already filled with zeros\n      // copy val from x to 255.\n      const startx = clamp(controlPoints[0].x, 0, 255);\n      for (let x = startx; x < 256; ++x) {\n        lut[x * 4 + 0] = rgba[0];\n        lut[x * 4 + 1] = rgba[1];\n        lut[x * 4 + 2] = rgba[2];\n        lut[x * 4 + 3] = rgba[3];\n      }\n      this.lut = lut;\n      this.controlPoints = controlPoints;\n      return this;\n    }\n\n    let c0 = controlPoints[0];\n    let c1 = controlPoints[1];\n    let color0 = controlPointToRGBA(c0);\n    let color1 = controlPointToRGBA(c1);\n    let lastIndex = 1;\n    let a = 0;\n    for (let i = 0; i < 256; ++i) {\n      // find the two control points that i is between\n      while (i > c1.x) {\n        // advance control points\n        c0 = c1;\n        color0 = color1;\n        lastIndex++;\n        if (lastIndex >= controlPoints.length) {\n          // if the last control point is before 255, then we want to continue its value all the way to 255.\n          c1 = { x: 255, color: c1.color, opacity: c1.opacity };\n        } else {\n          c1 = controlPoints[lastIndex];\n        }\n        color1 = controlPointToRGBA(c1);\n      }\n      // find the lerp amount between the two control points\n      if (c1.x === c0.x) {\n        // use c1\n        a = 1.0;\n      } else {\n        a = (i - c0.x) / (c1.x - c0.x);\n      }\n      lut[i * 4 + 0] = clamp(lerp(color0[0], color1[0], a), 0, 255);\n      lut[i * 4 + 1] = clamp(lerp(color0[1], color1[1], a), 0, 255);\n      lut[i * 4 + 2] = clamp(lerp(color0[2], color1[2], a), 0, 255);\n      lut[i * 4 + 3] = clamp(lerp(color0[3], color1[3], a), 0, 255);\n    }\n\n    this.lut = lut;\n    this.controlPoints = controlPoints;\n    return this;\n  }\n\n  /**\n   * Generate an \"equalized\" lookup table\n   * @return {Lut}\n   */\n  createFromEqHistogram(histogram: Histogram): Lut {\n    const map: number[] = [];\n    for (let i = 0; i < histogram.getNumBins(); ++i) {\n      map[i] = 0;\n    }\n\n    // summed area table?\n    map[0] = histogram.getBin(0);\n    for (let i = 1; i < histogram.getNumBins(); ++i) {\n      map[i] = map[i - 1] + histogram.getBin(i);\n    }\n\n    const div = map[map.length - 1] - map[0];\n    if (div > 0) {\n      const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n      // compute lut and track control points for the piecewise linear sections\n      const lutControlPoints: ControlPoint[] = [{ x: 0, opacity: 0, color: [255, 255, 255] }];\n      lut[0] = 255;\n      lut[1] = 255;\n      lut[2] = 255;\n      lut[3] = 0;\n      let slope = 0;\n      let lastSlope = 0;\n      let opacity = 0;\n      let lastOpacity = 0;\n      for (let i = 1; i < lut.length / 4; ++i) {\n        lut[i * 4 + 0] = 255;\n        lut[i * 4 + 1] = 255;\n        lut[i * 4 + 2] = 255;\n        lastOpacity = opacity;\n        opacity = clamp(Math.round(255 * (map[i] - map[0])), 0, 255);\n        lut[i * 4 + 3] = opacity;\n\n        slope = opacity - lastOpacity;\n        // if map[i]-map[i-1] is the same as map[i+1]-map[i] then we are in a linear segment and do not need a new control point\n        if (slope != lastSlope) {\n          lutControlPoints.push({ x: i - 1, opacity: lastOpacity / 255.0, color: [255, 255, 255] });\n          lastSlope = slope;\n        }\n      }\n\n      lutControlPoints.push({ x: 255, opacity: 1, color: [255, 255, 255] });\n\n      this.lut = lut;\n      this.controlPoints = lutControlPoints;\n      return this;\n    } else {\n      // just reset to whole range in this case...?\n      return this.createFullRange();\n    }\n  }\n\n  /**\n   * Generate a lookup table with a different color per intensity value.\n   * This translates to a unique color per histogram bin with more than zero pixels.\n   * @return {Lut}\n   */\n  createLabelColors(histogram: Histogram): Lut {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n    const controlPoints: ControlPoint[] = [];\n    controlPoints.push({ x: 0, opacity: 0, color: [0, 0, 0] });\n    let lastr = 0;\n    let lastg = 0;\n    let lastb = 0;\n    let lasta = 0;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let a = 0;\n\n    // assumes exactly one bin per intensity value?\n    // skip zero!!!\n    for (let i = 1; i < histogram.getNumBins(); ++i) {\n      if (histogram.getBin(i) > 0) {\n        const rgb = getColorByChannelIndex(i);\n\n        lut[i * 4 + 0] = rgb[0];\n        lut[i * 4 + 1] = rgb[1];\n        lut[i * 4 + 2] = rgb[2];\n        lut[i * 4 + 3] = 255;\n\n        r = rgb[0];\n        g = rgb[1];\n        b = rgb[2];\n        a = 1;\n      } else {\n        // add a zero control point?\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n      }\n      // if current control point is same as last one don't add it\n      if (r !== lastr || g !== lastg || b !== lastb || a !== lasta) {\n        if (lasta === 0) {\n          controlPoints.push({ x: i - 0.5, opacity: lasta, color: [lastr, lastg, lastb] });\n        }\n        controlPoints.push({ x: i, opacity: a, color: [r, g, b] });\n        lastr = r;\n        lastg = g;\n        lastb = b;\n        lasta = a;\n      }\n    }\n\n    this.lut = lut;\n    this.controlPoints = controlPoints;\n    return this;\n  }\n\n  // since this is not a \"create\" function, it doesn't need to return the object.\n  remapDomains(oldMin: number, oldMax: number, newMin: number, newMax: number) {\n    // no attempt is made here to ensure that lut and controlPoints are internally consistent.\n    // if they start out consistent, they should end up consistent. And vice versa.\n    this.lut = remapLut(this.lut, oldMin, oldMax, newMin, newMax);\n    this.controlPoints = remapControlPoints(this.controlPoints, oldMin, oldMax, newMin, newMax);\n  }\n}\n\n// If the new max is greater than the old max, then\n// the lut's max end will move inward to the left.\n// This is another way of saying that the new max's index is greater than 255 in the old lut\n// If the new min is less than the old min, then\n// the lut's min end will move inward to the right.\n// This is another way of saying that the new min's index is less than 0 in the old lut\nexport function remapLut(lut: Uint8Array, oldMin: number, oldMax: number, newMin: number, newMax: number): Uint8Array {\n  const newLut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n  // we will find what intensity is at each index in the new range,\n  // and then try to sample the pre-existing lut as if it spans the old range.\n  // Build new lut by sampling from old lut.\n  for (let i = 0; i < LUT_ENTRIES; ++i) {\n    let iOld = remapDomain(i, 0, LUT_ENTRIES - 1, oldMin, oldMax, newMin, newMax);\n    if (iOld < 0) {\n      iOld = 0;\n    }\n    if (iOld > LUT_ENTRIES - 1) {\n      iOld = LUT_ENTRIES - 1;\n    }\n    // find the indices above and below for interpolation\n    const i0 = Math.floor(iOld);\n    const i1 = Math.ceil(iOld);\n    const pct = iOld - i0;\n\n    //console.log(`interpolating ${iOld}: ${lut[i0 * 4 + 3]}, ${lut[i1 * 4 + 3]}, ${pct}`);\n    newLut[i * 4 + 0] = Math.round(lerp(lut[i0 * 4 + 0], lut[i1 * 4 + 0], pct));\n    newLut[i * 4 + 1] = Math.round(lerp(lut[i0 * 4 + 1], lut[i1 * 4 + 1], pct));\n    newLut[i * 4 + 2] = Math.round(lerp(lut[i0 * 4 + 2], lut[i1 * 4 + 2], pct));\n    newLut[i * 4 + 3] = Math.round(lerp(lut[i0 * 4 + 3], lut[i1 * 4 + 3], pct));\n  }\n\n  return newLut;\n}\n\nexport function remapControlPoints(\n  controlPoints: ControlPoint[],\n  oldMin: number,\n  oldMax: number,\n  newMin: number,\n  newMax: number\n): ControlPoint[] {\n  const newControlPoints: ControlPoint[] = [];\n\n  // assume control point x domain 0-255 is mapped to oldMin-oldMax\n\n  // remap all cp x values.\n  // interpolate all new colors and opacities\n  // Do not clip values outside of 0-255. This is important to\n  // preserve information for remapping many consecutive times.\n  for (let i = 0; i < controlPoints.length; ++i) {\n    const cp = controlPoints[i];\n    const iOld = remapDomainForCP(cp.x, 0, LUT_ENTRIES - 1, oldMin, oldMax, newMin, newMax);\n    const newCP: ControlPoint = {\n      x: iOld,\n      opacity: cp.opacity,\n      color: [cp.color[0], cp.color[1], cp.color[2]],\n    };\n    newControlPoints.push(newCP);\n  }\n\n  return newControlPoints;\n}\n","import { Vector2, Vector3 } from \"three\";\n\nimport Channel from \"./Channel.js\";\nimport Histogram from \"./Histogram.js\";\nimport { Lut } from \"./Lut.js\";\nimport { getColorByChannelIndex } from \"./constants/colors.js\";\nimport { type IVolumeLoader, LoadSpec, type PerChannelCallback } from \"./loaders/IVolumeLoader.js\";\nimport { MAX_ATLAS_EDGE, pickLevelToLoadUnscaled } from \"./loaders/VolumeLoaderUtils.js\";\n\nexport type ImageInfo = Readonly<{\n  name: string;\n\n  /** XY size of the *original* (not downsampled) volume, in pixels */\n  originalSize: Vector3;\n  /**\n   * XY dimensions of the texture atlas used by `RayMarchedAtlasVolume` and `Atlas2DSlice`, in number of z-slice\n   * tiles (not pixels). Chosen by the loader to lay out the 3D volume in the squarest possible 2D texture atlas.\n   */\n  atlasTileDims: Vector2;\n  /** Size of the volume, in pixels */\n  volumeSize: Vector3;\n  /** Size of the currently loaded subregion, in pixels */\n  subregionSize: Vector3;\n  /** Offset of the loaded subregion into the total volume, in pixels */\n  subregionOffset: Vector3;\n  /** Size of a single *original* (not downsampled) pixel, in spatial units */\n  physicalPixelSize: Vector3;\n  /** Symbol of physical spatial unit used by `pixelSize` */\n  spatialUnit: string;\n\n  /** Number of channels in the image */\n  numChannels: number;\n  /** The names of each channel */\n  channelNames: string[];\n  /** Optional overrides to default channel colors, in 0-255 range */\n  channelColors?: [number, number, number][];\n\n  /** Number of timesteps in the time series, or 1 if the image is not a time series */\n  times: number;\n  /** Size of each timestep in temporal units */\n  timeScale: number;\n  /** Symbol of temporal unit used by `timeScale`, e.g. \"hr\" */\n  timeUnit: string;\n\n  /** Number of scale levels available for this volume */\n  numMultiscaleLevels: number;\n  /** The scale level from which this image was loaded, between `0` and `numMultiscaleLevels-1` */\n  multiscaleLevel: number;\n\n  transform: {\n    /** Translation of the volume from the center of space, in volume voxels */\n    translation: Vector3;\n    /** Rotation of the volume in Euler angles, applied in XYZ order */\n    rotation: Vector3;\n  };\n\n  /** Arbitrary additional metadata not captured by other `ImageInfo` properties */\n  userData?: Record<string, unknown>;\n}>;\n\nexport const getDefaultImageInfo = (): ImageInfo => ({\n  name: \"\",\n  originalSize: new Vector3(1, 1, 1),\n  atlasTileDims: new Vector2(1, 1),\n  volumeSize: new Vector3(1, 1, 1),\n  subregionSize: new Vector3(1, 1, 1),\n  subregionOffset: new Vector3(0, 0, 0),\n  physicalPixelSize: new Vector3(1, 1, 1),\n  spatialUnit: \"\",\n  numChannels: 0,\n  channelNames: [],\n  channelColors: [],\n  times: 1,\n  timeScale: 1,\n  timeUnit: \"\",\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n  transform: {\n    translation: new Vector3(0, 0, 0),\n    rotation: new Vector3(0, 0, 0),\n  },\n});\n\ninterface VolumeDataObserver {\n  onVolumeData: (vol: Volume, batch: number[]) => void;\n  onVolumeChannelAdded: (vol: Volume, idx: number) => void;\n}\n\n/**\n * Provide dimensions of the volume data, including dimensions for texture atlas data in which the volume z slices\n * are tiled across a single large 2d image plane.\n * @typedef {Object} ImageInfo\n * @property {string} name Base name of image\n * @property {string} [version] Schema version preferably in semver format.\n * @property {Vector2} originalSize XY size of the *original* (not downsampled) volume, in pixels\n * @property {Vector2} atlasDims Number of rows and columns of z-slice tiles (not pixels) in the texture atlas\n * @property {Vector3} volumeSize Size of the volume, in pixels\n * @property {Vector3} regionSize Size of the currently loaded subregion, in pixels\n * @property {Vector3} regionOffset Offset of the loaded subregion into the total volume, in pixels\n * @property {Vector3} pixelSize Size of a single *original* (not downsampled) pixel, in spatial units\n * @property {string} spatialUnit Symbol of physical spatial unit used by `pixelSize`\n * @property {number} numChannels Number of channels\n * @property {Array.<string>} channelNames Names of each of the channels to be rendered, in order. Unique identifier expected\n * @property {Array.<Array.<number>>} [channelColors] Colors of each of the channels to be rendered, as an ordered list of [r, g, b] arrays\n * @property {number} times Number of times (default = 1)\n * @property {number} timeScale Size of each time step in `timeUnit` units\n * @property {number} timeUnit Unit symbol for `timeScale` (e.g. min)\n * @property {Object} transform translation and rotation as arrays of 3 numbers. Translation is in voxels (to be multiplied by pixel_size values). Rotation is Euler angles in radians, appled in XYZ order.\n * @property {Object} userData Arbitrary metadata not covered by above properties\n * @example const imgdata = {\n  \"name\": \"AICS-10_5_5\",\n  \"version\": \"0.0.0\",\n  originalSize: new Vector2(306, 494),\n  atlasDims: new Vector2(10, 7),\n  volumeSize: new Vector3(204, 292, 65),\n  regionSize: new Vector3(204, 292, 65),\n  regionOffset: new Vector3(0, 0, 0),\n  pixelSize: new Vector3(0.065, 0.065, 0.29),\n  spatialUnit: \"μm\",\n  \"numChannels\": 9,\n  \"channelNames\": [\"DRAQ5\", \"EGFP\", \"Hoechst 33258\", \"TL Brightfield\", \"SEG_STRUCT\", \"SEG_Memb\", \"SEG_DNA\", \"CON_Memb\", \"CON_DNA\"],\n  \"times\": 5,\n  \"timeScale\": 1,\n  \"timeUnit\": \"hr\",\n  \"transform\": {\n    \"translation\": new Vector3(5, 5, 1),\n    \"rotation\": new Vector3(0, 3.14159, 1.57),\n  },\n  };\n */\n\n/**\n * A renderable multichannel volume image with 8-bits per channel intensity values.\n * @class\n * @param {ImageInfo} imageInfo\n */\nexport default class Volume {\n  public imageInfo: ImageInfo;\n  public loadSpec: Required<LoadSpec>;\n  public loader?: IVolumeLoader;\n  // `LoadSpec` representing the minimum data required to display what's in the viewer (subregion, channels, etc.).\n  // Used to intelligently issue load requests whenever required by a state change. Modify with `updateRequiredData`.\n  public loadSpecRequired: Required<LoadSpec>;\n  public channelLoadCallback?: PerChannelCallback;\n  public imageMetadata: Record<string, unknown>;\n  public name: string;\n\n  public channels: Channel[];\n  public numChannels: number;\n  public channelNames: string[];\n  public channelColorsDefault: [number, number, number][];\n\n  public physicalScale: number;\n  public physicalPixelSize: Vector3;\n  public physicalSize: Vector3;\n  public normPhysicalSize: Vector3;\n  public normRegionSize: Vector3;\n  public normRegionOffset: Vector3;\n  public physicalUnitSymbol: string;\n  public tickMarkPhysicalLength: number;\n\n  private volumeDataObservers: VolumeDataObserver[];\n  private loaded: boolean;\n\n  constructor(\n    imageInfo: ImageInfo = getDefaultImageInfo(),\n    loadSpec: LoadSpec = new LoadSpec(),\n    loader?: IVolumeLoader\n  ) {\n    this.loaded = false;\n    this.imageInfo = imageInfo;\n    this.name = this.imageInfo.name;\n    this.loadSpec = {\n      // Fill in defaults for optional properties\n      multiscaleLevel: 0,\n      scaleLevelBias: 0,\n      maxAtlasEdge: MAX_ATLAS_EDGE,\n      channels: Array.from({ length: this.imageInfo.numChannels }, (_val, idx) => idx),\n      ...loadSpec,\n    };\n    this.loadSpecRequired = {\n      ...this.loadSpec,\n      channels: this.loadSpec.channels.slice(),\n      subregion: this.loadSpec.subregion.clone(),\n    };\n    this.loader = loader;\n    // imageMetadata to be filled in by Volume Loaders\n    this.imageMetadata = {};\n\n    this.normRegionSize = new Vector3(1, 1, 1);\n    this.normRegionOffset = new Vector3(0, 0, 0);\n    this.physicalSize = new Vector3(1, 1, 1);\n    this.physicalScale = 1;\n    this.normPhysicalSize = new Vector3(1, 1, 1);\n    this.physicalPixelSize = this.imageInfo.physicalPixelSize;\n    this.tickMarkPhysicalLength = 1;\n    this.setVoxelSize(this.physicalPixelSize);\n\n    this.numChannels = this.imageInfo.numChannels;\n    this.channelNames = this.imageInfo.channelNames.slice();\n    this.channelColorsDefault = this.imageInfo.channelColors\n      ? this.imageInfo.channelColors.slice()\n      : this.channelNames.map((name, index) => getColorByChannelIndex(index));\n    // fill in gaps\n    if (this.channelColorsDefault.length < this.imageInfo.numChannels) {\n      for (let i = this.channelColorsDefault.length - 1; i < this.imageInfo.numChannels; ++i) {\n        this.channelColorsDefault[i] = getColorByChannelIndex(i);\n      }\n    }\n\n    this.channels = [];\n    for (let i = 0; i < this.imageInfo.numChannels; ++i) {\n      const channel = new Channel(this.channelNames[i]);\n      this.channels.push(channel);\n      // TODO pass in channel constructor...\n      channel.dims = this.imageInfo.subregionSize.toArray();\n    }\n\n    this.physicalUnitSymbol = this.imageInfo.spatialUnit;\n\n    this.volumeDataObservers = [];\n  }\n\n  private setUnloaded() {\n    this.loaded = false;\n    this.channels.forEach((channel) => {\n      channel.loaded = false;\n    });\n  }\n\n  isLoaded(): boolean {\n    return this.loaded;\n  }\n\n  updateDimensions() {\n    const { volumeSize, subregionSize, subregionOffset } = this.imageInfo;\n\n    this.setVoxelSize(this.physicalPixelSize);\n\n    this.normRegionSize = subregionSize.clone().divide(volumeSize);\n    this.normRegionOffset = subregionOffset.clone().divide(volumeSize);\n  }\n\n  /** Returns `true` iff differences between `loadSpec` and `loadSpecRequired` indicate new data *must* be loaded. */\n  private mustLoadNewData(): boolean {\n    return (\n      this.loadSpec.time !== this.loadSpecRequired.time || // time point changed\n      !this.loadSpec.subregion.containsBox(this.loadSpecRequired.subregion) || // new subregion not contained in old\n      this.loadSpecRequired.channels.some((channel) => !this.loadSpec.channels.includes(channel)) // new channel(s)\n    );\n  }\n\n  /**\n   * Returns `true` iff differences between `loadSpec` and `loadSpecRequired` indicate a new load *may* get a\n   * different scale level than is currently loaded.\n   *\n   * This checks for changes in properties that *can*, but do not *always*, change the scale level the loader picks.\n   * For example, a smaller `subregion` *may* mean a higher scale level will fit within memory constraints, or it may\n   * not. A higher `scaleLevelBias` *may* nudge the volume into a higher scale level, or we may already be at the max\n   * imposed by `multiscaleLevel`.\n   */\n  private mayLoadNewScaleLevel(): boolean {\n    return (\n      !this.loadSpec.subregion.equals(this.loadSpecRequired.subregion) ||\n      this.loadSpecRequired.maxAtlasEdge !== this.loadSpec.maxAtlasEdge ||\n      this.loadSpecRequired.multiscaleLevel !== this.loadSpec.multiscaleLevel ||\n      this.loadSpecRequired.scaleLevelBias !== this.loadSpec.scaleLevelBias\n    );\n  }\n\n  /** Call on any state update that may require new data to be loaded (subregion, enabled channels, time, etc.) */\n  async updateRequiredData(required: Partial<LoadSpec>, onChannelLoaded?: PerChannelCallback): Promise<void> {\n    this.loadSpecRequired = { ...this.loadSpecRequired, ...required };\n    let shouldReload = this.mustLoadNewData();\n\n    // If we're not reloading due to required data changes, check if we should load a new scale level\n    if (!shouldReload && this.mayLoadNewScaleLevel()) {\n      // Loaders should cache loaded dimensions so that this call blocks no more than once per valid `LoadSpec`.\n      const dims = await this.loader?.loadDims(this.loadSpecRequired);\n      if (dims) {\n        const dimsZYX = dims.map(({ shape }): [number, number, number] => [shape[2], shape[3], shape[4]]);\n        // Determine which scale level *would* be loaded, and see if it's different than what we have\n        const levelToLoad = pickLevelToLoadUnscaled(this.loadSpecRequired, dimsZYX);\n        shouldReload = this.imageInfo.multiscaleLevel !== levelToLoad;\n      }\n    }\n\n    if (shouldReload) {\n      this.loadNewData(onChannelLoaded);\n    }\n  }\n\n  /**\n   * Loads new data as specified in `this.loadSpecRequired`. Clones `loadSpecRequired` into `loadSpec` to indicate\n   * that the data that *must* be loaded is now the data that *has* been loaded.\n   */\n  private loadNewData(onChannelLoaded?: PerChannelCallback): void {\n    this.setUnloaded();\n    this.loadSpec = {\n      ...this.loadSpecRequired,\n      subregion: this.loadSpecRequired.subregion.clone(),\n    };\n    this.loader?.loadVolumeData(this, undefined, onChannelLoaded);\n  }\n\n  // we calculate the physical size of the volume (voxels*pixel_size)\n  // and then normalize to the max physical dimension\n  setVoxelSize(size: Vector3): void {\n    // only set the data if it is > 0.  zero is not an allowed value.\n    size.x = size.x > 0 ? size.x : 1.0;\n    size.y = size.y > 0 ? size.y : 1.0;\n    size.z = size.z > 0 ? size.z : 1.0;\n    this.physicalPixelSize = size;\n\n    this.physicalSize = this.imageInfo.originalSize.clone().multiply(this.physicalPixelSize);\n    // Volume is scaled such that its largest physical dimension is 1 world unit - save that dimension for conversions\n    this.physicalScale = Math.max(this.physicalSize.x, this.physicalSize.y, this.physicalSize.z);\n    // Compute the volume's max extent - scaled to max dimension.\n    this.normPhysicalSize = this.physicalSize.clone().divideScalar(this.physicalScale);\n    // While we're here, pick a power of 10 that divides into our max dimension a reasonable number of times\n    // and save it to be the length of tick marks in 3d.\n    this.tickMarkPhysicalLength = 10 ** Math.floor(Math.log10(this.physicalScale / 2));\n  }\n\n  setUnitSymbol(symbol: string): void {\n    this.physicalUnitSymbol = symbol;\n  }\n\n  /** Computes the center of the volume subset */\n  getContentCenter(): Vector3 {\n    // center point: (normRegionSize / 2 + normRegionOffset - 0.5) * normPhysicalSize;\n    return this.normRegionSize\n      .clone()\n      .divideScalar(2)\n      .add(this.normRegionOffset)\n      .subScalar(0.5)\n      .multiply(this.normPhysicalSize);\n  }\n\n  cleanup(): void {\n    // no op\n  }\n\n  getChannel(channelIndex: number): Channel {\n    return this.channels[channelIndex];\n  }\n\n  onChannelLoaded(batch: number[]): void {\n    // check to see if all channels are now loaded, and fire an event(?)\n    if (this.loadSpec.channels.every((channelIndex) => this.channels[channelIndex].loaded)) {\n      this.loaded = true;\n    }\n    batch.forEach((channelIndex) => this.channelLoadCallback?.(this, channelIndex));\n    this.volumeDataObservers.forEach((observer) => observer.onVolumeData(this, batch));\n  }\n\n  /**\n   * Assign volume data via a 2d array containing the z slices as tiles across it.  Assumes that the incoming data is consistent with the image's pre-existing imageInfo tile metadata.\n   * @param {number} channelIndex\n   * @param {Uint8Array} atlasdata\n   * @param {number} atlaswidth\n   * @param {number} atlasheight\n   */\n  setChannelDataFromAtlas(channelIndex: number, atlasdata: Uint8Array, atlaswidth: number, atlasheight: number): void {\n    this.channels[channelIndex].setBits(atlasdata, atlaswidth, atlasheight);\n    const { x, y, z } = this.imageInfo.subregionSize;\n    this.channels[channelIndex].unpackVolumeFromAtlas(x, y, z);\n    this.onChannelLoaded([channelIndex]);\n  }\n\n  // ASSUMES that this.channelData.options is already set and incoming data is consistent with it\n  /**\n   * Assign volume data as a 3d array ordered x,y,z. The xy size must be equal to tilewidth*tileheight from the imageInfo used to construct this Volume.  Assumes that the incoming data is consistent with the image's pre-existing imageInfo tile metadata.\n   * @param {number} channelIndex\n   * @param {Uint8Array} volumeData\n   */\n  setChannelDataFromVolume(channelIndex: number, volumeData: Uint8Array, range: [number, number]): void {\n    const { subregionSize, atlasTileDims } = this.imageInfo;\n    this.channels[channelIndex].setFromVolumeData(\n      volumeData,\n      subregionSize.x,\n      subregionSize.y,\n      subregionSize.z,\n      atlasTileDims.x * subregionSize.x,\n      atlasTileDims.y * subregionSize.y,\n      range[0],\n      range[1]\n    );\n    this.onChannelLoaded([channelIndex]);\n  }\n\n  // TODO: decide if this should update imageInfo or not. For now, leave imageInfo alone as the \"original\" data\n  /**\n   * Add a new channel ready to receive data from one of the setChannelDataFrom* calls.\n   * Name and color will be defaulted if not provided. For now, leave imageInfo alone as the \"original\" data\n   * @param {string} name\n   * @param {Array.<number>} color [r,g,b]\n   */\n  appendEmptyChannel(name: string, color?: [number, number, number]): number {\n    const idx = this.imageInfo.numChannels;\n    const chname = name || \"channel_\" + idx;\n    const chcolor = color || getColorByChannelIndex(idx);\n    this.numChannels += 1;\n    this.channelNames.push(chname);\n    this.channelColorsDefault.push(chcolor);\n\n    this.channels.push(new Channel(chname));\n\n    for (let i = 0; i < this.volumeDataObservers.length; ++i) {\n      this.volumeDataObservers[i].onVolumeChannelAdded(this, idx);\n    }\n\n    return idx;\n  }\n\n  /**\n   * Get a value from the volume data\n   * @return {number} the intensity value from the given channel at the given xyz location\n   * @param {number} c The channel index\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   */\n  getIntensity(c: number, x: number, y: number, z: number): number {\n    return this.channels[c].getIntensity(x, y, z);\n  }\n\n  /**\n   * Get the 256-bin histogram for the given channel\n   * @return {Histogram} the histogram\n   * @param {number} c The channel index\n   */\n  getHistogram(c: number): Histogram {\n    return this.channels[c].getHistogram();\n  }\n\n  /**\n   * Set the lut for the given channel\n   * @param {number} c The channel index\n   * @param {Array.<number>} lut The lut as a 256 element array\n   */\n  setLut(c: number, lut: Lut): void {\n    this.channels[c].setLut(lut);\n  }\n\n  /**\n   * Set the color palette for the given channel\n   * @param {number} c The channel index\n   * @param {Array.<number>} palette The colors as a 256 element array * RGBA\n   */\n  setColorPalette(c: number, palette: Uint8Array): void {\n    this.channels[c].setColorPalette(palette);\n  }\n\n  /**\n   * Set the color palette alpha multiplier for the given channel.\n   * This will blend between the ordinary color lut and this colorPalette lut.\n   * @param {number} c The channel index\n   * @param {number} alpha The alpha value as a number from 0 to 1\n   */\n  setColorPaletteAlpha(c: number, alpha: number): void {\n    this.channels[c].setColorPaletteAlpha(alpha);\n  }\n\n  /**\n   * Return the intrinsic rotation associated with this volume (radians)\n   * @return {Array.<number>} the xyz Euler angles (radians)\n   */\n  getRotation(): [number, number, number] {\n    // default axis order is XYZ\n    return this.imageInfo.transform.rotation.toArray();\n  }\n\n  /**\n   * Return the intrinsic translation (pivot center delta) associated with this volume, in normalized volume units\n   * @return {Array.<number>} the xyz translation in normalized volume units\n   */\n  getTranslation(): [number, number, number] {\n    return this.voxelsToWorldSpace(this.imageInfo.transform.translation.toArray());\n  }\n\n  /**\n   * Return a translation in normalized volume units, given a translation in image voxels\n   * @return {Array.<number>} the xyz translation in normalized volume units\n   */\n  voxelsToWorldSpace(xyz: [number, number, number]): [number, number, number] {\n    // ASSUME: translation is in original image voxels.\n    // account for pixel_size and normalized scaling in the threejs volume representation we're using\n    const m = 1.0 / Math.max(this.physicalSize.x, Math.max(this.physicalSize.y, this.physicalSize.z));\n    return new Vector3().fromArray(xyz).multiply(this.physicalPixelSize).multiplyScalar(m).toArray();\n  }\n\n  addVolumeDataObserver(o: VolumeDataObserver): void {\n    this.volumeDataObservers.push(o);\n  }\n\n  removeVolumeDataObserver(o: VolumeDataObserver): void {\n    if (o) {\n      const i = this.volumeDataObservers.indexOf(o);\n      if (i !== -1) {\n        this.volumeDataObservers.splice(i, 1);\n      }\n    }\n  }\n\n  removeAllVolumeDataObservers(): void {\n    this.volumeDataObservers = [];\n  }\n}\n","type MaybeCacheEntry = CacheEntry | null;\ntype CacheEntry = {\n  /** The data contained in this entry */\n  data: ArrayBuffer;\n  /** The previous entry in the LRU list (more recently used) */\n  prev: MaybeCacheEntry;\n  /** The next entry in the LRU list (less recently used) */\n  next: MaybeCacheEntry;\n  /** The key which indexes this entry */\n  key: string;\n};\n\n/** Default: 250MB. Should be large enough to be useful but safe for most any computer that can run the app */\nconst CACHE_MAX_SIZE_DEFAULT = 250_000_000;\n\nexport default class VolumeCache {\n  private entries: Map<string, CacheEntry>;\n\n  public readonly maxSize: number;\n  private currentSize: number;\n\n  // Ends of a linked list of entries, to track LRU and evict efficiently\n  private first: MaybeCacheEntry;\n  private last: MaybeCacheEntry;\n  // TODO implement some way to manage used vs unused (prefetched) entries so\n  // that prefetched entries which are never used don't get highest priority!\n\n  constructor(maxSize = CACHE_MAX_SIZE_DEFAULT) {\n    this.entries = new Map();\n    this.maxSize = maxSize;\n    this.currentSize = 0;\n\n    this.first = null;\n    this.last = null;\n  }\n\n  // Hide these behind getters so they're definitely never set from the outside\n  /** The size of all data arrays currently stored in this cache, in bytes. */\n  public get size() {\n    return this.currentSize;\n  }\n\n  /** The number of entries currently stored in this cache. */\n  public get numberOfEntries() {\n    return this.entries.size;\n  }\n\n  /**\n   * Removes an entry from a store but NOT the LRU list.\n   * Only call from a method with the word \"evict\" in it!\n   */\n  private removeEntryFromStore(entry: CacheEntry): void {\n    this.entries.delete(entry.key);\n    this.currentSize -= entry.data.byteLength;\n  }\n\n  /**\n   * Removes an entry from the LRU list but NOT its store.\n   * Entry must be replaced in list or removed from store, or it will never be evicted!\n   */\n  private removeEntryFromList(entry: CacheEntry): void {\n    const { prev, next } = entry;\n\n    if (prev) {\n      prev.next = next;\n    } else {\n      this.first = next;\n    }\n\n    if (next) {\n      next.prev = prev;\n    } else {\n      this.last = prev;\n    }\n  }\n\n  /** Adds an entry which is *not currently in the list* to the front of the list. */\n  private addEntryAsFirst(entry: CacheEntry): void {\n    if (this.first) {\n      this.first.prev = entry;\n    } else {\n      this.last = entry;\n    }\n    entry.next = this.first;\n    entry.prev = null;\n    this.first = entry;\n  }\n\n  /** Moves an entry which is *currently in the list* to the front of the list. */\n  private moveEntryToFirst(entry: CacheEntry): void {\n    if (entry === this.first) return;\n    this.removeEntryFromList(entry);\n    this.addEntryAsFirst(entry);\n  }\n\n  /** Evicts the least recently used entry from the cache. */\n  private evictLast(): void {\n    if (!this.last) {\n      console.error(\"VolumeCache: attempt to evict last entry from cache when no last entry is set\");\n      return;\n    }\n\n    this.removeEntryFromStore(this.last);\n\n    if (this.last.prev) {\n      this.last.prev.next = null;\n    }\n    this.last = this.last.prev;\n  }\n\n  /** Evicts a specific entry from the cache. */\n  private evict(entry: CacheEntry): void {\n    this.removeEntryFromStore(entry);\n    this.removeEntryFromList(entry);\n  }\n\n  /**\n   * Adds a new entry to the cache.\n   * @returns {boolean} a boolean indicating whether the insertion succeeded.\n   */\n  public insert(key: string, data: ArrayBuffer): boolean {\n    if (data.byteLength > this.maxSize) {\n      console.error(\"VolumeCache: attempt to insert a single entry larger than the cache\");\n      return false;\n    }\n\n    // Check if entry is already in cache\n    // This will move the entry to the front of the LRU list, if present\n    const getResult = this.getEntry(key);\n    if (getResult !== undefined) {\n      getResult.data = data;\n      return true;\n    }\n\n    // Add new entry to cache\n    const newEntry: CacheEntry = { data, prev: null, next: null, key };\n    this.addEntryAsFirst(newEntry);\n    this.entries.set(key, newEntry);\n    this.currentSize += data.byteLength;\n\n    // Evict until size is within limit\n    while (this.currentSize > this.maxSize) {\n      this.evictLast();\n    }\n    return true;\n  }\n\n  /** Internal implementation of `get`. Returns all entry metadata, not just the raw data. */\n  private getEntry(key: string): CacheEntry | undefined {\n    const result = this.entries.get(key);\n    if (result) {\n      this.moveEntryToFirst(result);\n    }\n    return result;\n  }\n\n  /** Attempts to get a single entry from the cache. */\n  public get(key: string): ArrayBuffer | undefined {\n    return this.getEntry(key)?.data;\n  }\n\n  /** Clears all cache entries whose keys begin with the specified prefix. */\n  public clearWithPrefix(prefix: string): void {\n    for (const [key, entry] of this.entries.entries()) {\n      if (key.startsWith(prefix)) {\n        this.evict(entry);\n      }\n    }\n  }\n\n  /** Clears all data from the cache. */\n  public clear(): void {\n    while (this.last) {\n      this.evictLast();\n    }\n  }\n}\n","export const defaultColors: [number, number, number][] = [\n  [255, 0, 255],\n  [255, 255, 255],\n  [0, 255, 255],\n];\n\ninterface HSVColor {\n  h: number;\n  s: number;\n  v: number;\n}\n// 0 <= (h, s, v) <= 1\n// returns 0 <= (r, g, b) <= 255 rounded to nearest integer\n// you can also pass in just one arg as an object of {h, s, v} props.\nfunction HSVtoRGB(h: number | HSVColor, s: number, v: number): [number, number, number] {\n  let r, g, b;\n  let hh = 0;\n  if (arguments.length === 1) {\n    const hsv = h as HSVColor;\n    (s = hsv.s), (v = hsv.v), (hh = hsv.h);\n  } else {\n    hh = h as number;\n  }\n  const i = Math.floor(hh * 6);\n  const f = hh * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      (r = v), (g = t), (b = p);\n      break;\n    case 1:\n      (r = q), (g = v), (b = p);\n      break;\n    case 2:\n      (r = p), (g = v), (b = t);\n      break;\n    case 3:\n      (r = p), (g = q), (b = v);\n      break;\n    case 4:\n      (r = t), (g = p), (b = v);\n      break;\n    case 5:\n      (r = v), (g = p), (b = q);\n      break;\n  }\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n\n// 1993 Park-Miller LCG\nfunction LCG(s) {\n  return function () {\n    s = Math.imul(48271, s) | 0 % 2147483647;\n    return (s & 2147483647) / 2147483648;\n  };\n}\n// Use it like so:\nconst myrand = LCG(123);\n\n// if index exceeds defaultColors start choosing random ones\n// returns [r,g,b] 0-255 range\nexport const getColorByChannelIndex = (index: number): [number, number, number] => {\n  if (!defaultColors[index]) {\n    defaultColors[index] = HSVtoRGB(myrand(), myrand() * 0.5 + 0.5, myrand() * 0.5 + 0.5);\n  }\n  return defaultColors[index];\n};\n","import { Box3, Vector3 } from \"three\";\n\nimport Volume, { ImageInfo } from \"../Volume.js\";\nimport { buildDefaultMetadata } from \"./VolumeLoaderUtils.js\";\nimport { PrefetchDirection } from \"./zarr_utils/types.js\";\n\nexport class LoadSpec {\n  time = 0;\n  /** The max size of a volume atlas that may be produced by a load. Used to pick the appropriate multiscale level. */\n  maxAtlasEdge?: number;\n  /** An optional bias added to the scale level index after the optimal level is picked based on `maxAtlasEdge`. */\n  scaleLevelBias?: number;\n  /**\n   * The max scale level to load. Even when this is specified, the loader may pick a *lower* scale level based on\n   * limits imposed by `scaleLevelBias` and `maxAtlasEdge` (or their defaults if unspecified).\n   */\n  multiscaleLevel?: number;\n  /** Subregion of volume to load. If not specified, the entire volume is loaded. Specify as floats between 0-1. */\n  subregion = new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1));\n  channels?: number[];\n}\n\nexport function loadSpecToString(spec: LoadSpec): string {\n  const { min, max } = spec.subregion;\n  return `${spec.multiscaleLevel}:${spec.time}:x(${min.x},${max.x}):y(${min.y},${max.y}):z(${min.z},${max.z})`;\n}\n\nexport class VolumeDims {\n  // shape: [t, c, z, y, x]\n  shape: number[] = [0, 0, 0, 0, 0];\n  // spacing: [t, c, z, y, x]; generally expect 1 for non-spatial dimensions\n  spacing: number[] = [1, 1, 1, 1, 1];\n  spaceUnit = \"μm\";\n  timeUnit = \"s\";\n  // TODO make this an enum?\n  dataType = \"uint8\";\n}\n\nexport type LoadedVolumeInfo = {\n  imageInfo: ImageInfo;\n  loadSpec: LoadSpec;\n};\n\n/**\n * @callback PerChannelCallback\n * @param {string} imageurl\n * @param {Volume} volume\n * @param {number} channelindex\n */\nexport type PerChannelCallback = (volume: Volume, channelIndex: number) => void;\n\n/**\n * @callback RawChannelDataCallback - allow lists of channel indices and data arrays to be passed to the callback\n * @param {number[]} channelIndex - The indices of the channels that were loaded\n * @param {Uint8Array[]} data - The raw data for each channel (renormalized to 0-255 range)\n * @param {[number, number][]} ranges - The min and max values for each channel in their original range\n * @param {[number, number]} atlasDims - The dimensions of the atlas, if the data is in an atlas format\n */\nexport type RawChannelDataCallback = (\n  channelIndex: number[],\n  data: Uint8Array[],\n  ranges: [number, number][],\n  atlasDims?: [number, number]\n) => void;\n\n/**\n * Loads volume data from a source specified by a `LoadSpec`.\n *\n * Loaders may keep state for reuse between volume creation and volume loading, and should be kept alive until volume\n * loading is complete. (See `createVolume`)\n */\nexport interface IVolumeLoader {\n  /** Use VolumeDims to further refine a `LoadSpec` for use in `createVolume` */\n  loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]>;\n\n  /**\n   * Create an empty `Volume` from a `LoadSpec`, which must be passed to `loadVolumeData` to begin loading.\n   * Optionally pass a callback to respond whenever new channel data is loaded into the volume.\n   */\n  createVolume(loadSpec: LoadSpec, onChannelLoaded?: PerChannelCallback): Promise<Volume>;\n\n  /**\n   * Begin loading a volume's data, as specified in its `LoadSpec`.\n   * Pass a callback to respond when this request loads a new channel. This callback will execute after the\n   * one assigned in `createVolume`, if any.\n   */\n  // TODO make this return a promise that resolves when loading is done?\n  // TODO this is not cancellable in the sense that any async requests initiated here are not stored\n  // in a way that they can be interrupted.\n  // TODO explicitly passing a `LoadSpec` is now rarely useful. Remove?\n  loadVolumeData(volume: Volume, loadSpec?: LoadSpec, onChannelLoaded?: PerChannelCallback): void;\n\n  /** Change which directions to prioritize when prefetching. Currently only implemented on `OMEZarrLoader`. */\n  setPrefetchPriority(directions: PrefetchDirection[]): void;\n\n  /**\n   * By default channel data can arrive out of order and at different times.\n   * This can cause the rendering to update in a way that is not visually appealing.\n   * In particular, during time series playback or Z slice playback, we would like\n   * to see all channels update at the same time.\n   * @param sync Set true to force all requested channels to load at the same time\n   */\n  syncMultichannelLoading(sync: boolean): void;\n}\n\n/** Abstract class which allows loaders to accept and return types that are easier to transfer to/from a worker. */\nexport abstract class ThreadableVolumeLoader implements IVolumeLoader {\n  /** Unchanged from `IVolumeLoader`. See that interface for details. */\n  abstract loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]>;\n\n  /**\n   * Creates an `ImageInfo` object from a `LoadSpec`, which may be passed to the `Volume` constructor to create an\n   * empty volume that can accept data loaded with the given `LoadSpec`.\n   *\n   * Also returns a new `LoadSpec` that may have been modified from the input `LoadSpec` to reflect the constraints or\n   * abilities of the loader. This new `LoadSpec` should be used when constructing the `Volume`, _not_ the original.\n   */\n  abstract createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo>;\n\n  /**\n   * Begins loading per-channel data for the volume specified by `imageInfo` and `loadSpec`.\n   *\n   * Returns a promise that resolves to reflect any modifications to `imageInfo` and/or `loadSpec` that need to be made\n   * based on this load. Actual loaded channel data is passed to `onData` as it is loaded. Depending on the format,\n   * the returned array may be in simple 3d dimension order or reflect a 2d atlas. If the latter, the dimensions of the\n   * atlas are passed as the third argument to `onData`.\n   */\n  abstract loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<Partial<LoadedVolumeInfo>>;\n\n  setPrefetchPriority(_directions: PrefetchDirection[]): void {\n    // no-op by default\n  }\n\n  syncMultichannelLoading(_sync: boolean): void {\n    // default behavior is async, to update channels as they arrive, depending on each\n    // loader's implementation details.\n  }\n\n  async createVolume(loadSpec: LoadSpec, onChannelLoaded?: PerChannelCallback): Promise<Volume> {\n    const { imageInfo, loadSpec: adjustedLoadSpec } = await this.createImageInfo(loadSpec);\n    const vol = new Volume(imageInfo, adjustedLoadSpec, this);\n    vol.channelLoadCallback = onChannelLoaded;\n    vol.imageMetadata = buildDefaultMetadata(imageInfo);\n    return vol;\n  }\n\n  async loadVolumeData(\n    volume: Volume,\n    loadSpecOverride?: LoadSpec,\n    onChannelLoaded?: PerChannelCallback\n  ): Promise<void> {\n    const onChannelData: RawChannelDataCallback = (channelIndices, dataArrays, ranges, atlasDims) => {\n      for (let i = 0; i < channelIndices.length; i++) {\n        const channelIndex = channelIndices[i];\n        const data = dataArrays[i];\n        const range = ranges[i];\n        if (atlasDims) {\n          volume.setChannelDataFromAtlas(channelIndex, data, atlasDims[0], atlasDims[1]);\n        } else {\n          volume.setChannelDataFromVolume(channelIndex, data, range);\n        }\n        onChannelLoaded?.(volume, channelIndex);\n      }\n    };\n\n    const spec = { ...loadSpecOverride, ...volume.loadSpec };\n    const { imageInfo, loadSpec } = await this.loadRawChannelData(volume.imageInfo, spec, onChannelData);\n\n    if (imageInfo) {\n      volume.imageInfo = imageInfo;\n      volume.updateDimensions();\n    }\n    volume.loadSpec = { ...loadSpec, ...spec };\n  }\n}\n","import { Box3, Vector2, Vector3 } from \"three\";\n\nimport {\n  ThreadableVolumeLoader,\n  type LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport type { ImageInfo } from \"../Volume.js\";\nimport VolumeCache from \"../VolumeCache.js\";\nimport { DATARANGE_UINT8 } from \"../types.js\";\n\ninterface PackedChannelsImage {\n  name: string;\n  channels: number[];\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\ntype JsonImageInfo = {\n  name: string;\n  version?: string;\n  images: PackedChannelsImage[];\n\n  /** X size of the *original* (not downsampled) volume, in pixels */\n  width: number;\n  /** Y size of the *original* (not downsampled) volume, in pixels */\n  height: number;\n  /** Number of rows of z-slice tiles (not pixels) in the texture atlas */\n  rows: number;\n  /** Number of columns of z-slice tiles (not pixels) in the texture atlas */\n  cols: number;\n  /** Width of a single atlas tile in pixels */\n  tile_width: number;\n  /** Height of a single atlas tile in pixels */\n  tile_height: number;\n  /** Width of the texture atlas in pixels; equivalent to `tile_width * cols` */\n  atlas_width: number;\n  /** Height of the texture atlas in pixels; equivalent to `tile_height * rows` */\n  atlas_height: number;\n  /** Number of tiles in the texture atlas (or number of z-slices in the volume segment) */\n  tiles: number;\n  /** Physical x size of a single *original* (not downsampled) pixel */\n  pixel_size_x: number;\n  /** Physical y size of a single *original* (not downsampled) pixel */\n  pixel_size_y: number;\n  /** Physical z size of a single pixel */\n  pixel_size_z: number;\n  /** Symbol of physical unit used by `pixel_size_(x|y|z)` fields */\n  pixel_size_unit?: string;\n\n  channels: number;\n  channel_names: string[];\n  channel_colors?: [number, number, number][];\n\n  times?: number;\n  time_scale?: number;\n  time_unit?: string;\n\n  // TODO should be optional?\n  transform: {\n    translation: [number, number, number];\n    rotation: [number, number, number];\n  };\n  userData?: Record<string, unknown>;\n};\n/* eslint-enable @typescript-eslint/naming-convention */\n\nconst convertImageInfo = (json: JsonImageInfo): ImageInfo => ({\n  name: json.name,\n\n  originalSize: new Vector3(json.width, json.height, json.tiles),\n  atlasTileDims: new Vector2(json.cols, json.rows),\n  volumeSize: new Vector3(json.tile_width, json.tile_height, json.tiles),\n  subregionSize: new Vector3(json.tile_width, json.tile_height, json.tiles),\n  subregionOffset: new Vector3(0, 0, 0),\n  physicalPixelSize: new Vector3(json.pixel_size_x, json.pixel_size_y, json.pixel_size_z),\n  spatialUnit: json.pixel_size_unit || \"μm\",\n\n  numChannels: json.channels,\n  channelNames: json.channel_names,\n  channelColors: json.channel_colors,\n\n  times: json.times || 1,\n  timeScale: json.time_scale || 1,\n  timeUnit: json.time_unit || \"s\",\n\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n\n  transform: {\n    translation: json.transform?.translation\n      ? new Vector3().fromArray(json.transform.translation)\n      : new Vector3(0, 0, 0),\n    rotation: json.transform?.rotation ? new Vector3().fromArray(json.transform.rotation) : new Vector3(0, 0, 0),\n  },\n\n  userData: json.userData,\n});\n\nclass JsonImageInfoLoader extends ThreadableVolumeLoader {\n  urls: string[];\n  jsonInfo: (JsonImageInfo | undefined)[];\n\n  cache?: VolumeCache;\n\n  constructor(urls: string | string[], cache?: VolumeCache) {\n    super();\n\n    if (Array.isArray(urls)) {\n      this.urls = urls;\n    } else {\n      this.urls = [urls];\n    }\n\n    this.jsonInfo = new Array(this.urls.length);\n    this.cache = cache;\n  }\n\n  private async getJsonImageInfo(time: number): Promise<JsonImageInfo> {\n    const cachedInfo = this.jsonInfo[time];\n    if (cachedInfo) {\n      return cachedInfo;\n    }\n\n    const response = await fetch(this.urls[time]);\n    const imageInfo = (await response.json()) as JsonImageInfo;\n\n    imageInfo.pixel_size_unit = imageInfo.pixel_size_unit || \"μm\";\n    imageInfo.times = imageInfo.times || this.urls.length;\n    this.jsonInfo[time] = imageInfo;\n    return imageInfo;\n  }\n\n  async loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n\n    const d = new VolumeDims();\n    d.shape = [jsonInfo.times || 1, jsonInfo.channels, jsonInfo.tiles, jsonInfo.tile_height, jsonInfo.tile_width];\n    d.spacing = [1, 1, jsonInfo.pixel_size_z, jsonInfo.pixel_size_y, jsonInfo.pixel_size_x];\n    d.spaceUnit = jsonInfo.pixel_size_unit || \"μm\";\n    d.dataType = \"uint8\";\n    return [d];\n  }\n\n  async createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n    return { imageInfo: convertImageInfo(jsonInfo), loadSpec };\n  }\n\n  async loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<{ loadSpec?: LoadSpec }> {\n    // if you need to adjust image paths prior to download,\n    // now is the time to do it.\n    // Try to figure out the urlPrefix from the LoadSpec.\n    // For this format we assume the image data is in the same directory as the json file.\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n\n    let images = jsonInfo?.images;\n    if (!images) {\n      return {};\n    }\n\n    const requestedChannels = loadSpec.channels;\n    if (requestedChannels) {\n      // If only some channels are requested, load only images which contain at least one requested channel\n      images = images.filter(({ channels }) => channels.some((ch) => ch in requestedChannels));\n    }\n\n    // This regex removes everything after the last slash, so the url had better be simple.\n    const urlPrefix = this.urls[loadSpec.time].replace(/[^/]*$/, \"\");\n    images = images.map((element) => ({ ...element, name: urlPrefix + element.name }));\n\n    const w = imageInfo.atlasTileDims.x * imageInfo.volumeSize.x;\n    const h = imageInfo.atlasTileDims.y * imageInfo.volumeSize.y;\n    const wrappedOnData = (ch: number[], data: Uint8Array[], ranges: [number, number][]) =>\n      onData(ch, data, ranges, [w, h]);\n    JsonImageInfoLoader.loadVolumeAtlasData(images, wrappedOnData, this.cache);\n\n    const adjustedLoadSpec = {\n      ...loadSpec,\n      // `subregion` and `multiscaleLevel` are unused by this loader\n      subregion: new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1)),\n      multiscaleLevel: 0,\n      // include all channels in any loaded images\n      channels: images.flatMap(({ channels }) => channels),\n    };\n    return { loadSpec: adjustedLoadSpec };\n  }\n\n  /**\n   * load per-channel volume data from a batch of image files containing the volume slices tiled across the images\n   * @param {Array.<{name:string, channels:Array.<number>}>} imageArray\n   * @param {RawChannelDataCallback} onData Per-channel callback. Called when each channel's atlased volume data is loaded\n   * @param {VolumeCache} cache\n   * @example loadVolumeAtlasData([{\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_0.png\",\n   *     \"channels\": [0, 1, 2]\n   * }, {\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_1.png\",\n   *     \"channels\": [3, 4, 5]\n   * }, {\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_2.png\",\n   *     \"channels\": [6, 7, 8]\n   * }], mycallback);\n   */\n  static loadVolumeAtlasData(\n    imageArray: PackedChannelsImage[],\n    onData: RawChannelDataCallback,\n    cache?: VolumeCache\n  ): void {\n    imageArray.forEach(async (image) => {\n      // Because the data is fetched such that one fetch returns a whole batch,\n      // if any in batch is cached then they all should be. So if any in batch is NOT cached,\n      // then we will have to do a batch request. This logic works both ways because it's all or nothing.\n      let cacheHit = true;\n      for (let j = 0; j < Math.min(image.channels.length, 4); ++j) {\n        const chindex = image.channels[j];\n        const cacheResult = cache?.get(`${image.name}/${chindex}`);\n        if (cacheResult) {\n          // all data coming from this loader is natively 8-bit\n          onData([chindex], [new Uint8Array(cacheResult)], [DATARANGE_UINT8]);\n        } else {\n          cacheHit = false;\n          // we can stop checking because we know we are going to have to fetch the whole batch\n          break;\n        }\n      }\n\n      // if all channels were in cache then we can move on to the next\n      // image (batch) without requesting\n      if (cacheHit) {\n        return;\n      }\n\n      const response = await fetch(image.name, { mode: \"cors\" });\n      const blob = await response.blob();\n      const bitmap = await createImageBitmap(blob);\n\n      const canvas = new OffscreenCanvas(bitmap.width, bitmap.height);\n      const ctx = canvas.getContext(\"2d\") as OffscreenCanvasRenderingContext2D | null;\n      if (!ctx) {\n        console.log(\"Error creating canvas 2d context for \" + image.name);\n        return;\n      }\n      ctx.globalCompositeOperation = \"copy\";\n      ctx.globalAlpha = 1.0;\n      ctx.drawImage(bitmap, 0, 0);\n      const iData = ctx.getImageData(0, 0, bitmap.width, bitmap.height);\n\n      const channelsBits: Uint8Array[] = [];\n      const length = bitmap.width * bitmap.height;\n\n      // allocate channels in batch\n      for (let ch = 0; ch < Math.min(image.channels.length, 4); ++ch) {\n        channelsBits.push(new Uint8Array(length));\n      }\n\n      // extract the data\n      for (let j = 0; j < Math.min(image.channels.length, 4); ++j) {\n        for (let px = 0; px < length; px++) {\n          channelsBits[j][px] = iData.data[px * 4 + j];\n        }\n      }\n\n      // done with `iData` and `canvas` now.\n\n      for (let ch = 0; ch < Math.min(image.channels.length, 4); ++ch) {\n        const chindex = image.channels[ch];\n        cache?.insert(`${image.name}/${chindex}`, channelsBits[ch]);\n        // NOTE: the atlas dimensions passed in here are currently unused by `JSONImageInfoLoader`\n        // all data coming from this loader is natively 8-bit\n        onData([chindex], [channelsBits[ch]], [DATARANGE_UINT8], [bitmap.width, bitmap.height]);\n      }\n    });\n  }\n}\n\nexport { JsonImageInfoLoader };\n","import { Box3, Vector3 } from \"three\";\n\nimport * as zarr from \"@zarrita/core\";\nimport { get as zarrGet, slice, Slice } from \"@zarrita/indexing\";\nimport { AbsolutePath } from \"@zarrita/storage\";\n// Importing `FetchStore` from its home subpackage (@zarrita/storage) causes errors.\n// Getting it from the top-level package means we don't get its type. This is also a bug, but it's more acceptable.\nimport { FetchStore } from \"zarrita\";\n\nimport { ImageInfo } from \"../Volume.js\";\nimport VolumeCache from \"../VolumeCache.js\";\nimport SubscribableRequestQueue from \"../utils/SubscribableRequestQueue.js\";\nimport {\n  ThreadableVolumeLoader,\n  LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport {\n  composeSubregion,\n  computePackedAtlasDims,\n  convertSubregionToPixels,\n  pickLevelToLoad,\n  unitNameToSymbol,\n} from \"./VolumeLoaderUtils.js\";\nimport ChunkPrefetchIterator from \"./zarr_utils/ChunkPrefetchIterator.js\";\nimport WrappedStore from \"./zarr_utils/WrappedStore.js\";\nimport {\n  getDimensionCount,\n  getScale,\n  getSourceChannelNames,\n  matchSourceScaleLevels,\n  orderByDimension,\n  orderByTCZYX,\n  remapAxesToTCZYX,\n} from \"./zarr_utils/utils.js\";\nimport type {\n  OMEZarrMetadata,\n  PrefetchDirection,\n  SubscriberId,\n  TCZYX,\n  ZarrSource,\n  NumericZarrArray,\n} from \"./zarr_utils/types.js\";\nimport { VolumeLoadError, VolumeLoadErrorType, wrapVolumeLoadError } from \"./VolumeLoadError.js\";\nimport { validateOMEZarrMetadata } from \"./zarr_utils/validation.js\";\n\nconst CHUNK_REQUEST_CANCEL_REASON = \"chunk request cancelled\";\n\n// returns the converted data and the original min and max values (which have been remapped to 0 and 255)\nfunction convertChannel(channelData: zarr.TypedArray<zarr.NumberDataType>): [Uint8Array, number, number] {\n  // get min and max\n  let min = channelData[0];\n  let max = channelData[0];\n  for (let i = 0; i < channelData.length; i++) {\n    const val = channelData[i];\n    if (val < min) {\n      min = val;\n    }\n    if (val > max) {\n      max = val;\n    }\n  }\n\n  if (channelData instanceof Uint8Array) {\n    return [channelData as Uint8Array, min, max];\n  }\n\n  // normalize and convert to u8\n  const u8 = new Uint8Array(channelData.length);\n  const range = max - min;\n  for (let i = 0; i < channelData.length; i++) {\n    u8[i] = ((channelData[i] - min) / range) * 255;\n  }\n\n  return [u8, min, max];\n}\n\nexport type ZarrLoaderFetchOptions = {\n  /** The max. number of requests the loader can issue at a time. Ignored if the constructor also receives a queue. */\n  concurrencyLimit?: number;\n  /**\n   * The max. number of *prefetch* requests the loader can issue at a time. Set lower than `concurrencyLimit` to ensure\n   * that prefetching leaves room in the queue for actual loads. Ignored if the constructor also receives a queue.\n   */\n  prefetchConcurrencyLimit?: number;\n  /**\n   * The max. number of chunks to prefetch outward in either direction. E.g. if a load requests chunks with z coords 3\n   * and 4 and `maxPrefetchDistance` in z is 2, the loader will prefetch similar chunks with z coords 1, 2, 5, and 6\n   * (or until it hits `maxPrefetchChunks`). Ordered TZYX.\n   */\n  maxPrefetchDistance: [number, number, number, number];\n  /** The max. number of total chunks that can be prefetched after any load. */\n  maxPrefetchChunks: number;\n  /** The initial directions to prioritize when prefetching */\n  priorityDirections?: PrefetchDirection[];\n};\n\ntype ZarrChunkFetchInfo = {\n  sourceIdx: number;\n  key: string;\n};\n\nconst DEFAULT_FETCH_OPTIONS = {\n  maxPrefetchDistance: [5, 5, 5, 5] as [number, number, number, number],\n  maxPrefetchChunks: 30,\n};\n\nclass OMEZarrLoader extends ThreadableVolumeLoader {\n  /** The ID of the subscriber responsible for \"actual loads\" (non-prefetch requests) */\n  private loadSubscriber: SubscriberId | undefined;\n  /** The ID of the subscriber responsible for prefetches, so that requests can be cancelled and reissued */\n  private prefetchSubscriber: SubscriberId | undefined;\n\n  // TODO: this property should definitely be owned by `Volume` if this loader is ever used by multiple volumes.\n  //   This may cause errors or incorrect results otherwise!\n  private maxExtent?: Box3;\n\n  private syncChannels = false;\n\n  private constructor(\n    /**\n     * Array of records, each containing the objects and metadata we need to load from one source of multiscale zarr\n     * data. See documentation on `ZarrSource` for more.\n     */\n    private sources: ZarrSource[],\n    /** Handle to a `SubscribableRequestQueue` for smart concurrency management and request cancelling/reissuing. */\n    private requestQueue: SubscribableRequestQueue,\n    /** Options to configure (pre)fetching behavior. */\n    private fetchOptions: ZarrLoaderFetchOptions = DEFAULT_FETCH_OPTIONS,\n    /** Direction(s) to prioritize when prefetching. Stored separate from `fetchOptions` since it may be mutated. */\n    private priorityDirections: PrefetchDirection[] = []\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a new `OMEZarrLoader`.\n   *\n   * @param urls The URL(s) of the OME-Zarr data to load. If `urls` is an array, the loader will attempt to find scale\n   *  levels with exactly the same size in every source. If matching level(s) are available, the loader will produce a\n   *  volume containing all channels from every provided zarr in the order they appear in `urls`. If no matching sets\n   *  of scale levels are available, creation fails.\n   * @param scenes The scene(s) to load from each URL. If `urls` is an array, `scenes` may either be an array of values\n   *  corresponding to each URL, or a single value to apply to all URLs. Default 0.\n   * @param cache A cache to use for storing fetched data. If not provided, a new cache will be created.\n   * @param queue A queue to use for managing requests. If not provided, a new queue will be created.\n   * @param fetchOptions Options to configure (pre)fetching behavior.\n   */\n  static async createLoader(\n    urls: string | string[],\n    scenes: number | number[] = 0,\n    cache?: VolumeCache,\n    queue?: SubscribableRequestQueue,\n    fetchOptions?: ZarrLoaderFetchOptions\n  ): Promise<OMEZarrLoader> {\n    // Setup queue and store, get basic metadata\n    if (!queue) {\n      queue = new SubscribableRequestQueue(fetchOptions?.concurrencyLimit, fetchOptions?.prefetchConcurrencyLimit);\n    }\n    const urlsArr = Array.isArray(urls) ? urls : [urls];\n    const scenesArr = Array.isArray(scenes) ? scenes : [scenes];\n\n    // Create one `ZarrSource` per URL\n    const sourceProms = urlsArr.map(async (url, i) => {\n      const store = new WrappedStore<RequestInit>(new FetchStore(url), cache, queue);\n      const root = zarr.root(store);\n\n      const group = await zarr\n        .open(root, { kind: \"group\" })\n        .catch(wrapVolumeLoadError(`Failed to open OME-Zarr data at ${url}`, VolumeLoadErrorType.NOT_FOUND));\n\n      // Pick scene (multiscale)\n      let scene = scenesArr[Math.min(i, scenesArr.length - 1)];\n      if (scene > group.attrs.multiscales?.length) {\n        console.warn(`WARNING: OMEZarrLoader: scene ${scene} is invalid. Using scene 0.`);\n        scene = 0;\n      }\n\n      validateOMEZarrMetadata(group.attrs, scene, urlsArr.length > 1 ? `Zarr source ${i}` : \"Zarr\");\n      const { multiscales, omero } = group.attrs as OMEZarrMetadata;\n      const multiscaleMetadata = multiscales[scene];\n\n      // Open all scale levels of multiscale\n      const lvlProms = multiscaleMetadata.datasets.map(({ path }) =>\n        zarr\n          .open(root.resolve(path), { kind: \"array\" })\n          .catch(\n            wrapVolumeLoadError(\n              `Failed to open scale level ${path} of OME-Zarr data at ${url}`,\n              VolumeLoadErrorType.NOT_FOUND\n            )\n          )\n      );\n      const scaleLevels = (await Promise.all(lvlProms)) as NumericZarrArray[];\n      const axesTCZYX = remapAxesToTCZYX(multiscaleMetadata.axes);\n\n      return {\n        scaleLevels,\n        multiscaleMetadata,\n        omeroMetadata: omero,\n        axesTCZYX,\n        channelOffset: 0,\n      } as ZarrSource;\n    });\n    const sources = await Promise.all(sourceProms);\n\n    // Set `channelOffset`s so we can match channel indices to sources\n    let channelCount = 0;\n    for (const s of sources) {\n      s.channelOffset = channelCount;\n      channelCount += s.omeroMetadata?.channels.length ?? s.scaleLevels[0].shape[s.axesTCZYX[1]];\n    }\n    // Ensure the sizes of all sources' scale levels are matched up. See this function's docs for more.\n    matchSourceScaleLevels(sources);\n    // TODO: if `matchSourceScaleLevels` returned successfully, every one of these sources' `multiscaleMetadata` is the\n    // same in every field we care about, so we only ever use the first source's `multiscaleMetadata` after this point.\n    // Should we only store one `OMEMultiscale` record total, rather than one per source?\n    const priorityDirs = fetchOptions?.priorityDirections ? fetchOptions.priorityDirections.slice() : undefined;\n    return new OMEZarrLoader(sources, queue, fetchOptions, priorityDirs);\n  }\n\n  private getUnitSymbols(): [string, string] {\n    const source = this.sources[0];\n    // Assume all spatial axes in all sources have the same units - we have no means of storing per-axis unit symbols\n    const xi = source.axesTCZYX[4];\n    const spaceUnitName = source.multiscaleMetadata.axes[xi].unit;\n    const spaceUnitSymbol = unitNameToSymbol(spaceUnitName) || spaceUnitName || \"\";\n\n    const ti = source.axesTCZYX[0];\n    const timeUnitName = ti > -1 ? source.multiscaleMetadata.axes[ti].unit : undefined;\n    const timeUnitSymbol = unitNameToSymbol(timeUnitName) || timeUnitName || \"\";\n\n    return [spaceUnitSymbol, timeUnitSymbol];\n  }\n\n  private getLevelShapesZYX(): [number, number, number][] {\n    const source = this.sources[0];\n    const [z, y, x] = source.axesTCZYX.slice(-3);\n    return source.scaleLevels.map(({ shape }) => [z === -1 ? 1 : shape[z], shape[y], shape[x]]);\n  }\n\n  private getScale(level: number): TCZYX<number> {\n    return getScale(this.sources[0].multiscaleMetadata.datasets[level], this.sources[0].axesTCZYX);\n  }\n\n  private orderByDimension<T>(valsTCZYX: TCZYX<T>, sourceIdx = 0): T[] {\n    return orderByDimension(valsTCZYX, this.sources[sourceIdx].axesTCZYX);\n  }\n\n  private orderByTCZYX<T>(valsDimension: T[], defaultValue: T, sourceIdx = 0): TCZYX<T> {\n    return orderByTCZYX(valsDimension, this.sources[sourceIdx].axesTCZYX, defaultValue);\n  }\n\n  /**\n   * Converts a volume channel index to the index of its zarr source and its channel index within that zarr.\n   * e.g., if the loader has 2 sources, the first with 3 channels and the second with 2, then `matchChannelToSource(4)`\n   * returns `[1, 1]` (the second channel of the second source).\n   */\n  private matchChannelToSource(absoluteChannelIndex: number): { sourceIndex: number; channelIndexInSource: number } {\n    const lastSrcIdx = this.sources.length - 1;\n    const lastSrc = this.sources[lastSrcIdx];\n    const lastSrcNumChannels = lastSrc.scaleLevels[0].shape[lastSrc.axesTCZYX[1]];\n\n    const maxChannelIndex = lastSrc.channelOffset + lastSrcNumChannels;\n    if (absoluteChannelIndex > maxChannelIndex) {\n      throw new VolumeLoadError(\n        `Volume channel index ${absoluteChannelIndex} out of range (${maxChannelIndex} channels available)`,\n        { type: VolumeLoadErrorType.INVALID_METADATA }\n      );\n    }\n\n    const firstGreaterIdx = this.sources.findIndex((src) => src.channelOffset > absoluteChannelIndex);\n    const sourceIndex = firstGreaterIdx === -1 ? lastSrcIdx : firstGreaterIdx - 1;\n    const channelIndexInSource = absoluteChannelIndex - this.sources[sourceIndex].channelOffset;\n    return { sourceIndex, channelIndexInSource };\n  }\n\n  /**\n   * Change which directions to prioritize when prefetching. All chunks will be prefetched in these directions before\n   * any chunks are prefetched in any other directions.\n   */\n  setPrefetchPriority(directions: PrefetchDirection[]): void {\n    this.priorityDirections = directions;\n  }\n\n  syncMultichannelLoading(sync: boolean): void {\n    this.syncChannels = sync;\n  }\n\n  loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const [spaceUnit, timeUnit] = this.getUnitSymbols();\n    // Compute subregion size so we can factor that in\n    const maxExtent = this.maxExtent ?? new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1));\n    const subregion = composeSubregion(loadSpec.subregion, maxExtent);\n    const regionSize = subregion.getSize(new Vector3());\n    const regionArr = [1, 1, regionSize.z, regionSize.y, regionSize.x];\n\n    const result = this.sources[0].scaleLevels.map((level, i) => {\n      const scale = this.getScale(i);\n      const dims = new VolumeDims();\n\n      dims.spaceUnit = spaceUnit;\n      dims.timeUnit = timeUnit;\n      dims.shape = this.orderByTCZYX(level.shape, 1).map((val, idx) => Math.max(Math.ceil(val * regionArr[idx]), 1));\n      dims.spacing = this.orderByTCZYX(scale, 1);\n\n      return dims;\n    });\n\n    return Promise.resolve(result);\n  }\n\n  createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    // We ensured most info (dims, chunks, etc.) matched between sources earlier, so we can just use the first source.\n    const source0 = this.sources[0];\n    const [t, , z, y, x] = source0.axesTCZYX;\n    const hasT = t > -1;\n    const hasZ = z > -1;\n\n    const shape0 = source0.scaleLevels[0].shape;\n    const levelToLoad = pickLevelToLoad(loadSpec, this.getLevelShapesZYX());\n    const shapeLv = source0.scaleLevels[levelToLoad].shape;\n\n    const [spatialUnit, timeUnit] = this.getUnitSymbols();\n\n    // Now we care about other sources: # of channels is the `channelOffset` of the last source plus its # of channels\n    const sourceLast = this.sources[this.sources.length - 1];\n    const cLast = sourceLast.axesTCZYX[1];\n    const lastHasC = cLast > -1;\n    const numChannels = sourceLast.channelOffset + (lastHasC ? sourceLast.scaleLevels[levelToLoad].shape[cLast] : 1);\n    // we need to make sure that the corresponding matched shapes\n    // use the min size of T\n    let times = 1;\n    if (hasT) {\n      times = shapeLv[t];\n      for (let i = 0; i < this.sources.length; i++) {\n        const shape = this.sources[i].scaleLevels[levelToLoad].shape;\n        const tindex = this.sources[i].axesTCZYX[0];\n        if (shape[tindex] < times) {\n          console.warn(\"The number of time points is not consistent across sources: \", shape[tindex], times);\n          times = shape[tindex];\n        }\n      }\n    }\n\n    if (!this.maxExtent) {\n      this.maxExtent = loadSpec.subregion.clone();\n    }\n    const pxDims0 = convertSubregionToPixels(\n      loadSpec.subregion,\n      new Vector3(shape0[x], shape0[y], hasZ ? shape0[z] : 1)\n    );\n    const pxSize0 = pxDims0.getSize(new Vector3());\n    const pxDimsLv = convertSubregionToPixels(\n      loadSpec.subregion,\n      new Vector3(shapeLv[x], shapeLv[y], hasZ ? shapeLv[z] : 1)\n    );\n    const pxSizeLv = pxDimsLv.getSize(new Vector3());\n\n    const atlasTileDims = computePackedAtlasDims(pxSizeLv.z, pxSizeLv.x, pxSizeLv.y);\n\n    // Channel names is the other place where we have to check every source\n    // Track which channel names we've seen so far, so that we can rename them to avoid name collisions\n    const channelNamesMap = new Map<string, number>();\n    const channelNames = this.sources.flatMap((src) => {\n      const sourceChannelNames = getSourceChannelNames(src);\n\n      // Resolve name collisions\n      return sourceChannelNames.map((channelName) => {\n        const numMatchingChannels = channelNamesMap.get(channelName);\n\n        if (numMatchingChannels !== undefined) {\n          // If e.g. we've seen channel \"Membrane\" once before, rename this one to \"Membrane (1)\"\n          channelNamesMap.set(channelName, numMatchingChannels + 1);\n          return `${channelName} (${numMatchingChannels})`;\n        } else {\n          channelNamesMap.set(channelName, 1);\n          return channelName;\n        }\n      });\n    });\n\n    // for physicalPixelSize, we use the scale of the first level\n    const scale5d = this.getScale(0);\n    // assume that ImageInfo wants the timeScale of level 0\n    const timeScale = hasT ? scale5d[t] : 1;\n\n    const imgdata: ImageInfo = {\n      name: source0.omeroMetadata?.name || \"Volume\",\n\n      originalSize: pxSize0,\n      atlasTileDims,\n      volumeSize: pxSizeLv,\n      subregionSize: pxSizeLv.clone(),\n      subregionOffset: new Vector3(0, 0, 0),\n      physicalPixelSize: new Vector3(scale5d[x], scale5d[y], hasZ ? scale5d[z] : Math.min(scale5d[x], scale5d[y])),\n      spatialUnit,\n\n      numChannels,\n      channelNames,\n      times,\n      timeScale,\n      timeUnit,\n      numMultiscaleLevels: source0.scaleLevels.length,\n      multiscaleLevel: levelToLoad,\n\n      transform: {\n        translation: new Vector3(0, 0, 0),\n        rotation: new Vector3(0, 0, 0),\n      },\n    };\n\n    // The `LoadSpec` passed in at this stage should represent the subset which this loader loads, not that\n    // which the volume contains. The volume contains the full extent of the subset recognized by this loader.\n    const fullExtentLoadSpec: LoadSpec = {\n      ...loadSpec,\n      subregion: new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1)),\n    };\n\n    return Promise.resolve({ imageInfo: imgdata, loadSpec: fullExtentLoadSpec });\n  }\n\n  private async prefetchChunk(\n    scaleLevel: NumericZarrArray,\n    coords: TCZYX<number>,\n    subscriber: SubscriberId\n  ): Promise<void> {\n    const { store, path } = scaleLevel;\n    const separator = path.endsWith(\"/\") ? \"\" : \"/\";\n    const key = path + separator + this.orderByDimension(coords).join(\"/\");\n    // Calling `get` and doing nothing with the result still triggers a cache check, fetch, and insertion\n    await store\n      .get(key as AbsolutePath, { subscriber, isPrefetch: true })\n      .catch(\n        wrapVolumeLoadError(\n          `Unable to prefetch chunk with key ${key}`,\n          VolumeLoadErrorType.LOAD_DATA_FAILED,\n          CHUNK_REQUEST_CANCEL_REASON\n        )\n      );\n  }\n\n  /** Reads a list of chunk keys requested by a `loadVolumeData` call and sets up appropriate prefetch requests. */\n  private beginPrefetch(keys: ZarrChunkFetchInfo[], scaleLevel: number): void {\n    // Convert keys to arrays of coords\n    const chunkCoords = keys.map(({ sourceIdx, key }) => {\n      const numDims = getDimensionCount(this.sources[sourceIdx].axesTCZYX);\n      const coordsInDimensionOrder = key\n        .trim()\n        .split(\"/\")\n        .slice(-numDims)\n        .filter((s) => s !== \"\")\n        .map((s) => parseInt(s, 10));\n      const sourceCoords = this.orderByTCZYX(coordsInDimensionOrder, 0, sourceIdx);\n      // Convert source channel index to absolute channel index for `ChunkPrefetchIterator`'s benefit\n      // (we match chunk coordinates output from `ChunkPrefetchIterator` back to sources below)\n      sourceCoords[1] += this.sources[sourceIdx].channelOffset;\n      return sourceCoords;\n    });\n\n    // Get number of chunks per dimension in every source array\n    const chunkDimsTCZYX = this.sources.map((src) => {\n      const level = src.scaleLevels[scaleLevel];\n      const chunkDimsUnordered = level.shape.map((dim, idx) => Math.ceil(dim / level.chunks[idx]));\n      return this.orderByTCZYX(chunkDimsUnordered, 1);\n    });\n    // `ChunkPrefetchIterator` yields chunk coordinates in order of roughly how likely they are to be loaded next\n    const prefetchIterator = new ChunkPrefetchIterator(\n      chunkCoords,\n      this.fetchOptions.maxPrefetchDistance,\n      chunkDimsTCZYX,\n      this.priorityDirections\n    );\n\n    const subscriber = this.requestQueue.addSubscriber();\n    let prefetchCount = 0;\n    for (const chunk of prefetchIterator) {\n      if (prefetchCount >= this.fetchOptions.maxPrefetchChunks) {\n        break;\n      }\n      // Match absolute channel coordinate back to source index and channel index\n      const { sourceIndex, channelIndexInSource } = this.matchChannelToSource(chunk[1]);\n      const sourceScaleLevel = this.sources[sourceIndex].scaleLevels[scaleLevel];\n      chunk[1] = channelIndexInSource;\n      this.prefetchChunk(sourceScaleLevel, chunk, subscriber);\n      prefetchCount++;\n    }\n\n    // Clear out old prefetch requests (requests which also cover this new prefetch will be preserved)\n    if (this.prefetchSubscriber !== undefined) {\n      this.requestQueue.removeSubscriber(this.prefetchSubscriber, CHUNK_REQUEST_CANCEL_REASON);\n    }\n    this.prefetchSubscriber = subscriber;\n  }\n\n  private updateImageInfoForLoad(imageInfo: ImageInfo, loadSpec: LoadSpec): ImageInfo {\n    // Apply `this.maxExtent` to subregion, if it exists\n    const maxExtent = this.maxExtent ?? new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1));\n    const subregion = composeSubregion(loadSpec.subregion, maxExtent);\n\n    // Pick the level to load based on the subregion size\n    const multiscaleLevel = pickLevelToLoad({ ...loadSpec, subregion }, this.getLevelShapesZYX());\n    const array0Shape = this.sources[0].scaleLevels[multiscaleLevel].shape;\n\n    // Convert subregion to volume voxels\n    const [z, y, x] = this.sources[0].axesTCZYX.slice(2);\n    const regionPx = convertSubregionToPixels(\n      subregion,\n      new Vector3(array0Shape[x], array0Shape[y], z === -1 ? 1 : array0Shape[z])\n    );\n\n    // Derive other image info properties from subregion and level to load\n    const subregionSize = regionPx.getSize(new Vector3());\n    const atlasTileDims = computePackedAtlasDims(subregionSize.z, subregionSize.x, subregionSize.y);\n    const volumeExtent = convertSubregionToPixels(\n      maxExtent,\n      new Vector3(array0Shape[x], array0Shape[y], z === -1 ? 1 : array0Shape[z])\n    );\n    const volumeSize = volumeExtent.getSize(new Vector3());\n\n    return {\n      ...imageInfo,\n      atlasTileDims,\n      volumeSize,\n      subregionSize,\n      subregionOffset: regionPx.min,\n      multiscaleLevel,\n    };\n  }\n\n  loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<{ imageInfo: ImageInfo }> {\n    // This seemingly useless line keeps a stable local copy of `syncChannels` which the async closures below capture\n    // so that changes to `this.syncChannels` don't affect the behavior of loads in progress.\n    const syncChannels = this.syncChannels;\n\n    const updatedImageInfo = this.updateImageInfoForLoad(imageInfo, loadSpec);\n    const { numChannels, multiscaleLevel } = updatedImageInfo;\n    const channelIndexes = loadSpec.channels ?? Array.from({ length: numChannels }, (_, i) => i);\n\n    const subscriber = this.requestQueue.addSubscriber();\n\n    // Prefetch housekeeping: we want to save keys involved in this load to prefetch later\n    const keys: ZarrChunkFetchInfo[] = [];\n    const reportKeyBase = (sourceIdx: number, key: string, sub: SubscriberId) => {\n      if (sub === subscriber) {\n        keys.push({ sourceIdx, key });\n      }\n    };\n\n    const resultChannelIndices: number[] = [];\n    const resultChannelData: Uint8Array[] = [];\n    const resultChannelRanges: [number, number][] = [];\n\n    const channelPromises = channelIndexes.map(async (ch) => {\n      // Build slice spec\n      const min = updatedImageInfo.subregionOffset;\n      const max = min.clone().add(updatedImageInfo.subregionSize);\n      const { sourceIndex: sourceIdx, channelIndexInSource: sourceCh } = this.matchChannelToSource(ch);\n      const unorderedSpec = [loadSpec.time, sourceCh, slice(min.z, max.z), slice(min.y, max.y), slice(min.x, max.x)];\n\n      const level = this.sources[sourceIdx].scaleLevels[multiscaleLevel];\n      const sliceSpec = this.orderByDimension(unorderedSpec as TCZYX<number | Slice>, sourceIdx);\n      const reportKey = (key: string, sub: SubscriberId) => reportKeyBase(sourceIdx, key, sub);\n\n      const result = await zarrGet(level, sliceSpec, { opts: { subscriber, reportKey } }).catch(\n        wrapVolumeLoadError(\n          \"Could not load OME-Zarr volume data\",\n          VolumeLoadErrorType.LOAD_DATA_FAILED,\n          CHUNK_REQUEST_CANCEL_REASON\n        )\n      );\n\n      const converted = convertChannel(result.data);\n      if (syncChannels) {\n        resultChannelData.push(converted[0]);\n        resultChannelIndices.push(ch);\n        resultChannelRanges.push([converted[1], converted[2]]);\n      } else {\n        onData([ch], [converted[0]], [[converted[1], converted[2]]]);\n      }\n    });\n\n    // Cancel any in-flight requests from previous loads that aren't useful to this one\n    if (this.loadSubscriber !== undefined) {\n      this.requestQueue.removeSubscriber(this.loadSubscriber, CHUNK_REQUEST_CANCEL_REASON);\n    }\n    this.loadSubscriber = subscriber;\n\n    this.beginPrefetch(keys, multiscaleLevel);\n\n    Promise.all(channelPromises).then(() => {\n      if (syncChannels) {\n        onData(resultChannelIndices, resultChannelData, resultChannelRanges);\n      }\n      this.requestQueue.removeSubscriber(subscriber, CHUNK_REQUEST_CANCEL_REASON);\n    });\n    return Promise.resolve({ imageInfo: updatedImageInfo });\n  }\n}\n\nexport { OMEZarrLoader };\n","import { Box3, Vector3 } from \"three\";\n\nimport {\n  ThreadableVolumeLoader,\n  type LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport { computePackedAtlasDims } from \"./VolumeLoaderUtils.js\";\nimport { ImageInfo } from \"../Volume.js\";\nimport { DATARANGE_UINT8 } from \"../types.js\";\n\n// this is the form in which a 4D numpy array arrives as converted\n// by jupyterlab into a js object.\n// This loader does not yet support multiple time samples.\nexport type RawArrayData = {\n  // expected to be \"uint8\" always\n  dtype: \"uint8\";\n  // [c,z,y,x]\n  shape: [number, number, number, number];\n  // the bits (assumed uint8!!)\n  buffer: DataView;\n};\n\n// minimal metadata for visualization\nexport type RawArrayInfo = {\n  name: string;\n  sizeX: number;\n  sizeY: number;\n  sizeZ: number;\n  sizeC: number;\n  physicalPixelSize: [number, number, number];\n  spatialUnit: string;\n  channelNames: string[];\n  userData?: Record<string, unknown>;\n};\n\nexport interface RawArrayLoaderOptions {\n  data: RawArrayData;\n  metadata: RawArrayInfo;\n}\n\nconst convertImageInfo = (json: RawArrayInfo): ImageInfo => ({\n  name: json.name,\n\n  // assumption: the data is already sized to fit in our viewer's preferred\n  // memory footprint (a tiled atlas texture as of this writing)\n  originalSize: new Vector3(json.sizeX, json.sizeY, json.sizeZ),\n  atlasTileDims: computePackedAtlasDims(json.sizeZ, json.sizeX, json.sizeY),\n  volumeSize: new Vector3(json.sizeX, json.sizeY, json.sizeZ),\n  subregionSize: new Vector3(json.sizeX, json.sizeY, json.sizeZ),\n  subregionOffset: new Vector3(0, 0, 0),\n  physicalPixelSize: new Vector3(json.physicalPixelSize[0], json.physicalPixelSize[1], json.physicalPixelSize[2]),\n  spatialUnit: json.spatialUnit || \"μm\",\n\n  numChannels: json.sizeC,\n  channelNames: json.channelNames,\n  channelColors: undefined, //json.channelColors,\n\n  times: 1,\n  timeScale: 1,\n  timeUnit: \"s\",\n\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n\n  transform: {\n    translation: new Vector3(0, 0, 0),\n    rotation: new Vector3(0, 0, 0),\n  },\n\n  userData: json.userData,\n});\n\nclass RawArrayLoader extends ThreadableVolumeLoader {\n  data: RawArrayData;\n  jsonInfo: RawArrayInfo;\n\n  constructor(rawData: RawArrayData, rawDataInfo: RawArrayInfo) {\n    super();\n    this.jsonInfo = rawDataInfo;\n    this.data = rawData;\n    // check consistent dims\n    if (\n      this.data.shape[0] !== this.jsonInfo.sizeC ||\n      this.data.shape[1] !== this.jsonInfo.sizeZ ||\n      this.data.shape[2] !== this.jsonInfo.sizeY ||\n      this.data.shape[3] !== this.jsonInfo.sizeX\n    ) {\n      throw new Error(\"RawArrayLoader: data shape does not match metadata\");\n    }\n  }\n\n  async loadDims(_loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const jsonInfo = this.jsonInfo;\n\n    const d = new VolumeDims();\n    d.shape = [1, jsonInfo.sizeC, jsonInfo.sizeZ, jsonInfo.sizeY, jsonInfo.sizeX];\n    d.spacing = [1, 1, jsonInfo.physicalPixelSize[2], jsonInfo.physicalPixelSize[1], jsonInfo.physicalPixelSize[0]];\n    d.spaceUnit = jsonInfo.spatialUnit || \"μm\";\n    d.dataType = \"uint8\";\n    return [d];\n  }\n\n  async createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    return { imageInfo: convertImageInfo(this.jsonInfo), loadSpec };\n  }\n\n  async loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<{ loadSpec?: LoadSpec }> {\n    const requestedChannels = loadSpec.channels;\n\n    for (let chindex = 0; chindex < imageInfo.numChannels; ++chindex) {\n      if (requestedChannels && requestedChannels.length > 0 && !requestedChannels.includes(chindex)) {\n        continue;\n      }\n      const volSizeBytes = this.data.shape[3] * this.data.shape[2] * this.data.shape[1]; // x*y*z pixels * 1 byte/pixel\n      const channelData = new Uint8Array(this.data.buffer.buffer, chindex * volSizeBytes, volSizeBytes);\n      // all data coming from this loader is natively 8-bit\n      onData([chindex], [channelData], [DATARANGE_UINT8]);\n    }\n\n    const adjustedLoadSpec = {\n      ...loadSpec,\n      // `subregion` and `multiscaleLevel` are unused by this loader\n      subregion: new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1)),\n      multiscaleLevel: 0,\n    };\n    return { loadSpec: adjustedLoadSpec };\n  }\n}\n\nexport { RawArrayLoader };\n","import { fromUrl } from \"geotiff\";\nimport { Vector3 } from \"three\";\n\nimport {\n  ThreadableVolumeLoader,\n  LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport { computePackedAtlasDims } from \"./VolumeLoaderUtils.js\";\nimport { VolumeLoadError, VolumeLoadErrorType, wrapVolumeLoadError } from \"./VolumeLoadError.js\";\nimport type { ImageInfo } from \"../Volume.js\";\n\nfunction prepareXML(xml: string): string {\n  // trim trailing unicode zeros?\n  // eslint-disable-next-line no-control-regex\n  const expr = /[\\u0000]$/g;\n  return xml.trim().replace(expr, \"\").trim();\n}\n\nfunction getOME(xml: string): Element {\n  const parser = new DOMParser();\n  try {\n    const xmlDoc = parser.parseFromString(xml, \"text/xml\");\n    return xmlDoc.getElementsByTagName(\"OME\")[0];\n  } catch (e) {\n    throw new VolumeLoadError(\"Could not find OME metadata in TIFF file\", {\n      type: VolumeLoadErrorType.INVALID_METADATA,\n      cause: e,\n    });\n  }\n}\n\nclass OMEDims {\n  sizex = 0;\n  sizey = 0;\n  sizez = 1;\n  sizec = 1;\n  sizet = 1;\n  unit = \"\";\n  pixeltype = \"\";\n  dimensionorder = \"\";\n  pixelsizex = 1;\n  pixelsizey = 1;\n  pixelsizez = 1;\n  channelnames: string[] = [];\n}\n\nfunction getAttributeOrError(el: Element, attr: string): string {\n  const val = el.getAttribute(attr);\n  if (val === null) {\n    throw new VolumeLoadError(`Missing attribute ${attr} in OME-TIFF metadata`, {\n      type: VolumeLoadErrorType.INVALID_METADATA,\n    });\n  }\n  return val;\n}\n\nfunction getOMEDims(imageEl: Element): OMEDims {\n  const dims = new OMEDims();\n\n  const pixelsEl = imageEl.getElementsByTagName(\"Pixels\")[0];\n  dims.sizex = Number(getAttributeOrError(pixelsEl, \"SizeX\"));\n  dims.sizey = Number(getAttributeOrError(pixelsEl, \"SizeY\"));\n  dims.sizez = Number(pixelsEl.getAttribute(\"SizeZ\"));\n  dims.sizec = Number(pixelsEl.getAttribute(\"SizeC\"));\n  dims.sizet = Number(pixelsEl.getAttribute(\"SizeT\"));\n  dims.unit = pixelsEl.getAttribute(\"PhysicalSizeXUnit\") || \"\";\n  dims.pixeltype = pixelsEl.getAttribute(\"Type\") || \"\";\n  dims.dimensionorder = pixelsEl.getAttribute(\"DimensionOrder\") || \"XYZCT\";\n  dims.pixelsizex = Number(pixelsEl.getAttribute(\"PhysicalSizeX\"));\n  dims.pixelsizey = Number(pixelsEl.getAttribute(\"PhysicalSizeY\"));\n  dims.pixelsizez = Number(pixelsEl.getAttribute(\"PhysicalSizeZ\"));\n  const channelsEls = pixelsEl.getElementsByTagName(\"Channel\");\n  for (let i = 0; i < channelsEls.length; ++i) {\n    const name = channelsEls[i].getAttribute(\"Name\");\n    const id = channelsEls[i].getAttribute(\"ID\");\n    dims.channelnames.push(name ? name : id ? id : \"Channel\" + i);\n  }\n\n  return dims;\n}\n\nconst getBytesPerSample = (type: string): number => (type === \"uint8\" ? 1 : type === \"uint16\" ? 2 : 4);\n\n// Despite the class `TiffLoader` extends, this loader is not threadable, since geotiff internally uses features that\n// aren't available on workers. It uses its own specialized workers anyways.\nclass TiffLoader extends ThreadableVolumeLoader {\n  url: string;\n  dims?: OMEDims;\n\n  constructor(url: string) {\n    super();\n    this.url = url;\n  }\n\n  private async loadOmeDims(): Promise<OMEDims> {\n    if (!this.dims) {\n      const tiff = await fromUrl(this.url, { allowFullFile: true }).catch(\n        wrapVolumeLoadError(`Could not open TIFF file at ${this.url}`, VolumeLoadErrorType.NOT_FOUND)\n      );\n      // DO NOT DO THIS, ITS SLOW\n      // const imagecount = await tiff.getImageCount();\n      // read the FIRST image\n      const image = await tiff\n        .getImage()\n        .catch(wrapVolumeLoadError(\"Failed to open TIFF image\", VolumeLoadErrorType.NOT_FOUND));\n\n      const tiffimgdesc = prepareXML(image.getFileDirectory().ImageDescription);\n      const omeEl = getOME(tiffimgdesc);\n\n      const image0El = omeEl.getElementsByTagName(\"Image\")[0];\n      this.dims = getOMEDims(image0El);\n    }\n    return this.dims;\n  }\n\n  async loadDims(_loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const dims = await this.loadOmeDims();\n\n    const d = new VolumeDims();\n    d.shape = [dims.sizet, dims.sizec, dims.sizez, dims.sizey, dims.sizex];\n    d.spacing = [1, 1, dims.pixelsizez, dims.pixelsizey, dims.pixelsizex];\n    d.spaceUnit = dims.unit ? dims.unit : \"micron\";\n    d.dataType = dims.pixeltype ? dims.pixeltype : \"uint8\";\n    return [d];\n  }\n\n  async createImageInfo(_loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    const dims = await this.loadOmeDims();\n    // compare with sizex, sizey\n    //const width = image.getWidth();\n    //const height = image.getHeight();\n\n    // TODO allow user setting of this downsampling info?\n    // TODO allow ROI selection: range of x,y,z,c for a given t\n    const atlasDims = computePackedAtlasDims(dims.sizez, dims.sizex, dims.sizey);\n    // fit tiles to max of 2048x2048?\n    const targetSize = 2048;\n    const tilesizex = Math.floor(targetSize / atlasDims.x);\n    const tilesizey = Math.floor(targetSize / atlasDims.y);\n\n    // load tiff and check metadata\n\n    const imgdata: ImageInfo = {\n      name: \"TEST\",\n\n      originalSize: new Vector3(dims.sizex, dims.sizey, dims.sizez),\n      atlasTileDims: atlasDims,\n      volumeSize: new Vector3(tilesizex, tilesizey, dims.sizez),\n      subregionSize: new Vector3(tilesizex, tilesizey, dims.sizez),\n      subregionOffset: new Vector3(0, 0, 0),\n      physicalPixelSize: new Vector3(dims.pixelsizex, dims.pixelsizey, dims.pixelsizez),\n      spatialUnit: dims.unit || \"\",\n\n      numChannels: dims.sizec,\n      channelNames: dims.channelnames,\n\n      times: dims.sizet,\n      timeScale: 1,\n      timeUnit: \"\",\n\n      numMultiscaleLevels: 1,\n      multiscaleLevel: 0,\n\n      transform: {\n        translation: new Vector3(0, 0, 0),\n        rotation: new Vector3(0, 0, 0),\n      },\n    };\n\n    // This loader uses no fields from `LoadSpec`. Initialize volume with defaults.\n    return { imageInfo: imgdata, loadSpec: new LoadSpec() };\n  }\n\n  async loadRawChannelData(\n    imageInfo: ImageInfo,\n    _loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<Record<string, never>> {\n    const dims = await this.loadOmeDims();\n\n    // do each channel on a worker?\n    for (let channel = 0; channel < imageInfo.numChannels; ++channel) {\n      const params = {\n        channel: channel,\n        // these are target xy sizes for the in-memory volume data\n        // they may or may not be the same size as original xy sizes\n        tilesizex: imageInfo.volumeSize.x,\n        tilesizey: imageInfo.volumeSize.y,\n        sizec: imageInfo.numChannels,\n        sizez: imageInfo.volumeSize.z,\n        dimensionOrder: dims.dimensionorder,\n        bytesPerSample: getBytesPerSample(dims.pixeltype),\n        url: this.url,\n      };\n      const worker = new Worker(new URL(\"../workers/FetchTiffWorker\", import.meta.url));\n      worker.onmessage = (e) => {\n        const u8 = e.data.data;\n        const channel = e.data.channel;\n        const range = e.data.range;\n        onData([channel], [u8], [range]);\n        worker.terminate();\n      };\n      worker.onerror = (e) => {\n        alert(\"Error: Line \" + e.lineno + \" in \" + e.filename + \": \" + e.message);\n      };\n      worker.postMessage(params);\n    }\n\n    return {};\n  }\n}\n\nexport { TiffLoader };\n","import { errorConstructors } from \"serialize-error\";\nimport { NodeNotFoundError, KeyError } from \"@zarrita/core\";\n// geotiff doesn't export its error types...\n\n/** Groups possible load errors into a few broad categories which we can give similar guidance to the user about. */\nexport const enum VolumeLoadErrorType {\n  UNKNOWN = \"unknown\",\n  NOT_FOUND = \"not_found\",\n  TOO_LARGE = \"too_large\",\n  LOAD_DATA_FAILED = \"load_data_failed\",\n  INVALID_METADATA = \"invalid_metadata\",\n  INVALID_MULTI_SOURCE_ZARR = \"invalid_multi_source_zarr\",\n}\n\nexport class VolumeLoadError extends Error {\n  type: VolumeLoadErrorType;\n\n  constructor(message?: string, options?: { cause?: unknown; type?: VolumeLoadErrorType }) {\n    super(message, options);\n    this.name = \"VolumeLoadError\";\n    this.type = options?.type ?? VolumeLoadErrorType.UNKNOWN;\n  }\n}\n\n// serialize-error only ever calls an error constructor with zero arguments. The required `ErrorConstructor`\n// type is a bit too restrictive - as long as the constructor can be called with no arguments it's fine.\nerrorConstructors.set(\"NodeNotFoundError\", NodeNotFoundError as ErrorConstructor);\nerrorConstructors.set(\"KeyError\", KeyError as ErrorConstructor);\nerrorConstructors.set(\"VolumeLoadError\", VolumeLoadError as unknown as ErrorConstructor);\n\n/** Curried function to re-throw an error wrapped in a `VolumeLoadError` with the given `message` and `type`. */\nexport function wrapVolumeLoadError<T>(\n  message = \"Unknown error occurred while loading volume data\",\n  type = VolumeLoadErrorType.UNKNOWN,\n  ignore?: unknown\n): (e: T) => T {\n  return (e: T) => {\n    if (ignore !== undefined && e === ignore) {\n      return e;\n    }\n    if (e instanceof VolumeLoadError) {\n      throw e;\n    }\n    throw new VolumeLoadError(message, { type, cause: e });\n  };\n}\n","import { Box3, Vector2, Vector3 } from \"three\";\n\nimport { ImageInfo } from \"../Volume.js\";\nimport { LoadSpec } from \"./IVolumeLoader.js\";\nimport { VolumeLoadError, VolumeLoadErrorType } from \"./VolumeLoadError.js\";\n\nexport const MAX_ATLAS_EDGE = 4096;\n\n// Map from units to their symbols\nconst UNIT_SYMBOLS = {\n  angstrom: \"Å\",\n  day: \"d\",\n  foot: \"ft\",\n  hour: \"h\",\n  inch: \"in\",\n  meter: \"m\",\n  micron: \"μm\",\n  mile: \"mi\",\n  minute: \"min\",\n  parsec: \"pc\",\n  second: \"s\",\n  yard: \"yd\",\n};\n\n// Units which may take SI prefixes (e.g. micro-, tera-)\nconst SI_UNITS: (keyof typeof UNIT_SYMBOLS)[] = [\"meter\", \"second\"];\n\n// SI prefixes which abbreviate in nonstandard ways\nconst SI_PREFIX_ABBVS = {\n  micro: \"μ\",\n  deca: \"da\",\n};\n\n/** Converts a full spatial or temporal unit name supported by OME-Zarr to its unit symbol */\n// (see https://ngff.openmicroscopy.org/latest/#axes-md)\nexport function unitNameToSymbol(unitName?: string): string | null {\n  if (unitName === undefined) {\n    return null;\n  }\n\n  if (UNIT_SYMBOLS[unitName]) {\n    return UNIT_SYMBOLS[unitName];\n  }\n\n  const prefixedSIUnit = SI_UNITS.find((siUnit) => unitName.endsWith(siUnit));\n  if (prefixedSIUnit) {\n    const prefix = unitName.substring(0, unitName.length - prefixedSIUnit.length);\n\n    if (SI_PREFIX_ABBVS[prefix]) {\n      // \"special\" SI prefix\n      return SI_PREFIX_ABBVS[prefix] + UNIT_SYMBOLS[prefixedSIUnit];\n    }\n\n    // almost all SI prefixes are abbreviated by first letter, capitalized if prefix ends with \"a\"\n    const capitalize = prefix.endsWith(\"a\");\n    const prefixAbbr = capitalize ? prefix[0].toUpperCase() : prefix[0];\n    return prefixAbbr + UNIT_SYMBOLS[prefixedSIUnit];\n  }\n\n  return null;\n}\n\n// We want to find the most \"square\" packing of z tw by th tiles.\n// Compute number of rows and columns.\nexport function computePackedAtlasDims(z: number, tw: number, th: number): Vector2 {\n  let nextrows = 1;\n  let nextcols = z;\n  let ratio = (nextcols * tw) / (nextrows * th);\n  let nrows = nextrows;\n  let ncols = nextcols;\n  while (ratio > 1) {\n    nrows = nextrows;\n    ncols = nextcols;\n    nextcols -= 1;\n    nextrows = Math.ceil(z / nextcols);\n    ratio = (nextcols * tw) / (nextrows * th);\n  }\n  return new Vector2(nrows, ncols);\n}\n\nfunction doesSpatialDimensionFitInAtlas(\n  spatialDimZYX: [number, number, number],\n  maxAtlasEdge = MAX_ATLAS_EDGE\n): boolean {\n  // Estimate atlas size\n  const x = spatialDimZYX[2];\n  const y = spatialDimZYX[1];\n  const z = spatialDimZYX[0];\n  const xtiles = Math.floor(maxAtlasEdge / x);\n  const ytiles = Math.floor(maxAtlasEdge / y);\n  return xtiles * ytiles >= z;\n}\n\n/** Picks the largest scale level that can fit into a texture atlas with edges no longer than `maxAtlasEdge`. */\nexport function estimateLevelForAtlas(\n  spatialDimsZYX: [number, number, number][],\n  maxAtlasEdge = MAX_ATLAS_EDGE\n): number | undefined {\n  if (spatialDimsZYX.length <= 1) {\n    return 0;\n  }\n\n  for (let i = 0; i < spatialDimsZYX.length; ++i) {\n    // estimate atlas size:\n    if (doesSpatialDimensionFitInAtlas(spatialDimsZYX[i], maxAtlasEdge)) {\n      return i;\n    }\n  }\n  return undefined;\n}\n\ntype ZYX = [number, number, number];\nconst maxCeil = (val: number): number => Math.max(Math.ceil(val), 1);\nconst scaleDims = (size: Vector3, [z, y, x]: ZYX): ZYX => [\n  maxCeil(z * size.z),\n  maxCeil(y * size.y),\n  maxCeil(x * size.x),\n];\n\nexport function scaleDimsToSubregion(subregion: Box3, dims: ZYX): ZYX {\n  const size = subregion.getSize(new Vector3());\n  return scaleDims(size, dims);\n}\n\nexport function scaleMultipleDimsToSubregion(subregion: Box3, dims: ZYX[]): ZYX[] {\n  const size = subregion.getSize(new Vector3());\n  return dims.map((dim) => scaleDims(size, dim));\n}\n\n/**\n * Picks the best scale level to load based on scale level dimensions and a `LoadSpec`. This calls\n * `estimateLevelForAtlas`, then accounts for `LoadSpec`'s scale level picking properties:\n * - `multiscaleLevel` imposes a minimum scale level (or *maximum* resolution level) to load\n * - `maxAtlasEdge` sets the maximum size of the texture atlas that may be produced by a load\n * - `scaleLevelBias` offsets the scale level index after the optimal level is picked based on `maxAtlasEdge`\n *\n *  This function assumes that `spatialDimsZYX` has already been appropriately scaled to match `loadSpec`'s `subregion`.\n */\nexport function pickLevelToLoadUnscaled(loadSpec: LoadSpec, spatialDimsZYX: ZYX[]): number {\n  let levelToLoad = estimateLevelForAtlas(spatialDimsZYX, loadSpec.maxAtlasEdge);\n  // Check here for whether levelToLoad is within max atlas size?\n  if (levelToLoad !== undefined) {\n    levelToLoad = Math.max(levelToLoad + (loadSpec.scaleLevelBias ?? 0), loadSpec.multiscaleLevel ?? 0);\n    levelToLoad = Math.max(0, Math.min(spatialDimsZYX.length - 1, levelToLoad));\n\n    if (doesSpatialDimensionFitInAtlas(spatialDimsZYX[levelToLoad], loadSpec.maxAtlasEdge)) {\n      return levelToLoad;\n    }\n  }\n\n  // Level to load could not be loaded due to atlas size constraints.\n  if (levelToLoad === undefined) {\n    // No optimal level exists so choose the smallest level to report out\n    levelToLoad = spatialDimsZYX.length - 1;\n  }\n  const smallestDims = spatialDimsZYX[levelToLoad];\n  console.error(\n    `Volume is too large; no multiscale level found that fits in preferred memory footprint. Selected level ${levelToLoad}  has dimensions `,\n    smallestDims,\n    `. Max atlas edge allowed is ${loadSpec.maxAtlasEdge}.`\n  );\n  console.log(\"All available levels: \", spatialDimsZYX);\n  throw new VolumeLoadError(`Volume is too large; multiscale level does not fit in preferred memory footprint.`, {\n    type: VolumeLoadErrorType.TOO_LARGE,\n  });\n}\n\n/**\n * Picks the best scale level to load based on scale level dimensions and a `LoadSpec`. This calls\n * `estimateLevelForAtlas` and accounts for all properties of `LoadSpec` considered by\n * `pickLevelToLoadUnscaled`, and additionally scales the dimensions of the scale levels to account for the\n * `LoadSpec`'s `subregion` property.\n */\nexport function pickLevelToLoad(loadSpec: LoadSpec, spatialDimsZYX: ZYX[]): number {\n  const scaledDims = scaleMultipleDimsToSubregion(loadSpec.subregion, spatialDimsZYX);\n  return pickLevelToLoadUnscaled(loadSpec, scaledDims);\n}\n\n/** Given the size of a volume in pixels, convert a `Box3` in the 0-1 range to pixels */\nexport function convertSubregionToPixels(region: Box3, size: Vector3): Box3 {\n  const min = region.min.clone().multiply(size).floor();\n  const max = region.max.clone().multiply(size).ceil();\n\n  // ensure it's always valid to specify the same number at both ends and get a single slice\n  if (min.x === max.x && min.x < size.x) {\n    max.x += 1;\n  }\n  if (min.y === max.y && min.y < size.y) {\n    max.y += 1;\n  }\n  if (min.z === max.z && min.z < size.z) {\n    max.z += 1;\n  }\n\n  return new Box3(min, max);\n}\n\n/**\n * Return the subset of `container` specified by `region`, assuming that `region` contains fractional values (between 0\n * and 1). i.e. if `container`'s range on the X axis is 0-4 and `region`'s is 0.25-0.5, the result will have range 1-2.\n */\nexport function composeSubregion(region: Box3, container: Box3): Box3 {\n  const size = container.getSize(new Vector3());\n  const min = region.min.clone().multiply(size).add(container.min);\n  const max = region.max.clone().multiply(size).add(container.min);\n  return new Box3(min, max);\n}\n\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// currently everything needed can come from the imageInfo\n// but in the future each IVolumeLoader could have a completely separate implementation.\nexport function buildDefaultMetadata(imageInfo: ImageInfo): Record<string, unknown> {\n  const physicalSize = imageInfo.volumeSize.clone().multiply(imageInfo.physicalPixelSize);\n  const metadata = {};\n  metadata[\"Dimensions\"] = { ...imageInfo.subregionSize };\n  metadata[\"Original dimensions\"] = { ...imageInfo.originalSize };\n  metadata[\"Physical size\"] = {\n    x: physicalSize.x + imageInfo.spatialUnit,\n    y: physicalSize.y + imageInfo.spatialUnit,\n    z: physicalSize.z + imageInfo.spatialUnit,\n  };\n  metadata[\"Physical size per pixel\"] = {\n    x: imageInfo.physicalPixelSize.x + imageInfo.spatialUnit,\n    y: imageInfo.physicalPixelSize.y + imageInfo.spatialUnit,\n    z: imageInfo.physicalPixelSize.z + imageInfo.spatialUnit,\n  };\n  metadata[\"Channels\"] = imageInfo.numChannels;\n  metadata[\"Time series frames\"] = imageInfo.times || 1;\n  // don't add User data if it's empty\n  if (imageInfo.userData && !isEmpty(imageInfo.userData)) {\n    metadata[\"User data\"] = imageInfo.userData;\n  }\n  return metadata;\n}\n","import { ThreadableVolumeLoader } from \"./IVolumeLoader.js\";\nimport { OMEZarrLoader, type ZarrLoaderFetchOptions } from \"./OmeZarrLoader.js\";\nimport { JsonImageInfoLoader } from \"./JsonImageInfoLoader.js\";\nimport { RawArrayLoader, RawArrayLoaderOptions } from \"./RawArrayLoader.js\";\nimport { TiffLoader } from \"./TiffLoader.js\";\nimport VolumeCache from \"../VolumeCache.js\";\nimport SubscribableRequestQueue from \"../utils/SubscribableRequestQueue.js\";\n\nexport { PrefetchDirection } from \"./zarr_utils/types.js\";\n\nexport const enum VolumeFileFormat {\n  ZARR = \"zarr\",\n  JSON = \"json\",\n  TIFF = \"tiff\",\n  DATA = \"data\",\n}\n\n// superset of all necessary loader options\nexport type CreateLoaderOptions = {\n  fileType?: VolumeFileFormat;\n  cache?: VolumeCache;\n  queue?: SubscribableRequestQueue;\n  scene?: number;\n  fetchOptions?: ZarrLoaderFetchOptions;\n  rawArrayOptions?: RawArrayLoaderOptions;\n};\n\nexport function pathToFileType(path: string): VolumeFileFormat {\n  if (path.endsWith(\".json\")) {\n    return VolumeFileFormat.JSON;\n  } else if (path.endsWith(\".tif\") || path.endsWith(\".tiff\")) {\n    return VolumeFileFormat.TIFF;\n  }\n  return VolumeFileFormat.ZARR;\n}\n\nexport async function createVolumeLoader(\n  path: string | string[],\n  options?: CreateLoaderOptions\n): Promise<ThreadableVolumeLoader> {\n  const pathString = Array.isArray(path) ? path[0] : path;\n  const fileType = options?.fileType || pathToFileType(pathString);\n\n  switch (fileType) {\n    case VolumeFileFormat.ZARR:\n      return await OMEZarrLoader.createLoader(\n        path,\n        options?.scene,\n        options?.cache,\n        options?.queue,\n        options?.fetchOptions\n      );\n    case VolumeFileFormat.JSON:\n      return new JsonImageInfoLoader(path, options?.cache);\n    case VolumeFileFormat.TIFF:\n      return new TiffLoader(pathString);\n    case VolumeFileFormat.DATA:\n      if (!options?.rawArrayOptions) {\n        throw new Error(\"Must provide RawArrayOptions for RawArrayLoader\");\n      }\n      return new RawArrayLoader(options?.rawArrayOptions.data, options?.rawArrayOptions.metadata);\n  }\n}\n","import { PrefetchDirection, TCZYX } from \"./types\";\n\ntype TZYX = [number, number, number, number];\n\ntype PrefetchDirectionState = {\n  direction: PrefetchDirection;\n  chunks: TCZYX<number>[];\n  start: number;\n  /** May be either a number for all channels or an array of ends per-channels */\n  end: number | number[];\n};\n\nconst allEqual = <T>(arr: T[]): boolean => arr.every((v) => v === arr[0]);\n\nconst pushN = <T>(arr: T[], val: T, n: number): void => {\n  for (let i = 0; i < n; i++) {\n    arr.push(val);\n  }\n};\n\nconst directionToIndex = (dir: PrefetchDirection): number => {\n  const absDir = dir >> 1; // shave off sign bit to get index in TZYX\n  return absDir + Number(absDir !== 0); // convert TZYX -> TCZYX by skipping c (index 1)\n};\n\nfunction updateMinMax(val: number, minmax: [number, number]): void {\n  if (val < minmax[0]) {\n    minmax[0] = val;\n  }\n\n  if (val > minmax[1]) {\n    minmax[1] = val;\n  }\n}\n\n/**\n * Since the user is most likely to want nearby data (in space or time) first, we should prefetch those chunks first.\n *\n * Given a list of just-loaded chunks and some bounds, `ChunkPrefetchIterator` iterates evenly outwards in T/Z/Y/X.\n */\n// NOTE: Assumes `chunks` form a rectangular prism! Will create gaps otherwise! (in practice they always should)\nexport default class ChunkPrefetchIterator {\n  directionStates: PrefetchDirectionState[];\n  priorityDirectionStates: PrefetchDirectionState[];\n\n  constructor(\n    chunks: TCZYX<number>[],\n    tzyxMaxPrefetchOffset: TZYX,\n    tczyxChunksPerSource: TCZYX<number>[],\n    priorityDirections?: PrefetchDirection[]\n  ) {\n    // Get min and max chunk coordinates for T/Z/Y/X\n    const extrema: [number, number][] = [\n      [Infinity, -Infinity],\n      [Infinity, -Infinity],\n      [Infinity, -Infinity],\n      [Infinity, -Infinity],\n    ];\n\n    for (const chunk of chunks) {\n      updateMinMax(chunk[0], extrema[0]);\n      updateMinMax(chunk[2], extrema[1]);\n      updateMinMax(chunk[3], extrema[2]);\n      updateMinMax(chunk[4], extrema[3]);\n    }\n\n    // Create `PrefetchDirectionState`s for each direction\n    this.directionStates = [];\n    this.priorityDirectionStates = [];\n\n    for (const [direction, start] of extrema.flat().entries()) {\n      const dimension = direction >> 1; // shave off sign bit to get index in TZYX\n      const tczyxIndex = dimension + Number(dimension !== 0); // convert TZYX -> TCZYX by skipping c (index 1)\n      let end: number | number[];\n      if (direction & 1) {\n        // Positive direction - end is either the max coordinate in the fetched set plus the max offset in this\n        // dimension, or the max chunk coordinate in this dimension, whichever comes first\n        const endsPerSource = tczyxChunksPerSource.map((chunkDims) => {\n          return Math.min(start + tzyxMaxPrefetchOffset[dimension], chunkDims[tczyxIndex] - 1);\n        });\n\n        // Save some time: if all sources have the same end, we can just store that\n        if (allEqual(endsPerSource)) {\n          end = endsPerSource[0];\n        } else {\n          // Otherwise, expand our ends per source array to ends per channel\n          end = [];\n          for (const [i, sourceEnd] of endsPerSource.entries()) {\n            pushN(end, sourceEnd, tczyxChunksPerSource[i][1]);\n          }\n        }\n        // end = Math.min(start + tzyxMaxPrefetchOffset[dimension], tczyxChunksPerDimension[dimension] - 1);\n      } else {\n        // Negative direction - end is either the min coordinate in the fetched set minus the max offset in this\n        // dimension, or 0, whichever comes first\n        end = Math.max(start - tzyxMaxPrefetchOffset[dimension], 0);\n      }\n      const directionState = { direction, start, end, chunks: [] };\n\n      if (priorityDirections && priorityDirections.includes(direction)) {\n        this.priorityDirectionStates.push(directionState);\n      } else {\n        this.directionStates.push(directionState);\n      }\n    }\n\n    // Fill each `PrefetchDirectionState` with chunks at the border of the fetched set\n    for (const chunk of chunks) {\n      for (const dir of this.directionStates) {\n        if (chunk[directionToIndex(dir.direction)] === dir.start) {\n          dir.chunks.push(chunk);\n        }\n      }\n      for (const dir of this.priorityDirectionStates) {\n        if (chunk[directionToIndex(dir.direction)] === dir.start) {\n          dir.chunks.push(chunk);\n        }\n      }\n    }\n  }\n\n  private static *iterateDirections(directions: PrefetchDirectionState[]): Generator<TCZYX<number>> {\n    let offset = 1;\n\n    while (directions.length > 0) {\n      // Remove directions in which we have reached the end (or, if per-channel ends, the end for all channels)\n      directions = directions.filter((dir) => {\n        const end = Array.isArray(dir.end) ? Math.max(...dir.end) : dir.end;\n        if (dir.direction & 1) {\n          return dir.start + offset <= end;\n        } else {\n          return dir.start - offset >= end;\n        }\n      });\n\n      // Yield chunks one chunk farther out in every remaining direction\n      for (const dir of directions) {\n        const offsetDir = offset * (dir.direction & 1 ? 1 : -1);\n        for (const chunk of dir.chunks) {\n          // Skip this chunk if this channel has a specific per-channel end and we've reached it\n          if (Array.isArray(dir.end) && chunk[directionToIndex(dir.direction)] + offsetDir > dir.end[chunk[1]]) {\n            continue;\n          }\n          const newChunk = chunk.slice() as TCZYX<number>;\n          newChunk[directionToIndex(dir.direction)] += offsetDir;\n          yield newChunk;\n        }\n      }\n\n      offset += 1;\n    }\n  }\n\n  *[Symbol.iterator](): Iterator<TCZYX<number>> {\n    // Yield all chunks in priority direction(s) first, if any\n    if (this.priorityDirectionStates.length > 0) {\n      for (const chunk of ChunkPrefetchIterator.iterateDirections(this.priorityDirectionStates)) {\n        yield chunk;\n      }\n    }\n\n    // Then yield all chunks in other directions\n    for (const chunk of ChunkPrefetchIterator.iterateDirections(this.directionStates)) {\n      yield chunk;\n    }\n  }\n}\n","import { FetchStore } from \"zarrita\";\nimport { AbsolutePath, AsyncMutable, Readable } from \"@zarrita/storage\";\n\nimport SubscribableRequestQueue from \"../../utils/SubscribableRequestQueue\";\nimport VolumeCache from \"../../VolumeCache\";\n\nimport { SubscriberId } from \"./types\";\n\ntype WrappedStoreOpts<Opts> = {\n  options?: Opts;\n  subscriber: SubscriberId;\n  reportKey?: (key: string, subscriber: SubscriberId) => void;\n  isPrefetch?: boolean;\n};\n\n/**\n * `Readable` is zarrita's minimal abstraction for any source of data.\n * `WrappedStore` wraps another `Readable` and adds (optional) connections to `VolumeCache` and `RequestQueue`.\n */\nclass WrappedStore<Opts, S extends Readable<Opts> = Readable<Opts>> implements AsyncMutable<WrappedStoreOpts<Opts>> {\n  constructor(private baseStore: S, private cache?: VolumeCache, private queue?: SubscribableRequestQueue) {}\n  // Dummy implementation to make this class easier to use in tests\n  set(_key: AbsolutePath, _value: Uint8Array): Promise<void> {\n    return Promise.resolve();\n  }\n\n  private async getAndCache(key: AbsolutePath, cacheKey: string, opts?: Opts): Promise<Uint8Array | undefined> {\n    const result = await this.baseStore.get(key, opts);\n    if (this.cache && result) {\n      this.cache.insert(cacheKey, result);\n    }\n    return result;\n  }\n\n  async get(key: AbsolutePath, opts?: WrappedStoreOpts<Opts> | undefined): Promise<Uint8Array | undefined> {\n    const ZARR_EXTS = [\".zarray\", \".zgroup\", \".zattrs\", \"zarr.json\"];\n    if (!this.cache || ZARR_EXTS.some((s) => key.endsWith(s))) {\n      return this.baseStore.get(key, opts?.options);\n    }\n    if (opts?.reportKey) {\n      opts.reportKey(key, opts.subscriber);\n    }\n\n    let keyPrefix = (this.baseStore as FetchStore).url ?? \"\";\n    if (keyPrefix !== \"\" && !(keyPrefix instanceof URL) && !keyPrefix.endsWith(\"/\")) {\n      keyPrefix += \"/\";\n    }\n\n    const fullKey = keyPrefix + key.slice(1);\n\n    // Check the cache\n    const cacheResult = this.cache.get(fullKey);\n    if (cacheResult) {\n      return new Uint8Array(cacheResult);\n    }\n\n    // Not in cache; load the chunk and cache it\n    if (this.queue && opts) {\n      return this.queue.addRequest(\n        fullKey,\n        opts.subscriber,\n        () => this.getAndCache(key, fullKey, opts?.options),\n        opts.isPrefetch\n      );\n    } else {\n      // Should we ever hit this code?  We should always have a request queue.\n      return this.getAndCache(key, fullKey, opts?.options);\n    }\n  }\n}\n\nexport default WrappedStore;\n","import * as zarr from \"@zarrita/core\";\n\nimport type WrappedStore from \"./WrappedStore.js\";\nimport type SubscribableRequestQueue from \"../../utils/SubscribableRequestQueue.js\";\n\nexport type TCZYX<T> = [T, T, T, T, T];\nexport type SubscriberId = ReturnType<SubscribableRequestQueue[\"addSubscriber\"]>;\n\n/**\n * Directions in which to move outward from the loaded set of chunks while prefetching.\n *\n * Ordered in pairs of opposite directions both because that's a sensible order in which to prefetch for our purposes,\n * and because it lets us treat the least significant bit as the sign. So `direction >> 1` gives the index of the\n * direction in TZYX-ordered arrays, and `direction & 1` gives the sign of the direction (e.g. positive vs negative Z).\n */\nexport const enum PrefetchDirection {\n  T_MINUS = 0,\n  T_PLUS = 1,\n\n  Z_MINUS = 2,\n  Z_PLUS = 3,\n\n  Y_MINUS = 4,\n  Y_PLUS = 5,\n\n  X_MINUS = 6,\n  X_PLUS = 7,\n}\n\nexport type OMECoordinateTransformation =\n  | {\n      type: \"identity\";\n    }\n  | {\n      type: \"translation\";\n      translation: number[];\n    }\n  | {\n      type: \"scale\";\n      scale: number[];\n    }\n  | {\n      type: \"translation\" | \"scale\";\n      path: string;\n    };\n\nexport type OMEAxis = {\n  name: string;\n  type?: string;\n  unit?: string;\n};\n\nexport type OMEDataset = {\n  path: string;\n  coordinateTransformations?: OMECoordinateTransformation[];\n};\n\n/** https://ngff.openmicroscopy.org/latest/#multiscale-md */\nexport type OMEMultiscale = {\n  version?: string;\n  name?: string;\n  axes: OMEAxis[];\n  datasets: OMEDataset[];\n  coordinateTransformations?: OMECoordinateTransformation[];\n  type?: string;\n  metadata?: Record<string, unknown>;\n};\n\n/** https://ngff.openmicroscopy.org/latest/#omero-md */\nexport type OmeroTransitionalMetadata = {\n  id: number;\n  name: string;\n  version: string;\n  channels: {\n    active: boolean;\n    coefficient: number;\n    color: string;\n    family: string;\n    inverted: boolean;\n    label: string;\n    window: {\n      end: number;\n      max: number;\n      min: number;\n      start: number;\n    };\n  }[];\n};\n\nexport type OMEZarrMetadata = {\n  multiscales: OMEMultiscale[];\n  omero: OmeroTransitionalMetadata;\n};\n\nexport type NumericZarrArray = zarr.Array<zarr.NumberDataType, WrappedStore<RequestInit>>;\n\n/** A record with everything we need to access and use a single remote source of multiscale OME-Zarr data. */\nexport type ZarrSource = {\n  /** Representations of each scale level in this zarr. We pick one and pass it to zarrita to load data. */\n  scaleLevels: NumericZarrArray[];\n  /**\n   * Zarr dimensions may be ordered in many ways or missing altogether (e.g. TCXYZ, TYX). `axesTCZYX` represents\n   * dimension order as a mapping from dimensions to their indices in dimension-ordered arrays for this source.\n   */\n  axesTCZYX: TCZYX<number>;\n  /** OME-specified metadata record with most useful info on the current image, e.g. sizes, axis order, etc. */\n  multiscaleMetadata: OMEMultiscale;\n  /** OME-specified \"transitional\" metadata record which we mostly ignore, but which gives channel & volume names. */\n  omeroMetadata?: OmeroTransitionalMetadata;\n  /** Which channels in the volume come out of this source - i.e. source channel 0 is volume channel `channelOffset` */\n  channelOffset: number;\n};\n","import { VolumeLoadErrorType, VolumeLoadError } from \"../VolumeLoadError.js\";\nimport type {\n  NumericZarrArray,\n  OMEAxis,\n  OMECoordinateTransformation,\n  OMEDataset,\n  OMEMultiscale,\n  TCZYX,\n  ZarrSource,\n} from \"./types.js\";\n\n/** Extracts channel names from a `ZarrSource`. Handles missing `omeroMetadata`. Does *not* resolve name collisions. */\nexport function getSourceChannelNames(src: ZarrSource): string[] {\n  if (src.omeroMetadata?.channels) {\n    return src.omeroMetadata.channels.map(({ label }, idx) => label ?? `Channel ${idx + src.channelOffset}`);\n  }\n  const length = src.scaleLevels[0].shape[src.axesTCZYX[1]];\n  return Array.from({ length }, (_, idx) => `Channel ${idx + src.channelOffset}`);\n}\n\n/** Turns `axesTCZYX` into the number of dimensions in the array */\nexport const getDimensionCount = ([t, c, z]: TCZYX<number>) => 2 + Number(t > -1) + Number(c > -1) + Number(z > -1);\n\nexport function remapAxesToTCZYX(axes: OMEAxis[]): TCZYX<number> {\n  const axesTCZYX: TCZYX<number> = [-1, -1, -1, -1, -1];\n  const axisNames = [\"t\", \"c\", \"z\", \"y\", \"x\"];\n\n  axes.forEach((axis, idx) => {\n    const axisIdx = axisNames.indexOf(axis.name);\n    if (axisIdx > -1) {\n      axesTCZYX[axisIdx] = idx;\n    } else {\n      throw new VolumeLoadError(`Unrecognized axis in zarr: ${axis.name}`, {\n        type: VolumeLoadErrorType.INVALID_METADATA,\n      });\n    }\n  });\n\n  // it is possible that Z might not exist but we require X and Y at least.\n  const noXAxis = axesTCZYX[4] === -1;\n  if (noXAxis || axesTCZYX[3] === -1) {\n    throw new VolumeLoadError(`Did not find ${noXAxis ? \"an X\" : \"a Y\"} axis in zarr`, {\n      type: VolumeLoadErrorType.INVALID_METADATA,\n    });\n  }\n\n  return axesTCZYX;\n}\n\n/** Reorder an array of values [T, C, Z, Y, X] to the given dimension order */\nexport function orderByDimension<T>(valsTCZYX: TCZYX<T>, orderTCZYX: TCZYX<number>): T[] {\n  const specLen = getDimensionCount(orderTCZYX);\n  const result: T[] = Array(specLen);\n\n  orderTCZYX.forEach((val, idx) => {\n    if (val >= 0) {\n      if (val >= specLen) {\n        throw new VolumeLoadError(`Unexpected axis index in zarr: ${val}`, {\n          type: VolumeLoadErrorType.INVALID_METADATA,\n        });\n      }\n      result[val] = valsTCZYX[idx];\n    }\n  });\n\n  return result;\n}\n\n/** Reorder an array of values in the given dimension order to [T, C, Z, Y, X] */\nexport function orderByTCZYX<T>(valsDimension: T[], orderTCZYX: TCZYX<number>, defaultValue: T): TCZYX<T> {\n  const result: TCZYX<T> = [defaultValue, defaultValue, defaultValue, defaultValue, defaultValue];\n\n  orderTCZYX.forEach((val, idx) => {\n    if (val >= 0) {\n      if (val >= valsDimension.length) {\n        throw new VolumeLoadError(`Unexpected axis index in zarr: ${val}`, {\n          type: VolumeLoadErrorType.INVALID_METADATA,\n        });\n      }\n      result[idx] = valsDimension[val];\n    }\n  });\n\n  return result;\n}\n\n/** Select the scale transform from an OME metadata object with coordinate transforms, and return it in TCZYX order */\nexport function getScale(dataset: OMEDataset | OMEMultiscale, orderTCZYX: TCZYX<number>): TCZYX<number> {\n  const transforms = dataset.coordinateTransformations;\n\n  if (transforms === undefined) {\n    console.warn(\"WARNING: OMEZarrLoader: no coordinate transformations for scale level.\");\n    return [1, 1, 1, 1, 1];\n  }\n\n  // this assumes we'll never encounter the \"path\" variant\n  const isScaleTransform = (t: OMECoordinateTransformation): t is { type: \"scale\"; scale: number[] } =>\n    t.type === \"scale\";\n\n  // there can be any number of coordinateTransformations\n  // but there must be only one of type \"scale\".\n  const scaleTransform = transforms.find(isScaleTransform);\n  if (!scaleTransform) {\n    console.warn(`WARNING: OMEZarrLoader: no coordinate transformation of type \"scale\" for scale level.`);\n    return [1, 1, 1, 1, 1];\n  }\n\n  const scale = scaleTransform.scale.slice();\n  return orderByTCZYX(scale, orderTCZYX, 1);\n}\n\n/**\n * Defines a partial order of zarr arrays based on their size. Specifically:\n * - If array size x, y, z are all equal, the arrays are equal\n * - otherwise, if all xyz of `a` are less than or equal to those of `b`, `a` is less than `b` (and vice versa)\n * - if some xyz is less and some is greater, the arrays are uncomparable\n */\nfunction compareZarrArraySize(\n  aArr: NumericZarrArray,\n  aTCZYX: TCZYX<number>,\n  bArr: NumericZarrArray,\n  bTCZYX: TCZYX<number>\n): number | undefined {\n  const aZ = aTCZYX[2] > -1 ? aArr.shape[aTCZYX[2]] : 1;\n  const bZ = bTCZYX[2] > -1 ? bArr.shape[bTCZYX[2]] : 1;\n  const diffZ = aZ - bZ;\n  const diffY = aArr.shape[aTCZYX[3]] - bArr.shape[bTCZYX[3]];\n  const diffX = aArr.shape[aTCZYX[4]] - bArr.shape[bTCZYX[4]];\n\n  if (diffZ === 0 && diffY === 0 && diffX === 0) {\n    return 0;\n  } else if (diffZ <= 0 && diffY <= 0 && diffX <= 0) {\n    return -1;\n  } else if (diffZ >= 0 && diffY >= 0 && diffX >= 0) {\n    return 1;\n  } else {\n    return undefined;\n  }\n}\n\nconst EPSILON = 0.00001;\nconst aboutEquals = (a: number, b: number): boolean => Math.abs(a - b) < EPSILON;\n\nfunction scaleTransformsAreEqual(aSrc: ZarrSource, aLevel: number, bSrc: ZarrSource, bLevel: number): boolean {\n  const aScale = getScale(aSrc.multiscaleMetadata.datasets[aLevel], aSrc.axesTCZYX);\n  const bScale = getScale(bSrc.multiscaleMetadata.datasets[bLevel], bSrc.axesTCZYX);\n  return aboutEquals(aScale[2], bScale[2]) && aboutEquals(aScale[3], bScale[3]) && aboutEquals(aScale[4], bScale[4]);\n}\n\n/**\n * Ensures that all scale levels in `sources` are matched up by size. More precisely: enforces that, for any scale\n * level `i`, the size of zarr array `s[i]` is equal for every source `s`. We accomplish this by removing any arrays\n * (and their associated OME dataset metadata) which don't match up in all sources.\n *\n * Note that this function modifies the input `sources` array rather than returning a new value.\n *\n * Assumes all sources have scale levels ordered by size from largest to smallest. (This should always be true for\n * compliant OME-Zarr data.)\n */\nexport function matchSourceScaleLevels(sources: ZarrSource[]): void {\n  if (sources.length < 2) {\n    return;\n  }\n\n  // Save matching scale levels and metadata here\n  const matchedLevels: NumericZarrArray[][] = Array.from({ length: sources.length }, () => []);\n  const matchedMetas: OMEDataset[][] = Array.from({ length: sources.length }, () => []);\n\n  // Start as many index counters as we have sources\n  const scaleIndexes: number[] = new Array(sources.length).fill(0);\n  while (scaleIndexes.every((val, idx) => val < sources[idx].scaleLevels.length)) {\n    // First pass: find the smallest source / determine if all sources are equal\n    let allEqual = true;\n    let smallestIdx = 0;\n    let smallestSrc = sources[0];\n    let smallestArr = smallestSrc.scaleLevels[scaleIndexes[0]];\n    for (let currentIdx = 1; currentIdx < sources.length; currentIdx++) {\n      const currentSrc = sources[currentIdx];\n      const currentArr = currentSrc.scaleLevels[scaleIndexes[currentIdx]];\n\n      const ordering = compareZarrArraySize(smallestArr, smallestSrc.axesTCZYX, currentArr, currentSrc.axesTCZYX);\n      if (!ordering) {\n        // Arrays are equal, or they are uncomparable\n        if (ordering === undefined) {\n          throw new VolumeLoadError(\"Incompatible zarr arrays: pixel dimensions are mismatched\", {\n            type: VolumeLoadErrorType.INVALID_MULTI_SOURCE_ZARR,\n          });\n        }\n\n        // Now we know the arrays are equal, but they may still be invalid to match up because...\n        // ...they have different scale transformations\n        if (!scaleTransformsAreEqual(smallestSrc, scaleIndexes[smallestIdx], currentSrc, scaleIndexes[currentIdx])) {\n          // today we are going to treat this as a warning.\n          // For our implementation it is enough that the xyz pixel ranges are the same.\n          // Ideally scale*arraysize=physical size is really the quantity that should be equal, for combining two volume data sets as channels.\n          console.warn(\"Incompatible zarr arrays: scale levels of equal size have different scale transformations\");\n        }\n\n        // ...they have different numbers of timesteps\n        const largestT = smallestSrc.axesTCZYX[0] > -1 ? smallestArr.shape[smallestSrc.axesTCZYX[0]] : 1;\n        const currentT = currentSrc.axesTCZYX[0] > -1 ? currentArr.shape[currentSrc.axesTCZYX[0]] : 1;\n        if (largestT !== currentT) {\n          // we also treat this as a warning.\n          // In OmeZarrLoader we will take the minimum T size of all sources\n          console.warn(`Incompatible zarr arrays: different numbers of timesteps: ${largestT} vs ${currentT}`);\n        }\n      } else {\n        allEqual = false;\n        if (ordering > 0) {\n          smallestIdx = currentIdx;\n          smallestSrc = currentSrc;\n          smallestArr = currentArr;\n        }\n      }\n    }\n\n    if (allEqual) {\n      // We've found a matching set of scale levels! Save it and increment all indexes\n      for (let i = 0; i < scaleIndexes.length; i++) {\n        const currentSrc = sources[i];\n        const matchedScaleLevel = scaleIndexes[i];\n        matchedLevels[i].push(currentSrc.scaleLevels[matchedScaleLevel]);\n        matchedMetas[i].push(currentSrc.multiscaleMetadata.datasets[matchedScaleLevel]);\n        scaleIndexes[i] += 1;\n      }\n    } else {\n      // Increment the indexes of the sources which are larger than the smallest\n      for (const [idx, srcIdx] of scaleIndexes.entries()) {\n        const currentSrc = sources[idx];\n        const currentArr = currentSrc.scaleLevels[srcIdx];\n        const ordering = compareZarrArraySize(smallestArr, smallestSrc.axesTCZYX, currentArr, currentSrc.axesTCZYX);\n        if (ordering !== 0) {\n          scaleIndexes[idx] += 1;\n        }\n      }\n    }\n  }\n\n  if (sources[0].scaleLevels.length === 0) {\n    throw new VolumeLoadError(\"Incompatible zarr arrays: no sets of scale levels found that matched in all sources\", {\n      type: VolumeLoadErrorType.INVALID_MULTI_SOURCE_ZARR,\n    });\n  }\n\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].scaleLevels = matchedLevels[i];\n    sources[i].multiscaleMetadata.datasets = matchedMetas[i];\n  }\n}\n","import { VolumeLoadError, VolumeLoadErrorType } from \"../VolumeLoadError.js\";\nimport { OMEZarrMetadata } from \"./types.js\";\n\nfunction isObjectWithProp<P extends string>(obj: unknown, prop: P): obj is Record<P, unknown> {\n  return typeof obj === \"object\" && obj !== null && prop in obj;\n}\n\nfunction assertMetadataHasProp<P extends string>(\n  obj: unknown,\n  prop: P,\n  name = \"zarr\"\n): asserts obj is Record<P, unknown> {\n  if (!isObjectWithProp(obj, prop)) {\n    throw new VolumeLoadError(`${name} metadata is missing required entry \"${prop}\"`, {\n      type: VolumeLoadErrorType.INVALID_METADATA,\n    });\n  }\n}\n\nfunction assertPropIsArray<P extends string>(\n  obj: Record<P, unknown>,\n  prop: P,\n  name = \"zarr\"\n): asserts obj is Record<P, unknown[]> {\n  if (!Array.isArray(obj[prop])) {\n    throw new VolumeLoadError(`${name} metadata entry \"${prop}\" is not an array`, {\n      type: VolumeLoadErrorType.INVALID_METADATA,\n    });\n  }\n}\n\n/**\n * Validates that the `OMEZarrMetadata` record `data` has the minimal amount of data required to open a volume. Since\n * we only ever open one multiscale, we only validate the multiscale metadata record at index `multiscaleIdx` here.\n * `name` is used in error messages to identify the source of the metadata.\n */\nexport function validateOMEZarrMetadata(\n  data: unknown,\n  multiscaleIdx = 0,\n  name = \"zarr\"\n): asserts data is OMEZarrMetadata {\n  // data is an object with a key \"multiscales\", which is an array\n  assertMetadataHasProp(data, \"multiscales\", name);\n  assertPropIsArray(data, \"multiscales\", name);\n\n  // check that a multiscale metadata entry exists at `multiscaleIdx`\n  const multiscaleMeta = data.multiscales[multiscaleIdx];\n  if (!multiscaleMeta) {\n    throw new VolumeLoadError(`${name} metadata does not have requested multiscale level ${multiscaleIdx}`, {\n      type: VolumeLoadErrorType.INVALID_METADATA,\n    });\n  }\n\n  const multiscaleMetaName = isObjectWithProp(multiscaleMeta, \"name\") ? ` (\"${multiscaleMeta.name})` : \"\";\n  const multiscaleName = `${name} multiscale ${multiscaleIdx}${multiscaleMetaName}`;\n\n  // multiscale has a key \"axes\", which is an array. Each axis has a \"name\".\n  assertMetadataHasProp(multiscaleMeta, \"axes\", multiscaleName);\n  assertPropIsArray(multiscaleMeta, \"axes\", multiscaleName);\n  multiscaleMeta.axes.forEach((axis, i) => assertMetadataHasProp(axis, \"name\", `${multiscaleName} axis ${i}`));\n\n  // multiscale has a key \"datasets\", which is an array. Each dataset has a \"path\".\n  assertMetadataHasProp(multiscaleMeta, \"datasets\", name);\n  assertPropIsArray(multiscaleMeta, \"datasets\", name);\n  multiscaleMeta.datasets.forEach((data, i) => assertMetadataHasProp(data, \"path\", `${multiscaleName} dataset ${i}`));\n}\n","import { Camera, OrthographicCamera, Vector3 } from \"three\";\n\nexport interface Bounds {\n  bmin: Vector3;\n  bmax: Vector3;\n}\n\nexport interface FuseChannel {\n  chIndex: number;\n  lut: Uint8Array;\n  // zero is a sentinel value to disable from fusion\n  rgbColor: [number, number, number] | number;\n}\n\n/** If `FuseChannel.rgbColor` is this value, it is disabled from fusion. */\nexport const FUSE_DISABLED_RGB_COLOR = 0;\n\n/**\n * Provide options to control the visual appearance of a Volume\n * @typedef {Object} VolumeChannelDisplayOptions\n * @property {boolean} enabled array of boolean per channel\n * @property {Array.<number>} color array of rgb per channel\n * @property {Array.<number>} specularColor array of rgb per channel\n * @property {Array.<number>} emissiveColor array of rgb per channel\n * @property {number} glossiness array of float per channel\n * @property {boolean} isosurfaceEnabled array of boolean per channel\n * @property {number} isovalue array of number per channel\n * @property {number} isosurfaceOpacity array of number per channel\n * @example let options = {\n   };\n */\nexport interface VolumeChannelDisplayOptions {\n  enabled?: boolean;\n  color?: [number, number, number];\n  specularColor?: [number, number, number];\n  emissiveColor?: [number, number, number];\n  glossiness?: number;\n  isosurfaceEnabled?: boolean;\n  isovalue?: number;\n  isosurfaceOpacity?: number;\n}\n\nexport enum RenderMode {\n  RAYMARCH = 0,\n  PATHTRACE = 1,\n  SLICE = 2,\n}\n\n/**\n * Provide options to control the visual appearance of a Volume\n * @typedef {Object} VolumeDisplayOptions\n * @property {Array.<VolumeChannelDisplayOptions>} channels array of channel display options\n * @property {number} density\n * @property {Array.<number>} translation xyz\n * @property {Array.<number>} rotation xyz angles in radians\n * @property {number} maskChannelIndex\n * @property {number} maskAlpha\n * @property {Array.<number>} clipBounds [xmin, xmax, ymin, ymax, zmin, zmax] all range from 0 to 1 as a percentage of the volume on that axis\n * @property {Array.<number>} scale xyz voxel size scaling\n * @property {boolean} maxProjection true or false (ray marching)\n * @property {number} renderMode 0 for raymarch, 1 for pathtrace\n * @property {number} shadingMethod 0 for phase, 1 for brdf, 2 for hybrid (path tracer)\n * @property {Array.<number>} gamma [min, max, scale]\n * @property {number} primaryRayStepSize in voxels\n * @property {number} secondaryRayStepSize in voxels\n * @property {boolean} showBoundingBox true or false\n * @property {Array.<number>} boundingBoxColor r,g,b for bounding box lines\n * @example let options = {\n   };\n */\nexport interface VolumeDisplayOptions {\n  channels?: VolumeChannelDisplayOptions[];\n  density?: number;\n  translation?: [number, number, number];\n  rotation?: [number, number, number];\n  maskChannelIndex?: number;\n  maskAlpha?: number;\n  clipBounds?: [number, number, number, number, number, number];\n  maxProjection?: boolean;\n  renderMode?: RenderMode;\n  shadingMethod?: number;\n  gamma?: [number, number, number];\n  primaryRayStepSize?: number;\n  secondaryRayStepSize?: number;\n  showBoundingBox?: boolean;\n  boundingBoxColor?: [number, number, number];\n}\n\nexport const isOrthographicCamera = (def: Camera): def is OrthographicCamera =>\n  def && (def as OrthographicCamera).isOrthographicCamera;\n\nexport const enum ViewportCorner {\n  TOP_LEFT = \"top_left\",\n  TOP_RIGHT = \"top_right\",\n  BOTTOM_LEFT = \"bottom_left\",\n  BOTTOM_RIGHT = \"bottom_right\",\n}\nexport const isTop = (corner: ViewportCorner): boolean =>\n  corner === ViewportCorner.TOP_LEFT || corner === ViewportCorner.TOP_RIGHT;\nexport const isRight = (corner: ViewportCorner): boolean =>\n  corner === ViewportCorner.TOP_RIGHT || corner === ViewportCorner.BOTTOM_RIGHT;\n\nexport const DATARANGE_UINT8: [number, number] = [0, 255];\n","/** Object format used when passing multiple requests to RequestQueue at once. */\nexport type Request<V> = {\n  key: string;\n  requestAction: () => Promise<V>;\n};\n\nexport const DEFAULT_REQUEST_CANCEL_REASON = \"request cancelled\";\n\n/**\n * Internal object interface used by RequestQueue to store request metadata and callbacks.\n */\ninterface RequestItem<V> {\n  /** Key used to index this queue item. */\n  key: string;\n  /** Action to be run. */\n  action: () => Promise<V>;\n  /** Reference to the promise object that will be resolved when the action is complete. */\n  promise: Promise<V>;\n  /** Callback used to resolve the promise. */\n  resolve: (value?: V | PromiseLike<V> | undefined) => void;\n  /** Callback used to reject the promise. */\n  reject: (reason?: unknown) => void;\n  /** Optional, used to track timeouts if the item will be added to the queue later. */\n  timeoutId?: ReturnType<typeof setTimeout>;\n}\n\n/**\n * Manages a queue of asynchronous requests with unique string keys, which can be added to or cancelled.\n * If redundant requests with the same key are issued, the request action will only be run once per key\n * while the original request is still in the queue.\n */\nexport default class RequestQueue {\n  /**\n   * The maximum number of requests that can be handled concurrently.\n   * Once reached, additional requests will be queued up to run once a running request completes.\n   */\n  private maxActiveRequests: number;\n\n  /**\n   * The maximum number of requests that can be handled concurrently if only low-priority requests are waiting. Set\n   * lower than `concurrencyLimit` to always leave space for high-priority requests. Cannot be set higher than\n   * `concurrencyLimit`.\n   */\n  private maxLowPriorityRequests: number;\n\n  /** A queue of requests that are ready to be executed, in order of request time. */\n  private queue: string[];\n\n  /** A queue of low-priority tasks that are ready to be executed. `queue` must be empty before any of these tasks run. */\n  private queueLowPriority: string[];\n\n  /** Stores all requests, even those that are currently active. */\n  private allRequests: Map<string, RequestItem<unknown>>;\n\n  /** Stores requests whose actions are currently being run. */\n  private activeRequests: Set<string>;\n\n  /**\n   * Creates a new RequestQueue.\n   * @param maxActiveRequests The maximum number of requests that will be handled concurrently. This is 10 by default.\n   * @param maxLowPriorityRequests The maximum number of low-priority requests that will be handled concurrently. Equal\n   *    to `maxActiveRequests` by default, but may be set lower to always leave space for new high-priority requests.\n   */\n  constructor(maxActiveRequests = 10, maxLowPriorityRequests = 5) {\n    this.allRequests = new Map();\n    this.activeRequests = new Set();\n    this.queue = [];\n    this.queueLowPriority = [];\n    this.maxActiveRequests = maxActiveRequests;\n    this.maxLowPriorityRequests = Math.min(maxActiveRequests, maxLowPriorityRequests);\n  }\n\n  /**\n   * Stores request metadata to the internal map of all pending requests.\n   * @param key string identifier of the request.\n   * @param requestAction callable function action of the request.\n   * @returns a reference to the new, registered RequestItem.\n   */\n  private registerRequest<T>(key: string, requestAction: () => Promise<T>): RequestItem<T> {\n    // Create a new promise and store the resolve and reject callbacks for later.\n    // This lets us perform the actual action at a later point, when the request is at the\n    // front of the processing queue.\n    let promiseResolve, promiseReject;\n    const promise = new Promise<T>((resolve, reject) => {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n    // Store the request data.\n    const requestItem = {\n      key: key,\n      action: requestAction,\n      resolve: promiseResolve,\n      reject: promiseReject,\n      promise,\n    };\n    this.allRequests.set(key, requestItem);\n    return requestItem;\n  }\n\n  /**\n   * Moves a registered request into the processing queue, clearing any timeouts on the request.\n   * @param key string identifier of the request.\n   * @param lowPriority Whether this request should be added with low priority. False by default.\n   */\n  private addRequestToQueue(key: string, lowPriority?: boolean): void {\n    // Check that this request is not cancelled.\n    if (this.allRequests.has(key)) {\n      // Clear the request timeout, if it has one, since it is being added to the queue.\n      const requestItem = this.allRequests.get(key);\n      if (requestItem && requestItem.timeoutId) {\n        clearTimeout(requestItem.timeoutId);\n        requestItem.timeoutId = undefined;\n      }\n      if (!this.queue.includes(key) && !this.queueLowPriority.includes(key)) {\n        // Add to queue and check if the request can be processed right away.\n        if (lowPriority) {\n          this.queueLowPriority.push(key);\n        } else {\n          this.queue.push(key);\n        }\n        this.dequeue();\n      }\n    }\n  }\n\n  /**\n   * Adds a request with a unique key to the queue, if it doesn't already exist.\n   * @param key The key used to track the request.\n   * @param requestAction Function that will be called to complete the request. The function\n   *  will be run only once per unique key while the request exists, and may be deferred by the\n   *  queue at any time.\n   * @param lowPriority Whether this request should be added with low priority. False by default.\n   * @param delayMs Minimum delay, in milliseconds, before this request should be executed.\n   *\n   * NOTE: Cancelling a request while the action is running WILL NOT stop the action. If this behavior is desired,\n   * actions must be responsible for checking the RequestQueue, determining if the request is still valid (e.g.\n   * using `.hasRequest()`), and stopping or returning early.\n   *\n   * @returns A promise that will resolve on completion of the request, or reject if the request is cancelled.\n   *  If multiple requests are issued with the same key, a promise for the first request will be returned\n   *  until the request is resolved or cancelled.\n   *  Note that the return type of the promise will match that of the first request's instance.\n   */\n  public addRequest<T>(key: string, requestAction: () => Promise<T>, lowPriority = false, delayMs = 0): Promise<T> {\n    if (!this.allRequests.has(key)) {\n      // New request!\n      const requestItem = this.registerRequest(key, requestAction);\n      // If a delay is set, wait to add this to the queue.\n      if (delayMs > 0) {\n        const timeoutId = setTimeout(() => this.addRequestToQueue(key, lowPriority), delayMs);\n        // Save timeout information to request metadata\n        requestItem.timeoutId = timeoutId;\n      } else {\n        // No delay, add immediately\n        this.addRequestToQueue(key, lowPriority);\n      }\n    } else {\n      const lowPriorityIndex = this.queueLowPriority.indexOf(key);\n      if (lowPriorityIndex > -1 && !lowPriority) {\n        // This request is registered and queued, but is now being requested with high priority.\n        // Promote it to high priority.\n        this.queueLowPriority.splice(lowPriorityIndex, 1);\n        this.addRequestToQueue(key);\n      } else if (delayMs <= 0) {\n        // This request is registered, but is now being requested without a delay.\n        // Move into queue immediately if it's not already added, and clear any timeouts it may have.\n        this.addRequestToQueue(key, lowPriority);\n      }\n    }\n\n    const promise = this.allRequests.get(key)?.promise;\n    if (!promise) {\n      throw new Error(\"Found no promise to return when getting stored request data.\");\n    }\n    return promise as Promise<T>;\n  }\n\n  /**\n   * Adds multiple requests to the queue, with an optional delay between each.\n   * @param requests An array of RequestItems, which include a key and a request action.\n   * @param lowPriority Whether these requests should be added with low priority. False by default.\n   * @param delayMs An optional minimum delay in milliseconds to be added between each request.\n   *  For example, a delay of 10 ms will cause the second request to be added to the processing queue\n   *  after 10 ms, the third to added after 20 ms, and so on. Set to 10 ms by default.\n   * @returns An array of promises corresponding to the provided requests. (i.e., the `i`th value\n   * of the returned array will be a Promise for the resolution of `requests[i]`). If a request\n   *  with a matching key is already pending, returns the promise for the initial request.\n   */\n  public addRequests<T>(requests: Request<T>[], lowPriority = false, delayMs = 10): Promise<unknown>[] {\n    const promises: Promise<unknown>[] = [];\n    for (let i = 0; i < requests.length; i++) {\n      const item = requests[i];\n      const promise = this.addRequest(item.key, item.requestAction, lowPriority, delayMs * i);\n      promises.push(promise);\n    }\n    return promises;\n  }\n\n  /**\n   * Attempts to remove and run the next queued request item, if resources are available.\n   * @returns true if a request was started, or false if there are too many\n   * requests already active.\n   */\n  private async dequeue(): Promise<void> {\n    const numRequests = this.activeRequests.size;\n    if (\n      numRequests >= this.maxActiveRequests ||\n      (this.queue.length === 0 && (numRequests >= this.maxLowPriorityRequests || this.queueLowPriority.length === 0))\n    ) {\n      return;\n    }\n\n    const requestKey = this.queue.shift() ?? this.queueLowPriority.shift();\n    if (!requestKey) {\n      return;\n    }\n    if (this.activeRequests.has(requestKey)) {\n      // This request is already active, try the next one instead. (this shouldn't happen)\n      this.dequeue();\n      return;\n    }\n\n    const requestItem = this.allRequests.get(requestKey);\n    if (!requestItem) {\n      return;\n    }\n\n    const key = requestItem.key;\n    // Mark that this request is active\n    this.activeRequests.add(key);\n\n    await requestItem.action().then(requestItem.resolve, requestItem.reject);\n    this.activeRequests.delete(key);\n    this.allRequests.delete(key);\n    this.dequeue();\n  }\n\n  /**\n   * Removes any request matching the provided key from the queue and rejects its promise.\n   * @param key The key that should be matched against.\n   * @param cancelReason A message or object that will be used as the promise rejection.\n   */\n  public cancelRequest(key: string, cancelReason: unknown = DEFAULT_REQUEST_CANCEL_REASON): void {\n    if (!this.allRequests.has(key)) {\n      return;\n    }\n    const requestItem = this.allRequests.get(key);\n    if (requestItem) {\n      if (requestItem.timeoutId) {\n        // Cancel requests that have not been queued yet.\n        clearTimeout(requestItem.timeoutId);\n      }\n      // Reject the request, then clear from the queue and known requests.\n      requestItem.reject(cancelReason);\n    }\n    const queueIndex = this.queue.indexOf(key);\n    if (queueIndex > -1) {\n      this.queue.splice(queueIndex, 1);\n    } else {\n      const lowPriorityIndex = this.queueLowPriority.indexOf(key);\n      if (lowPriorityIndex > -1) {\n        this.queueLowPriority.splice(lowPriorityIndex, 1);\n      }\n    }\n    this.allRequests.delete(key);\n    this.activeRequests.delete(key);\n  }\n\n  /**\n   * Rejects all request promises and clears the queue.\n   * @param cancelReason A message or object that will be used as the promise rejection.\n   */\n  public cancelAllRequests(cancelReason: unknown = DEFAULT_REQUEST_CANCEL_REASON): void {\n    // Clear the queue so we don't do extra work while filtering it\n    this.queue = [];\n    this.queueLowPriority = [];\n    for (const key of this.allRequests.keys()) {\n      this.cancelRequest(key, cancelReason);\n    }\n  }\n\n  /**\n   * Returns whether a request with the given key exists in the RequestQueue and is not cancelled.\n   * @param key the key to search for.\n   * @returns true if the request is in the RequestQueue.\n   */\n  public hasRequest(key: string): boolean {\n    return this.allRequests.has(key);\n  }\n\n  /**\n   * Returns whether the request with the given key is currently running (not waiting in the queue).\n   * @param key the key to search for.\n   * @returns true if the request is actively running.\n   */\n  public requestRunning(key: string): boolean {\n    return this.activeRequests.has(key);\n  }\n}\n","import RequestQueue from \"./RequestQueue.js\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Resolver = (value?: any) => void;\ntype Rejecter = (reason?: unknown) => void;\n\ntype RequestSubscription = {\n  subscriberId: number;\n  resolve: Resolver;\n  reject: Rejecter;\n};\n\n/**\n * An extension of `RequestQueue` that adds a concept of \"subscribers,\" which may share references to a single request\n * or cancel their subscription without disrupting the request for other subscribers.\n */\nexport default class SubscribableRequestQueue {\n  private queue: RequestQueue;\n\n  /** The next unused subscriber ID. Increments whenever a subscriber is added. */\n  private nextSubscriberId: number;\n  /**\n   * Map of subscribers keyed by ID. Subscribers store a map to all their subscriptions by request key.\n   * Subscribers are only useful as handles to cancel subscriptions early, so we only need to store rejecters here.\n   */\n  private subscribers: Map<number, Map<string, Rejecter>>;\n  /** Map from \"inner\" request (managed by `queue`) to \"outer\" promises generated per-subscriber. */\n  private requests: Map<string, RequestSubscription[]>;\n\n  /**\n   * Since `SubscribableRequestQueue` wraps `RequestQueue`, its constructor may either take the same arguments as the\n   * `RequestQueue` constructor and create a new `RequestQueue`, or it may take an existing `RequestQueue` to wrap.\n   */\n  constructor(maxActiveRequests?: number, maxLowPriorityRequests?: number);\n  constructor(inner: RequestQueue);\n  constructor(maxActiveRequests?: number | RequestQueue, maxLowPriorityRequests?: number) {\n    if (typeof maxActiveRequests === \"number\" || maxActiveRequests === undefined) {\n      this.queue = new RequestQueue(maxActiveRequests, maxLowPriorityRequests);\n    } else {\n      this.queue = maxActiveRequests;\n    }\n    this.nextSubscriberId = 0;\n    this.subscribers = new Map();\n    this.requests = new Map();\n  }\n\n  /** Resolves all subscriptions to request `key` with `value` */\n  private resolveAll<T>(key: string, value: T): void {\n    const requests = this.requests.get(key);\n    if (requests) {\n      for (const { resolve, subscriberId } of requests) {\n        resolve(value);\n        this.subscribers.get(subscriberId)?.delete(key);\n      }\n      this.requests.delete(key);\n    }\n  }\n\n  /** Rejects all subscriptions to request `key` with `reason` */\n  private rejectAll(key: string, reason: unknown): void {\n    const requests = this.requests.get(key);\n    if (requests) {\n      for (const { reject, subscriberId } of requests) {\n        reject(reason);\n        this.subscribers.get(subscriberId)?.delete(key);\n      }\n      this.requests.delete(key);\n    }\n  }\n\n  /** Adds a new request subscriber. Returns a unique ID to identify this subscriber. */\n  addSubscriber(): number {\n    const subscriberId = this.nextSubscriberId;\n    this.nextSubscriberId++;\n    this.subscribers.set(subscriberId, new Map());\n    return subscriberId;\n  }\n\n  /**\n   * Queues a new request, or adds a subscription if the request is already queued/running.\n   *\n   * If `subscriberId` is already subscribed to the request, this rejects the existing promise and returns a new one.\n   */\n  addRequest<T>(\n    key: string,\n    subscriberId: number,\n    requestAction: () => Promise<T>,\n    lowPriority?: boolean,\n    delayMs?: number\n  ): Promise<T> {\n    // Create single underlying request if it does not yet exist\n    this.queue\n      .addRequest(key, requestAction, lowPriority, delayMs)\n      .then((value) => this.resolveAll(key, value))\n      .catch((reason) => this.rejectAll(key, reason));\n\n    if (!this.requests.has(key)) {\n      this.requests.set(key, []);\n    }\n\n    // Validate subscriber\n    if (subscriberId >= this.nextSubscriberId || subscriberId < 0) {\n      throw new Error(`SubscribableRequestQueue: subscriber id ${subscriberId} has not been registered`);\n    }\n    const subscriber = this.subscribers.get(subscriberId);\n    if (!subscriber) {\n      throw new Error(`SubscribableRequestQueue: subscriber id ${subscriberId} has been removed`);\n    }\n    const existingRequest = subscriber.get(key);\n    if (existingRequest) {\n      this.rejectSubscription(key, existingRequest, \"SubscribableRequestQueue: request re-queued while running\");\n    }\n\n    // Create promise and add to list of requests\n    return new Promise<T>((resolve, reject) => {\n      this.requests.get(key)?.push({ resolve, reject, subscriberId });\n      this.subscribers.get(subscriberId)?.set(key, reject);\n    });\n  }\n\n  /**\n   * Rejects a subscription and removes it from the list of subscriptions for a request, then cancels the underlying\n   * request if it is no longer subscribed and is not running already.\n   */\n  private rejectSubscription(key: string, reject: Rejecter, cancelReason?: unknown): void {\n    // Reject the outer \"subscription\" promise\n    reject(cancelReason);\n\n    // Get the list of subscriptions for this request\n    const subscriptions = this.requests.get(key);\n    if (!subscriptions) {\n      // This should never happen\n      return;\n    }\n    // Remove this request subscription by ref equality to `reject`\n    const idx = subscriptions.findIndex((sub) => sub.reject === reject);\n    if (idx >= 0) {\n      subscriptions.splice(idx, 1);\n    }\n\n    // Remove the underlying request if there are no more subscribers and the request is not already running\n    if (subscriptions.length < 1 && !this.queue.requestRunning(key)) {\n      this.queue.cancelRequest(key, cancelReason);\n      this.requests.delete(key);\n    }\n  }\n\n  /** Cancels a request subscription, and cancels the underlying request if it is no longer subscribed or running. */\n  cancelRequest(key: string, subscriberId: number, cancelReason?: unknown): boolean {\n    const subscriber = this.subscribers.get(subscriberId);\n    if (!subscriber) {\n      return false;\n    }\n\n    const reject = subscriber.get(key);\n    if (!reject) {\n      return false;\n    }\n\n    this.rejectSubscription(key, reject, cancelReason);\n    subscriber.delete(key);\n    return true;\n  }\n\n  /** Removes a subscriber and cancels its remaining subscriptions. */\n  removeSubscriber(subscriberId: number, cancelReason?: unknown): void {\n    const subscriptions = this.subscribers.get(subscriberId);\n    if (subscriptions) {\n      for (const [key, reject] of subscriptions.entries()) {\n        this.rejectSubscription(key, reject, cancelReason);\n      }\n      this.subscribers.delete(subscriberId);\n    }\n  }\n\n  /** Returns whether a request with the given `key` is running or waiting in the queue */\n  hasRequest(key: string): boolean {\n    return this.queue.hasRequest(key);\n  }\n\n  /** Returns whether a request with the given `key` is running */\n  requestRunning(key: string): boolean {\n    return this.queue.requestRunning(key);\n  }\n\n  /** Returns whether a subscriber with the given `subscriberId` exists */\n  hasSubscriber(subscriberId: number): boolean {\n    return this.subscribers.has(subscriberId);\n  }\n\n  /** Returns whether a subscriber with the given `subscriberId` is subscribed to the request with the given `key` */\n  isSubscribed(subscriberId: number, key: string): boolean {\n    return this.subscribers.get(subscriberId)?.has(key) ?? false;\n  }\n}\n","import { serializeError } from \"serialize-error\";\n\nimport VolumeCache from \"../VolumeCache.js\";\nimport { VolumeFileFormat, createVolumeLoader, pathToFileType } from \"../loaders/index.js\";\nimport { ThreadableVolumeLoader } from \"../loaders/IVolumeLoader.js\";\nimport RequestQueue from \"../utils/RequestQueue.js\";\nimport SubscribableRequestQueue from \"../utils/SubscribableRequestQueue.js\";\nimport type { WorkerRequest, WorkerRequestPayload, WorkerResponse, WorkerResponsePayload } from \"./types.js\";\nimport { WorkerMsgType, WorkerResponseResult } from \"./types.js\";\nimport { rebuildImageInfo, rebuildLoadSpec } from \"./util.js\";\n\nlet cache: VolumeCache | undefined = undefined;\nlet queue: RequestQueue | undefined = undefined;\nlet subscribableQueue: SubscribableRequestQueue | undefined = undefined;\nlet loader: ThreadableVolumeLoader | undefined = undefined;\nlet initialized = false;\nlet copyOnLoad = false;\n\ntype MessageHandler<T extends WorkerMsgType> = (payload: WorkerRequestPayload<T>) => Promise<WorkerResponsePayload<T>>;\n\nconst messageHandlers: { [T in WorkerMsgType]: MessageHandler<T> } = {\n  [WorkerMsgType.INIT]: ({ maxCacheSize, maxActiveRequests, maxLowPriorityRequests }) => {\n    if (!initialized) {\n      cache = new VolumeCache(maxCacheSize);\n      queue = new RequestQueue(maxActiveRequests, maxLowPriorityRequests);\n      subscribableQueue = new SubscribableRequestQueue(queue);\n      initialized = true;\n    }\n    return Promise.resolve();\n  },\n\n  [WorkerMsgType.CREATE_LOADER]: async ({ path, options }) => {\n    const pathString = Array.isArray(path) ? path[0] : path;\n    const fileType = options?.fileType || pathToFileType(pathString);\n    copyOnLoad = fileType === VolumeFileFormat.JSON;\n    loader = await createVolumeLoader(path, { ...options, cache, queue: subscribableQueue });\n    return loader !== undefined;\n  },\n\n  [WorkerMsgType.CREATE_VOLUME]: async (loadSpec) => {\n    if (loader === undefined) {\n      throw new Error(\"No loader created\");\n    }\n\n    return await loader.createImageInfo(rebuildLoadSpec(loadSpec));\n  },\n\n  [WorkerMsgType.LOAD_DIMS]: async (loadSpec) => {\n    if (loader === undefined) {\n      throw new Error(\"No loader created\");\n    }\n    return await loader.loadDims(rebuildLoadSpec(loadSpec));\n  },\n\n  [WorkerMsgType.LOAD_VOLUME_DATA]: async ({ imageInfo, loadSpec, loaderId, loadId }) => {\n    if (loader === undefined) {\n      throw new Error(\"No loader created\");\n    }\n\n    return await loader.loadRawChannelData(\n      rebuildImageInfo(imageInfo),\n      rebuildLoadSpec(loadSpec),\n      (channelIndex, data, ranges, atlasDims) => {\n        const message: WorkerResponse<WorkerMsgType> = {\n          responseResult: WorkerResponseResult.EVENT,\n          loaderId,\n          loadId,\n          channelIndex,\n          data,\n          ranges,\n          atlasDims,\n        };\n        const dataTransfers = data.map((d) => d.buffer);\n        (self as unknown as Worker).postMessage(message, copyOnLoad ? [] : dataTransfers);\n      }\n    );\n  },\n\n  [WorkerMsgType.SET_PREFETCH_PRIORITY_DIRECTIONS]: (directions) => {\n    // Silently does nothing if the loader isn't an `OMEZarrLoader`\n    loader?.setPrefetchPriority(directions);\n    return Promise.resolve();\n  },\n\n  [WorkerMsgType.SYNCHRONIZE_MULTICHANNEL_LOADING]: (syncChannels) => {\n    loader?.syncMultichannelLoading(syncChannels);\n    return Promise.resolve();\n  },\n};\n\nself.onmessage = async <T extends WorkerMsgType>({ data }: MessageEvent<WorkerRequest<T>>) => {\n  const { msgId, type, payload } = data;\n  let message: WorkerResponse<T>;\n\n  try {\n    const response = await messageHandlers[type](payload);\n    message = { responseResult: WorkerResponseResult.SUCCESS, msgId, type, payload: response };\n  } catch (e) {\n    message = { responseResult: WorkerResponseResult.ERROR, msgId, type, payload: serializeError(e) };\n  }\n  self.postMessage(message);\n};\n","import type { ErrorObject } from \"serialize-error\";\n\nimport type { ImageInfo } from \"../Volume.js\";\nimport type { CreateLoaderOptions, PrefetchDirection } from \"../loaders/index.js\";\nimport type { LoadSpec, LoadedVolumeInfo, VolumeDims } from \"../loaders/IVolumeLoader.js\";\n\n/** The types of requests that can be made to the worker. Mostly corresponds to methods on `IVolumeLoader`. */\nexport const enum WorkerMsgType {\n  INIT,\n  CREATE_LOADER,\n  CREATE_VOLUME,\n  LOAD_DIMS,\n  LOAD_VOLUME_DATA,\n  SET_PREFETCH_PRIORITY_DIRECTIONS,\n  SYNCHRONIZE_MULTICHANNEL_LOADING,\n}\n\n/** The kind of response a worker can return - `SUCCESS`, `ERROR`, or `EVENT`. */\nexport const enum WorkerResponseResult {\n  SUCCESS,\n  ERROR,\n  EVENT,\n}\n\n/** All messages to/from a worker carry a `msgId`, a `type`, and a `payload` (whose type is determined by `type`). */\ntype WorkerMsgBase<T extends WorkerMsgType, P> = {\n  msgId: number;\n  type: T;\n  payload: P;\n};\n\n/** Maps each `WorkerMsgType` to the type of the payload of requests of that type. */\nexport type WorkerRequestPayload<T extends WorkerMsgType> = {\n  [WorkerMsgType.INIT]: {\n    maxCacheSize?: number;\n    maxActiveRequests?: number;\n    maxLowPriorityRequests?: number;\n  };\n  [WorkerMsgType.CREATE_LOADER]: {\n    path: string | string[];\n    options?: CreateLoaderOptions;\n  };\n  [WorkerMsgType.CREATE_VOLUME]: LoadSpec;\n  [WorkerMsgType.LOAD_DIMS]: LoadSpec;\n  [WorkerMsgType.LOAD_VOLUME_DATA]: {\n    imageInfo: ImageInfo;\n    loadSpec: LoadSpec;\n    loaderId: number;\n    loadId: number;\n  };\n  [WorkerMsgType.SET_PREFETCH_PRIORITY_DIRECTIONS]: PrefetchDirection[];\n  [WorkerMsgType.SYNCHRONIZE_MULTICHANNEL_LOADING]: boolean;\n}[T];\n\n/** Maps each `WorkerMsgType` to the type of the payload of responses of that type. */\nexport type WorkerResponsePayload<T extends WorkerMsgType> = {\n  [WorkerMsgType.INIT]: void;\n  [WorkerMsgType.CREATE_LOADER]: boolean;\n  [WorkerMsgType.CREATE_VOLUME]: LoadedVolumeInfo;\n  [WorkerMsgType.LOAD_DIMS]: VolumeDims[];\n  [WorkerMsgType.LOAD_VOLUME_DATA]: Partial<LoadedVolumeInfo>;\n  [WorkerMsgType.SET_PREFETCH_PRIORITY_DIRECTIONS]: void;\n  [WorkerMsgType.SYNCHRONIZE_MULTICHANNEL_LOADING]: void;\n}[T];\n\n/** Currently the only event a loader can produce is a `ChannelLoadEvent` when a batch of channels loads. */\nexport type ChannelLoadEvent = {\n  loaderId: number;\n  loadId: number;\n  channelIndex: number[];\n  data: Uint8Array[];\n  ranges: [number, number][];\n  atlasDims?: [number, number];\n};\n\n/** All valid types of worker requests, with some `WorkerMsgType` and a matching payload type. */\nexport type WorkerRequest<T extends WorkerMsgType> = WorkerMsgBase<T, WorkerRequestPayload<T>>;\n/** All valid types of worker responses: `SUCCESS` with a matching payload, `ERROR` with a message, or an `EVENT`. */\nexport type WorkerResponse<T extends WorkerMsgType> =\n  | ({ responseResult: WorkerResponseResult.SUCCESS } & WorkerMsgBase<T, WorkerResponsePayload<T>>)\n  | ({ responseResult: WorkerResponseResult.ERROR } & WorkerMsgBase<T, ErrorObject>)\n  | ({ responseResult: WorkerResponseResult.EVENT } & ChannelLoadEvent);\n","import { Box3, Vector2, Vector3 } from \"three\";\nimport { LoadSpec } from \"../loaders/IVolumeLoader\";\nimport { ImageInfo } from \"../Volume\";\n\n/** Recreates a `LoadSpec` that has just been sent to/from a worker to restore three.js object prototypes */\nexport function rebuildLoadSpec(spec: LoadSpec): LoadSpec {\n  return {\n    ...spec,\n    subregion: new Box3(new Vector3().copy(spec.subregion.min), new Vector3().copy(spec.subregion.max)),\n  };\n}\n\n/** Recreates an `ImageInfo` that has just been sent to/from a worker to restore three.js object prototypes */\nexport function rebuildImageInfo(imageInfo: ImageInfo): ImageInfo {\n  return {\n    ...imageInfo,\n    originalSize: new Vector3().copy(imageInfo.originalSize),\n    atlasTileDims: new Vector2().copy(imageInfo.atlasTileDims),\n    volumeSize: new Vector3().copy(imageInfo.volumeSize),\n    subregionSize: new Vector3().copy(imageInfo.subregionSize),\n    subregionOffset: new Vector3().copy(imageInfo.subregionOffset),\n    physicalPixelSize: new Vector3().copy(imageInfo.physicalPixelSize),\n    transform: {\n      translation: new Vector3().copy(imageInfo.transform.translation),\n      rotation: new Vector3().copy(imageInfo.transform.rotation),\n    },\n  };\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_geotiff_dist-module_geotiff_js\",\"vendors-node_modules_zarrita_core_dist_src_open_js-node_modules_zarrita_indexing_dist_src_ops-1ee624\"], () => (__webpack_require__(\"./src/workers/VolumeLoadWorker.ts\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".volume-viewer-ui.bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_workers_VolumeLoadWorker_ts\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_aics_volume_viewer\"] = self[\"webpackChunk_aics_volume_viewer\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\n\t\t__webpack_require__.e(\"vendors-node_modules_geotiff_dist-module_geotiff_js\"),\n\t\t__webpack_require__.e(\"vendors-node_modules_zarrita_core_dist_src_open_js-node_modules_zarrita_indexing_dist_src_ops-1ee624\")\n\t]).then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":["DataTexture","RedFormat","UnsignedByteType","RGBAFormat","LinearFilter","NearestFilter","Histogram","Lut","LUT_ARRAY_LENGTH","Channel","constructor","name","loaded","imgData","data","Uint8ClampedArray","width","height","rawMin","rawMax","dataTexture","Uint8Array","lutTexture","minFilter","magFilter","generateMipmaps","volumeData","histogram","dims","lut","createFromMinMax","colorPalette","fill","colorPaletteAlpha","combineLuts","rgbColor","out","ret","rgb","set","i","image","needsUpdate","setRawDataRange","min","max","remapDomains","getHistogram","getIntensity","x","y","z","getIntensityFromAtlas","numXtiles","tilex","tiley","Math","floor","offset","rebuildDataTexture","w","h","dispose","format","type","setBits","bitsArray","buffer","hmin","hmax","findAutoIJBins","setLut","unpackVolumeFromAtlas","volimgdata","atlasrow","tileoffset","tilerowoffset","destOffset","j","subarray","setFromVolumeData","vx","vy","vz","ax","ay","packToAtlas","console","log","sourceOffset","setColorPalette","palette","setColorPaletteAlpha","alpha","bins","Uint32Array","dataMin","dataMax","maxBin","length","nonzeroPixelCount","getMin","getMax","getNumBins","getBin","findBinOfPercentile","pct","pixcount","limit","count","findBestFitBins","AUTO_THRESHOLD","threshold","findAutoMinMax","PERCENTAGE","th","b","e","getColorByChannelIndex","clamp","val","cmin","cmax","lerp","xmin","xmax","a","remapDomain","value","valueMin","valueMax","oldMin","oldMax","newMin","newMax","pctOfRange","newValue","pctOfOldRange","remapped","remapDomainForCP","iOld","pctOfNewRange","LUT_ENTRIES","controlPointToRGBA","controlPoint","color","opacity","controlPoints","createFullRange","tmp","startVal","push","endVal","createFromWindowLevel","wnd","lvl","createFromControlPoints","sort","rgba","startx","c0","c1","color0","color1","lastIndex","createFromEqHistogram","map","div","lutControlPoints","slope","lastSlope","lastOpacity","round","createLabelColors","lastr","lastg","lastb","lasta","r","g","remapLut","remapControlPoints","newLut","i0","i1","ceil","newControlPoints","cp","newCP","Vector2","Vector3","LoadSpec","MAX_ATLAS_EDGE","pickLevelToLoadUnscaled","getDefaultImageInfo","originalSize","atlasTileDims","volumeSize","subregionSize","subregionOffset","physicalPixelSize","spatialUnit","numChannels","channelNames","channelColors","times","timeScale","timeUnit","numMultiscaleLevels","multiscaleLevel","transform","translation","rotation","Volume","imageInfo","loadSpec","loader","scaleLevelBias","maxAtlasEdge","channels","Array","from","_val","idx","loadSpecRequired","slice","subregion","clone","imageMetadata","normRegionSize","normRegionOffset","physicalSize","physicalScale","normPhysicalSize","tickMarkPhysicalLength","setVoxelSize","channelColorsDefault","index","channel","toArray","physicalUnitSymbol","volumeDataObservers","setUnloaded","forEach","isLoaded","updateDimensions","divide","mustLoadNewData","time","containsBox","some","includes","mayLoadNewScaleLevel","equals","updateRequiredData","required","onChannelLoaded","shouldReload","loadDims","dimsZYX","shape","levelToLoad","loadNewData","loadVolumeData","undefined","size","multiply","divideScalar","log10","setUnitSymbol","symbol","getContentCenter","add","subScalar","cleanup","getChannel","channelIndex","batch","every","channelLoadCallback","observer","onVolumeData","setChannelDataFromAtlas","atlasdata","atlaswidth","atlasheight","setChannelDataFromVolume","range","appendEmptyChannel","chname","chcolor","onVolumeChannelAdded","c","getRotation","getTranslation","voxelsToWorldSpace","xyz","m","fromArray","multiplyScalar","addVolumeDataObserver","o","removeVolumeDataObserver","indexOf","splice","removeAllVolumeDataObservers","CACHE_MAX_SIZE_DEFAULT","VolumeCache","maxSize","entries","Map","currentSize","first","last","numberOfEntries","removeEntryFromStore","entry","delete","key","byteLength","removeEntryFromList","prev","next","addEntryAsFirst","moveEntryToFirst","evictLast","error","evict","insert","getResult","getEntry","newEntry","result","get","clearWithPrefix","prefix","startsWith","clear","defaultColors","HSVtoRGB","s","v","hh","arguments","hsv","f","p","q","t","LCG","imul","myrand","Box3","buildDefaultMetadata","loadSpecToString","spec","VolumeDims","spacing","spaceUnit","dataType","ThreadableVolumeLoader","setPrefetchPriority","_directions","syncMultichannelLoading","_sync","createVolume","adjustedLoadSpec","createImageInfo","vol","volume","loadSpecOverride","onChannelData","channelIndices","dataArrays","ranges","atlasDims","loadRawChannelData","DATARANGE_UINT8","convertImageInfo","json","tiles","cols","rows","tile_width","tile_height","pixel_size_x","pixel_size_y","pixel_size_z","pixel_size_unit","channel_names","channel_colors","time_scale","time_unit","userData","JsonImageInfoLoader","urls","cache","isArray","jsonInfo","getJsonImageInfo","cachedInfo","response","fetch","d","onData","images","requestedChannels","filter","ch","urlPrefix","replace","element","wrappedOnData","loadVolumeAtlasData","flatMap","imageArray","cacheHit","chindex","cacheResult","mode","blob","bitmap","createImageBitmap","canvas","OffscreenCanvas","ctx","getContext","globalCompositeOperation","globalAlpha","drawImage","iData","getImageData","channelsBits","px","zarr","zarrGet","FetchStore","SubscribableRequestQueue","composeSubregion","computePackedAtlasDims","convertSubregionToPixels","pickLevelToLoad","unitNameToSymbol","ChunkPrefetchIterator","WrappedStore","getDimensionCount","getScale","getSourceChannelNames","matchSourceScaleLevels","orderByDimension","orderByTCZYX","remapAxesToTCZYX","VolumeLoadError","VolumeLoadErrorType","wrapVolumeLoadError","validateOMEZarrMetadata","CHUNK_REQUEST_CANCEL_REASON","convertChannel","channelData","u8","DEFAULT_FETCH_OPTIONS","maxPrefetchDistance","maxPrefetchChunks","OMEZarrLoader","syncChannels","sources","requestQueue","fetchOptions","priorityDirections","createLoader","scenes","queue","concurrencyLimit","prefetchConcurrencyLimit","urlsArr","scenesArr","sourceProms","url","store","root","group","open","kind","catch","NOT_FOUND","scene","attrs","multiscales","warn","omero","multiscaleMetadata","lvlProms","datasets","path","resolve","scaleLevels","Promise","all","axesTCZYX","axes","omeroMetadata","channelOffset","channelCount","priorityDirs","getUnitSymbols","source","xi","spaceUnitName","unit","spaceUnitSymbol","ti","timeUnitName","timeUnitSymbol","getLevelShapesZYX","level","valsTCZYX","sourceIdx","valsDimension","defaultValue","matchChannelToSource","absoluteChannelIndex","lastSrcIdx","lastSrc","lastSrcNumChannels","maxChannelIndex","INVALID_METADATA","firstGreaterIdx","findIndex","src","sourceIndex","channelIndexInSource","directions","sync","maxExtent","regionSize","getSize","regionArr","scale","source0","hasT","hasZ","shape0","shapeLv","sourceLast","cLast","lastHasC","tindex","pxDims0","pxSize0","pxDimsLv","pxSizeLv","channelNamesMap","sourceChannelNames","channelName","numMatchingChannels","scale5d","imgdata","fullExtentLoadSpec","prefetchChunk","scaleLevel","coords","subscriber","separator","endsWith","join","isPrefetch","LOAD_DATA_FAILED","beginPrefetch","keys","chunkCoords","numDims","coordsInDimensionOrder","trim","split","parseInt","sourceCoords","chunkDimsTCZYX","chunkDimsUnordered","dim","chunks","prefetchIterator","addSubscriber","prefetchCount","chunk","sourceScaleLevel","prefetchSubscriber","removeSubscriber","updateImageInfoForLoad","array0Shape","regionPx","volumeExtent","updatedImageInfo","channelIndexes","_","reportKeyBase","sub","resultChannelIndices","resultChannelData","resultChannelRanges","channelPromises","sourceCh","unorderedSpec","sliceSpec","reportKey","opts","converted","loadSubscriber","then","sizeX","sizeY","sizeZ","sizeC","RawArrayLoader","rawData","rawDataInfo","Error","_loadSpec","volSizeBytes","fromUrl","prepareXML","xml","expr","getOME","parser","DOMParser","xmlDoc","parseFromString","getElementsByTagName","cause","OMEDims","sizex","sizey","sizez","sizec","sizet","pixeltype","dimensionorder","pixelsizex","pixelsizey","pixelsizez","channelnames","getAttributeOrError","el","attr","getAttribute","getOMEDims","imageEl","pixelsEl","Number","channelsEls","id","getBytesPerSample","TiffLoader","loadOmeDims","tiff","allowFullFile","getImage","tiffimgdesc","getFileDirectory","ImageDescription","omeEl","image0El","targetSize","tilesizex","tilesizey","params","dimensionOrder","bytesPerSample","worker","Worker","URL","import","meta","onmessage","terminate","onerror","alert","lineno","filename","message","postMessage","errorConstructors","NodeNotFoundError","KeyError","options","UNKNOWN","ignore","UNIT_SYMBOLS","angstrom","day","foot","hour","inch","meter","micron","mile","minute","parsec","second","yard","SI_UNITS","SI_PREFIX_ABBVS","micro","deca","unitName","prefixedSIUnit","find","siUnit","substring","capitalize","prefixAbbr","toUpperCase","tw","nextrows","nextcols","ratio","nrows","ncols","doesSpatialDimensionFitInAtlas","spatialDimZYX","xtiles","ytiles","estimateLevelForAtlas","spatialDimsZYX","maxCeil","scaleDims","scaleDimsToSubregion","scaleMultipleDimsToSubregion","smallestDims","TOO_LARGE","scaledDims","region","container","isEmpty","obj","Object","prototype","hasOwnProperty","call","metadata","PrefetchDirection","VolumeFileFormat","pathToFileType","JSON","TIFF","ZARR","createVolumeLoader","pathString","fileType","DATA","rawArrayOptions","allEqual","arr","pushN","n","directionToIndex","dir","absDir","updateMinMax","minmax","tzyxMaxPrefetchOffset","tczyxChunksPerSource","extrema","Infinity","directionStates","priorityDirectionStates","direction","start","flat","dimension","tczyxIndex","end","endsPerSource","chunkDims","sourceEnd","directionState","iterateDirections","offsetDir","newChunk","Symbol","iterator","baseStore","_key","_value","getAndCache","cacheKey","ZARR_EXTS","keyPrefix","fullKey","addRequest","label","axisNames","axis","axisIdx","noXAxis","orderTCZYX","specLen","dataset","transforms","coordinateTransformations","isScaleTransform","scaleTransform","compareZarrArraySize","aArr","aTCZYX","bArr","bTCZYX","aZ","bZ","diffZ","diffY","diffX","EPSILON","aboutEquals","abs","scaleTransformsAreEqual","aSrc","aLevel","bSrc","bLevel","aScale","bScale","matchedLevels","matchedMetas","scaleIndexes","smallestIdx","smallestSrc","smallestArr","currentIdx","currentSrc","currentArr","ordering","INVALID_MULTI_SOURCE_ZARR","largestT","currentT","matchedScaleLevel","srcIdx","isObjectWithProp","prop","assertMetadataHasProp","assertPropIsArray","multiscaleIdx","multiscaleMeta","multiscaleMetaName","multiscaleName","FUSE_DISABLED_RGB_COLOR","RenderMode","isOrthographicCamera","def","ViewportCorner","isTop","corner","TOP_LEFT","TOP_RIGHT","isRight","BOTTOM_RIGHT","DEFAULT_REQUEST_CANCEL_REASON","RequestQueue","maxActiveRequests","maxLowPriorityRequests","allRequests","activeRequests","Set","queueLowPriority","registerRequest","requestAction","promiseResolve","promiseReject","promise","reject","requestItem","action","addRequestToQueue","lowPriority","has","timeoutId","clearTimeout","dequeue","delayMs","setTimeout","lowPriorityIndex","addRequests","requests","promises","item","numRequests","requestKey","shift","cancelRequest","cancelReason","queueIndex","cancelAllRequests","hasRequest","requestRunning","nextSubscriberId","subscribers","resolveAll","subscriberId","rejectAll","reason","existingRequest","rejectSubscription","subscriptions","hasSubscriber","isSubscribed","serializeError","WorkerMsgType","WorkerResponseResult","rebuildImageInfo","rebuildLoadSpec","subscribableQueue","initialized","copyOnLoad","messageHandlers","INIT","maxCacheSize","CREATE_LOADER","CREATE_VOLUME","LOAD_DIMS","LOAD_VOLUME_DATA","loaderId","loadId","responseResult","EVENT","dataTransfers","self","SET_PREFETCH_PRIORITY_DIRECTIONS","SYNCHRONIZE_MULTICHANNEL_LOADING","msgId","payload","SUCCESS","ERROR","copy"],"sourceRoot":""}