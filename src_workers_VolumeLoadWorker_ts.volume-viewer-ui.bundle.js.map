{"version":3,"file":"src_workers_VolumeLoadWorker_ts.volume-viewer-ui.bundle.js","mappings":"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CxDC,aAAa,EAAE,IAAIP,0CAAO,CAAC,CAAC,CAACizB,IAAI,CAACxxB,SAAS,CAAClB,aAAa,CAAC;IAC1DC,UAAU,EAAE,IAAIP,0CAAO,CAAC,CAAC,CAACgzB,IAAI,CAACxxB,SAAS,CAACjB,UAAU,CAAC;IACpDC,aAAa,EAAE,IAAIR,0CAAO,CAAC,CAAC,CAACgzB,IAAI,CAACxxB,SAAS,CAAChB,aAAa,CAAC;IAC1DC,eAAe,EAAE,IAAIT,0CAAO,CAAC,CAAC,CAACgzB,IAAI,CAACxxB,SAAS,CAACf,eAAe,CAAC;IAC9DC,iBAAiB,EAAE,IAAIV,0CAAO,CAAC,CAAC,CAACgzB,IAAI,CAACxxB,SAAS,CAACd,iBAAiB,CAAC;IAClEU,SAAS,EAAE;MACTC,WAAW,EAAE,IAAIrB,0CAAO,CAAC,CAAC,CAACgzB,IAAI,CAACxxB,SAAS,CAACJ,SAAS,CAACC,WAAW,CAAC;MAChEC,QAAQ,EAAE,IAAItB,0CAAO,CAAC,CAAC,CAACgzB,IAAI,CAACxxB,SAAS,CAACJ,SAAS,CAACE,QAAQ;IAC3D;EAAC;AAEL;;;;;;;;;;AC3BA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WClBA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;UENA;UACA","sources":["webpack://@aics/volume-viewer/./src/Channel.ts","webpack://@aics/volume-viewer/./src/Histogram.ts","webpack://@aics/volume-viewer/./src/Volume.ts","webpack://@aics/volume-viewer/./src/VolumeCache.ts","webpack://@aics/volume-viewer/./src/constants/colors.ts","webpack://@aics/volume-viewer/./src/loaders/IVolumeLoader.ts","webpack://@aics/volume-viewer/./src/loaders/JsonImageInfoLoader.ts","webpack://@aics/volume-viewer/./src/loaders/OmeZarrLoader.ts","webpack://@aics/volume-viewer/./src/loaders/TiffLoader.ts","webpack://@aics/volume-viewer/./src/loaders/VolumeLoaderUtils.ts","webpack://@aics/volume-viewer/./src/loaders/index.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/ChunkPrefetchIterator.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/WrappedStore.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/types.ts","webpack://@aics/volume-viewer/./src/loaders/zarr_utils/utils.ts","webpack://@aics/volume-viewer/./src/utils/RequestQueue.ts","webpack://@aics/volume-viewer/./src/utils/SubscribableRequestQueue.ts","webpack://@aics/volume-viewer/./src/workers/VolumeLoadWorker.ts","webpack://@aics/volume-viewer/./src/workers/types.ts","webpack://@aics/volume-viewer/./src/workers/util.ts","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|http","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|https","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source/client|url","webpack://@aics/volume-viewer/ignored|/home/runner/work/volume-viewer/volume-viewer/node_modules/geotiff/dist-module/source|fs","webpack://@aics/volume-viewer/webpack/bootstrap","webpack://@aics/volume-viewer/webpack/runtime/chunk loaded","webpack://@aics/volume-viewer/webpack/runtime/compat get default export","webpack://@aics/volume-viewer/webpack/runtime/define property getters","webpack://@aics/volume-viewer/webpack/runtime/ensure chunk","webpack://@aics/volume-viewer/webpack/runtime/get javascript chunk filename","webpack://@aics/volume-viewer/webpack/runtime/global","webpack://@aics/volume-viewer/webpack/runtime/hasOwnProperty shorthand","webpack://@aics/volume-viewer/webpack/runtime/make namespace object","webpack://@aics/volume-viewer/webpack/runtime/publicPath","webpack://@aics/volume-viewer/webpack/runtime/importScripts chunk loading","webpack://@aics/volume-viewer/webpack/runtime/startup chunk dependencies","webpack://@aics/volume-viewer/webpack/before-startup","webpack://@aics/volume-viewer/webpack/startup","webpack://@aics/volume-viewer/webpack/after-startup"],"sourcesContent":["import { DataTexture, RedFormat, UnsignedByteType, RGBAFormat, LinearFilter, NearestFilter } from \"three\";\nimport Histogram, { LUT_ARRAY_LENGTH } from \"./Histogram.js\";\n\ninterface ChannelImageData {\n  /** Returns the one-dimensional array containing the data in RGBA order, as integers in the range 0 to 255. */\n  readonly data: Uint8ClampedArray;\n  /** Returns the actual dimensions of the data in the ImageData object, in pixels. */\n  readonly height: number;\n  /** Returns the actual dimensions of the data in the ImageData object, in pixels. */\n  readonly width: number;\n}\n\n// Data and processing for a single channel\nexport default class Channel {\n  public loaded: boolean;\n  public imgData: ChannelImageData;\n  public volumeData: Uint8Array;\n  public name: string;\n  public histogram: Histogram;\n  public lut: Uint8Array;\n  public colorPalette: Uint8Array;\n  public colorPaletteAlpha: number;\n  public dims: [number, number, number];\n  public dataTexture: DataTexture;\n  public lutTexture: DataTexture;\n\n  constructor(name: string) {\n    this.loaded = false;\n    this.imgData = { data: new Uint8ClampedArray(), width: 0, height: 0 };\n\n    // on gpu\n    this.dataTexture = new DataTexture(new Uint8Array(), 0, 0);\n    this.lutTexture = new DataTexture(new Uint8Array(LUT_ARRAY_LENGTH), 256, 1, RGBAFormat, UnsignedByteType);\n    this.lutTexture.minFilter = this.lutTexture.magFilter = LinearFilter;\n    this.lutTexture.generateMipmaps = false;\n\n    this.volumeData = new Uint8Array();\n    this.name = name;\n    this.histogram = new Histogram(new Uint8Array());\n    this.dims = [0, 0, 0];\n\n    // intensity remapping lookup table\n    this.lut = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n    // per-intensity color labeling (disabled initially)\n    this.colorPalette = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n    // store in 0..1 range. 1 means fully colorPalette, 0 means fully lut.\n    this.colorPaletteAlpha = 0.0;\n  }\n\n  // rgbColor is [0..255, 0..255, 0..255]\n  public combineLuts(rgbColor: [number, number, number] | number, out?: Uint8Array): Uint8Array {\n    const ret = out ? out : new Uint8Array(LUT_ARRAY_LENGTH);\n    if (!rgbColor) {\n      return ret;\n    }\n    const rgb = [rgbColor[0] / 255.0, rgbColor[1] / 255.0, rgbColor[2] / 255.0];\n    // colorPalette*alpha + rgb*lut*(1-alpha)\n    // a tiny bit faster for the edge cases\n    if (this.colorPaletteAlpha === 1.0) {\n      ret.set(this.colorPalette);\n    } else if (this.colorPaletteAlpha === 0.0) {\n      ret.set(this.lut);\n      for (let i = 0; i < LUT_ARRAY_LENGTH / 4; ++i) {\n        ret[i * 4 + 0] *= rgb[0];\n        ret[i * 4 + 1] *= rgb[1];\n        ret[i * 4 + 2] *= rgb[2];\n      }\n    } else {\n      for (let i = 0; i < LUT_ARRAY_LENGTH / 4; ++i) {\n        ret[i * 4 + 0] =\n          this.colorPalette[i * 4 + 0] * this.colorPaletteAlpha +\n          this.lut[i * 4 + 0] * (1.0 - this.colorPaletteAlpha) * rgb[0];\n        ret[i * 4 + 1] =\n          this.colorPalette[i * 4 + 1] * this.colorPaletteAlpha +\n          this.lut[i * 4 + 1] * (1.0 - this.colorPaletteAlpha) * rgb[1];\n        ret[i * 4 + 2] =\n          this.colorPalette[i * 4 + 2] * this.colorPaletteAlpha +\n          this.lut[i * 4 + 2] * (1.0 - this.colorPaletteAlpha) * rgb[2];\n        ret[i * 4 + 3] =\n          this.colorPalette[i * 4 + 3] * this.colorPaletteAlpha + this.lut[i * 4 + 3] * (1.0 - this.colorPaletteAlpha);\n      }\n    }\n\n    this.lutTexture.image.data.set(ret);\n    this.lutTexture.needsUpdate = true;\n\n    return ret;\n  }\n\n  public getHistogram(): Histogram {\n    return this.histogram;\n  }\n\n  public getIntensity(x: number, y: number, z: number): number {\n    return this.volumeData[x + y * this.dims[0] + z * (this.dims[0] * this.dims[1])];\n  }\n\n  // how to index into tiled texture atlas\n  public getIntensityFromAtlas(x: number, y: number, z: number): number {\n    const numXtiles = this.imgData.width / this.dims[0];\n    const tilex = z % numXtiles;\n    const tiley = Math.floor(z / numXtiles);\n    const offset = tilex * this.dims[0] + x + (tiley * this.dims[1] + y) * this.imgData.width;\n    return this.imgData.data[offset];\n  }\n\n  private rebuildDataTexture(data: Uint8ClampedArray, w: number, h: number): void {\n    if (this.dataTexture) {\n      this.dataTexture.dispose();\n    }\n    this.dataTexture = new DataTexture(data, w, h);\n    this.dataTexture.format = RedFormat;\n    this.dataTexture.type = UnsignedByteType;\n    this.dataTexture.magFilter = NearestFilter;\n    this.dataTexture.minFilter = NearestFilter;\n    this.dataTexture.generateMipmaps = false;\n    this.dataTexture.needsUpdate = true;\n  }\n\n  // give the channel fresh data and initialize from that data\n  // data is formatted as a texture atlas where each tile is a z slice of the volume\n  public setBits(bitsArray: Uint8Array, w: number, h: number): void {\n    this.imgData = { data: new Uint8ClampedArray(bitsArray.buffer), width: w, height: h };\n\n    this.rebuildDataTexture(this.imgData.data, w, h);\n\n    this.loaded = true;\n    this.histogram = new Histogram(bitsArray);\n\n    this.lutGenerator_auto2();\n  }\n\n  // let's rearrange this.imgData.data into a 3d array.\n  // it is assumed to be coming in as a flat Uint8Array of size x*y*z\n  // with x*y*z layout (first row of first plane is the first data in the layout,\n  // then second row of first plane, etc)\n  public unpackVolumeFromAtlas(x: number, y: number, z: number): void {\n    const volimgdata = this.imgData.data;\n\n    this.dims = [x, y, z];\n    this.volumeData = new Uint8Array(x * y * z);\n\n    const numXtiles = this.imgData.width / x;\n    const atlasrow = this.imgData.width;\n    let tilex = 0,\n      tiley = 0,\n      tileoffset = 0,\n      tilerowoffset = 0;\n    for (let i = 0; i < z; ++i) {\n      // tile offset\n      tilex = i % numXtiles;\n      tiley = Math.floor(i / numXtiles);\n      tileoffset = tilex * x + tiley * y * atlasrow;\n      for (let j = 0; j < y; ++j) {\n        tilerowoffset = j * atlasrow;\n        for (let k = 0; k < x; ++k) {\n          this.volumeData[i * (x * y) + j * x + k] = volimgdata[tileoffset + tilerowoffset + k];\n        }\n      }\n    }\n  }\n\n  // give the channel fresh volume data and initialize from that data\n  public setFromVolumeData(bitsArray: Uint8Array, vx: number, vy: number, vz: number, ax: number, ay: number): void {\n    this.dims = [vx, vy, vz];\n    this.volumeData = bitsArray;\n    // TODO FIXME performance hit for shuffling the data and storing 2 versions of it (could do this in worker at least?)\n    this.packToAtlas(vx, vy, vz, ax, ay);\n    this.loaded = true;\n    this.histogram = new Histogram(this.volumeData);\n    this.lutGenerator_auto2();\n  }\n\n  // given this.volumeData, let's unpack it into a flat textureatlas and fill up this.imgData.\n  private packToAtlas(vx: number, vy: number, vz: number, ax: number, ay: number): void {\n    // big assumptions:\n    // atlassize is a perfect multiple of volumesize in both x and y\n    // ax % vx == 0\n    // ay % vy == 0\n    // and num slices <= num possible slices in atlas.\n    // (ax/vx) * (ay/vy) >= vz\n    if (ax % vx !== 0 || ay % vy !== 0 || (ax / vx) * (ay / vy) < vz) {\n      console.log(\"ERROR - atlas and volume dims are inconsistent\");\n      console.log(ax, ay, vx, vy, vz);\n    }\n\n    this.imgData = {\n      width: ax,\n      height: ay,\n      data: new Uint8ClampedArray(ax * ay),\n    };\n    this.imgData.data.fill(0);\n\n    // deposit slices one by one into the imgData.data from volData.\n    const volimgdata = this.imgData.data;\n\n    const x = vx,\n      y = vy,\n      z = vz;\n\n    const numXtiles = this.imgData.width / x;\n    const atlasrow = this.imgData.width;\n    let tilex = 0,\n      tiley = 0,\n      tileoffset = 0,\n      tilerowoffset = 0;\n    for (let i = 0; i < z; ++i) {\n      // tile offset\n      tilex = i % numXtiles;\n      tiley = Math.floor(i / numXtiles);\n      tileoffset = tilex * x + tiley * y * atlasrow;\n      for (let j = 0; j < y; ++j) {\n        tilerowoffset = j * atlasrow;\n        for (let k = 0; k < x; ++k) {\n          volimgdata[tileoffset + tilerowoffset + k] = this.volumeData[i * (x * y) + j * x + k];\n        }\n      }\n    }\n\n    this.rebuildDataTexture(this.imgData.data, ax, ay);\n  }\n\n  // lut should be an uint8array of 256*4 elements (256 rgba8 values)\n  public setLut(lut: Uint8Array): void {\n    this.lut = lut;\n  }\n\n  // palette should be an uint8array of 256*4 elements (256 rgba8 values)\n  public setColorPalette(palette: Uint8Array): void {\n    this.colorPalette = palette;\n  }\n\n  public setColorPaletteAlpha(alpha: number): void {\n    this.colorPaletteAlpha = alpha;\n  }\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  public lutGenerator_windowLevel(wnd: number, lvl: number): void {\n    if (!this.loaded) {\n      return;\n    }\n    const lut = this.histogram.lutGenerator_windowLevel(wnd, lvl);\n    this.setLut(lut.lut);\n  }\n\n  public lutGenerator_fullRange(): void {\n    if (!this.loaded) {\n      return;\n    }\n    const lut = this.histogram.lutGenerator_fullRange();\n    this.setLut(lut.lut);\n  }\n\n  public lutGenerator_dataRange(): void {\n    if (!this.loaded) {\n      return;\n    }\n    const lut = this.histogram.lutGenerator_dataRange();\n    this.setLut(lut.lut);\n  }\n\n  public lutGenerator_bestFit(): void {\n    if (!this.loaded) {\n      return;\n    }\n    const lut = this.histogram.lutGenerator_bestFit();\n    this.setLut(lut.lut);\n  }\n\n  // attempt to redo imagej's Auto\n  public lutGenerator_auto2(): void {\n    if (!this.loaded) {\n      return;\n    }\n    const lut = this.histogram.lutGenerator_auto2();\n    this.setLut(lut.lut);\n  }\n\n  public lutGenerator_auto(): void {\n    if (!this.loaded) {\n      return;\n    }\n    const lut = this.histogram.lutGenerator_auto();\n    this.setLut(lut.lut);\n  }\n\n  public lutGenerator_equalize(): void {\n    if (!this.loaded) {\n      return;\n    }\n    const lut = this.histogram.lutGenerator_equalize();\n    this.setLut(lut.lut);\n  }\n\n  public lutGenerator_percentiles(lo: number, hi: number): void {\n    if (!this.loaded) {\n      return;\n    }\n    const lut = this.histogram.lutGenerator_percentiles(lo, hi);\n    this.setLut(lut.lut);\n  }\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n","import { getColorByChannelIndex } from \"./constants/colors.js\";\n\nfunction clamp(val: number, cmin: number, cmax: number): number {\n  return Math.min(Math.max(cmin, val), cmax);\n}\n\nfunction controlPointToRGBA(controlPoint) {\n  return [controlPoint.color[0], controlPoint.color[1], controlPoint.color[2], Math.floor(controlPoint.opacity * 255)];\n}\n\nfunction lerp(xmin, xmax, a) {\n  return a * (xmax - xmin) + xmin;\n}\n\nconst LUT_ENTRIES = 256;\nconst LUT_ARRAY_LENGTH = LUT_ENTRIES * 4;\n\n/**\n * @typedef {Object} ControlPoint Used for the TF (transfer function) editor GUI.\n * Need to be converted to LUT for rendering.\n * @property {number} x The X Coordinate\n * @property {number} opacity The Opacity, from 0 to 1\n * @property {Array.<number>} color The Color, 3 numbers from 0-255 for r,g,b\n */\n\n/**\n * @typedef {Object} Lut Used for rendering.\n * @property {Array.<number>} lut LUT_ARRAY_LENGTH element lookup table as array\n * (maps scalar intensity to a rgb color plus alpha, with each value from 0-255)\n * @property {Array.<ControlPoint>} controlPoints\n */\nexport type ControlPoint = {\n  x: number;\n  opacity: number;\n  color: [number, number, number];\n};\nexport type Lut = {\n  lut: Uint8Array;\n  controlPoints: ControlPoint[];\n};\n\n/**\n * Builds a histogram with 256 bins from a data array. Assume data is 8 bit single channel grayscale.\n * @class\n * @param {Array.<number>} data\n */\nexport default class Histogram {\n  private bins: Uint32Array;\n  private dataMin: number;\n  private dataMax: number;\n  private nonzeroPixelCount: number;\n  public maxBin: number;\n\n  constructor(data: Uint8Array) {\n    // no more than 2^32 pixels of any one intensity in the data!?!?!\n    this.bins = new Uint32Array(256);\n    this.bins.fill(0);\n    this.dataMin = 255;\n    this.dataMax = 0;\n    this.maxBin = 0;\n\n    // build up the histogram\n    for (let i = 0; i < data.length; ++i) {\n      this.bins[data[i]]++;\n    }\n    // track the first and last nonzero bins with at least 1 sample\n    for (let i = 1; i < this.bins.length; i++) {\n      if (this.bins[i] > 0) {\n        this.dataMin = i;\n        break;\n      }\n    }\n    for (let i = this.bins.length - 1; i >= 1; i--) {\n      if (this.bins[i] > 0) {\n        this.dataMax = i;\n        break;\n      }\n    }\n\n    // total number of pixels minus the number of zero pixels\n    this.nonzeroPixelCount = data.length - this.bins[0];\n\n    // get the bin with the most frequently occurring NONZERO value\n    this.maxBin = 1;\n    let max = this.bins[1];\n    for (let i = 1; i < this.bins.length; i++) {\n      if (this.bins[i] > max) {\n        this.maxBin = i;\n        max = this.bins[i];\n      }\n    }\n  }\n\n  /**\n   * Return the min data value\n   * @return {number}\n   */\n  getMin(): number {\n    return this.dataMin;\n  }\n\n  /**\n   * Return the max data value\n   * @return {number}\n   */\n  getMax(): number {\n    return this.dataMax;\n  }\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n\n  /**\n   * Generate a Window/level lookup table\n   * @return {Lut}\n   * @param {number} wnd in 0..1 range\n   * @param {number} lvl in 0..1 range\n   */\n  lutGenerator_windowLevel(wnd: number, lvl: number): Lut {\n    // simple linear mapping for actual range\n    const b = lvl - wnd * 0.5;\n    const e = lvl + wnd * 0.5;\n    return this.lutGenerator_minMax(b * 255, e * 255);\n  }\n\n  /**\n   * Generate a piecewise linear lookup table that ramps up from 0 to 1 over the b to e domain.\n   * If e === b, then we use a step function with f(b) = 0 and f(b + 1) = 1\n   *  |\n   * 1|               +---------+-----\n   *  |              /\n   *  |             /\n   *  |            /\n   *  |           /\n   *  |          /\n   * 0+=========+---------------+-----\n   *  0         b    e         255\n   * @return {Lut}\n   * @param {number} b\n   * @param {number} e\n   */\n  lutGenerator_minMax(b: number, e: number): Lut {\n    if (e < b) {\n      // swap\n      const tmp = e;\n      e = b;\n      b = tmp;\n    }\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n    for (let x = 0; x < lut.length / 4; ++x) {\n      lut[x * 4 + 0] = 255;\n      lut[x * 4 + 1] = 255;\n      lut[x * 4 + 2] = 255;\n      if (x > e) {\n        lut[x * 4 + 3] = 255;\n      } else if (x <= b) {\n        lut[x * 4 + 3] = 0;\n      } else {\n        if (e === b) {\n          lut[x * 4 + 3] = 255;\n        } else {\n          const a = (x - b) / (e - b);\n          lut[x * 4 + 3] = lerp(0, 255, a);\n        }\n      }\n    }\n\n    // Edge case: b and e are both out of bounds\n    if (b < 0 && e < 0) {\n      return {\n        lut: lut,\n        controlPoints: [\n          { x: 0, opacity: 1, color: [255, 255, 255] },\n          { x: 255, opacity: 1, color: [255, 255, 255] },\n        ],\n      };\n    }\n    if (b >= 255 && e >= 255) {\n      return {\n        lut: lut,\n        controlPoints: [\n          { x: 0, opacity: 0, color: [255, 255, 255] },\n          { x: 255, opacity: 0, color: [255, 255, 255] },\n        ],\n      };\n    }\n\n    // Generate 2 to 4 control points for a minMax LUT, from left to right\n    const controlPoints: ControlPoint[] = [];\n\n    // Add starting point at x = 0\n    let startVal = 0;\n    if (b < 0) {\n      startVal = -b / (e - b);\n    }\n    controlPoints.push({ x: 0, opacity: startVal, color: [255, 255, 255] });\n\n    // If b > 0, add another point at (b, 0)\n    if (b > 0) {\n      controlPoints.push({ x: b, opacity: 0, color: [255, 255, 255] });\n    }\n\n    // If e < 255, Add another point at (e, 1)\n    if (e < 255) {\n      if (e === b) {\n        // Use b + 0.5 as x value instead of e to create a near-vertical ramp\n        controlPoints.push({ x: b + 0.5, opacity: 1, color: [255, 255, 255] });\n      } else {\n        controlPoints.push({ x: e, opacity: 1, color: [255, 255, 255] });\n      }\n    }\n\n    // Add ending point at x = 255\n    let endVal = 1;\n    if (e > 255) {\n      endVal = (255 - b) / (e - b);\n    }\n    controlPoints.push({ x: 255, opacity: endVal, color: [255, 255, 255] });\n\n    return {\n      lut: lut,\n      controlPoints: controlPoints,\n    };\n  }\n\n  /**\n   * Generate a straight 0-1 linear identity lookup table\n   * @return {Lut}\n   */\n  lutGenerator_fullRange(): Lut {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n    // simple linear mapping for actual range\n    for (let x = 0; x < lut.length / 4; ++x) {\n      lut[x * 4 + 0] = 255;\n      lut[x * 4 + 1] = 255;\n      lut[x * 4 + 2] = 255;\n      lut[x * 4 + 3] = x;\n    }\n\n    return {\n      lut: lut,\n      controlPoints: [\n        { x: 0, opacity: 0, color: [255, 255, 255] },\n        { x: 255, opacity: 1, color: [255, 255, 255] },\n      ],\n    };\n  }\n\n  /**\n   * Generate a lookup table over the min to max range of the data values\n   * @return {Lut}\n   */\n  lutGenerator_dataRange(): Lut {\n    // simple linear mapping for actual range\n    const b = this.dataMin;\n    const e = this.dataMax;\n    return this.lutGenerator_minMax(b, e);\n  }\n\n  /**\n   * Generate a lookup table with a different color per intensity value\n   * @return {Lut}\n   */\n  lutGenerator_labelColors(): Lut {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n    // TODO specify type for control point\n    const controlPoints: ControlPoint[] = [];\n    controlPoints.push({ x: 0, opacity: 0, color: [0, 0, 0] });\n    let lastr = 0;\n    let lastg = 0;\n    let lastb = 0;\n    let lasta = 0;\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let a = 0;\n\n    // assumes exactly one bin per intensity value?\n    // skip zero!!!\n    for (let i = 1; i < this.bins.length; ++i) {\n      if (this.bins[i] > 0) {\n        const rgb = getColorByChannelIndex(i);\n\n        lut[i * 4 + 0] = rgb[0];\n        lut[i * 4 + 1] = rgb[1];\n        lut[i * 4 + 2] = rgb[2];\n        lut[i * 4 + 3] = 255;\n\n        r = rgb[0];\n        g = rgb[1];\n        b = rgb[2];\n        a = 1;\n      } else {\n        // add a zero control point?\n        r = 0;\n        g = 0;\n        b = 0;\n        a = 0;\n      }\n      // if current control point is same as last one don't add it\n      if (r !== lastr || g !== lastg || b !== lastb || a !== lasta) {\n        if (lasta === 0) {\n          controlPoints.push({ x: i - 0.5, opacity: lasta, color: [lastr, lastg, lastb] });\n        }\n        controlPoints.push({ x: i, opacity: a, color: [r, g, b] });\n        lastr = r;\n        lastg = g;\n        lastb = b;\n        lasta = a;\n      }\n    }\n\n    return {\n      lut: lut,\n      controlPoints: controlPoints,\n    };\n  }\n\n  /**\n   * Find the bin that contains the percentage of pixels below it\n   * @return {number}\n   * @param {number} pct\n   */\n  findBinOfPercentile(pct: number): number {\n    const pixcount = this.nonzeroPixelCount + this.bins[0];\n    const limit = pixcount * pct;\n\n    let i = 0;\n    let count = 0;\n    for (i = 0; i < this.bins.length; ++i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    return i;\n  }\n\n  /**\n   * Generate a lookup table based on histogram percentiles\n   * @return {Lut}\n   * @param {number} pmin\n   * @param {number} pmax\n   */\n  lutGenerator_percentiles(pmin: number, pmax: number): Lut {\n    // e.g. 0.50, 0.983 starts from 50th percentile bucket and ends at 98.3 percentile bucket.\n    const hmin = this.findBinOfPercentile(pmin);\n    const hmax = this.findBinOfPercentile(pmax);\n\n    return this.lutGenerator_minMax(hmin, hmax);\n  }\n\n  /**\n   * Generate a 10% / 90% lookup table\n   * @return {Lut}\n   */\n  lutGenerator_bestFit(): Lut {\n    const pixcount = this.nonzeroPixelCount;\n    //const pixcount = this.imgData.data.length;\n    const limit = pixcount / 10;\n\n    let i = 0;\n    let count = 0;\n    for (i = 1; i < this.bins.length; ++i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    const hmin = i;\n\n    count = 0;\n    for (i = this.bins.length - 1; i >= 1; --i) {\n      count += this.bins[i];\n      if (count > limit) {\n        break;\n      }\n    }\n    const hmax = i;\n\n    return this.lutGenerator_minMax(hmin, hmax);\n  }\n\n  /**\n   * Generate a lookup table attempting to replicate ImageJ's \"Auto\" button\n   * @return {Lut}\n   */\n  lutGenerator_auto2(): Lut {\n    const AUTO_THRESHOLD = 5000;\n    const pixcount = this.nonzeroPixelCount;\n    //  const pixcount = this.imgData.data.length;\n    const limit = pixcount / 10;\n    const threshold = pixcount / AUTO_THRESHOLD;\n\n    // this will skip the \"zero\" bin which contains pixels of zero intensity.\n    let hmin = this.bins.length - 1;\n    let hmax = 1;\n    for (let i = 1; i < this.bins.length; ++i) {\n      if (this.bins[i] > threshold && this.bins[i] <= limit) {\n        hmin = i;\n        break;\n      }\n    }\n    for (let i = this.bins.length - 1; i >= 1; --i) {\n      if (this.bins[i] > threshold && this.bins[i] <= limit) {\n        hmax = i;\n        break;\n      }\n    }\n\n    if (hmax < hmin) {\n      // just reset to whole range in this case.\n      return this.lutGenerator_fullRange();\n    } else {\n      return this.lutGenerator_minMax(hmin, hmax);\n    }\n  }\n\n  /**\n   * Generate a lookup table using a percentile of the most commonly occurring value\n   * @return {Lut}\n   */\n  lutGenerator_auto(): Lut {\n    // simple linear mapping cutting elements with small appearence\n    // get 10% threshold\n    const PERCENTAGE = 0.1;\n    const th = Math.floor(this.bins[this.maxBin] * PERCENTAGE);\n    let b = 0;\n    let e = this.bins.length - 1;\n    for (let x = 1; x < this.bins.length; ++x) {\n      if (this.bins[x] > th) {\n        b = x;\n        break;\n      }\n    }\n    for (let x = this.bins.length - 1; x >= 1; --x) {\n      if (this.bins[x] > th) {\n        e = x;\n        break;\n      }\n    }\n\n    return this.lutGenerator_minMax(b, e);\n  }\n\n  /**\n   * Generate an \"equalized\" lookup table\n   * @return {Lut}\n   */\n  lutGenerator_equalize(): Lut {\n    const map: number[] = [];\n    for (let i = 0; i < this.bins.length; ++i) {\n      map[i] = 0;\n    }\n\n    // summed area table?\n    map[0] = this.bins[0];\n    for (let i = 1; i < this.bins.length; ++i) {\n      map[i] = map[i - 1] + this.bins[i];\n    }\n\n    const div = map[map.length - 1] - map[0];\n    if (div > 0) {\n      const lut = new Uint8Array(LUT_ARRAY_LENGTH);\n\n      // compute lut and track control points for the piecewise linear sections\n      const lutControlPoints: ControlPoint[] = [{ x: 0, opacity: 0, color: [255, 255, 255] }];\n      lut[0] = 255;\n      lut[1] = 255;\n      lut[2] = 255;\n      lut[3] = 0;\n      let slope = 0;\n      let lastSlope = 0;\n      let opacity = 0;\n      let lastOpacity = 0;\n      for (let i = 1; i < lut.length / 4; ++i) {\n        lut[i * 4 + 0] = 255;\n        lut[i * 4 + 1] = 255;\n        lut[i * 4 + 2] = 255;\n        lastOpacity = opacity;\n        opacity = clamp(Math.round(255 * (map[i] - map[0])), 0, 255);\n        lut[i * 4 + 3] = opacity;\n\n        slope = opacity - lastOpacity;\n        // if map[i]-map[i-1] is the same as map[i+1]-map[i] then we are in a linear segment and do not need a new control point\n        if (slope != lastSlope) {\n          lutControlPoints.push({ x: i - 1, opacity: lastOpacity / 255.0, color: [255, 255, 255] });\n          lastSlope = slope;\n        }\n      }\n\n      lutControlPoints.push({ x: 255, opacity: 1, color: [255, 255, 255] });\n\n      return {\n        lut: lut,\n        controlPoints: lutControlPoints,\n      };\n    } else {\n      // just reset to whole range in this case...?\n      return this.lutGenerator_fullRange();\n    }\n  }\n\n  // @param {Object[]} controlPoints - array of {x:number 0..255, opacity:number 0..1, color:array of 3 numbers 0..255}\n  // @return {Uint8Array} array of length 256*4 representing the rgba values of the gradient\n  lutGenerator_fromControlPoints(controlPoints: ControlPoint[]): Lut {\n    const lut = new Uint8Array(LUT_ARRAY_LENGTH).fill(0);\n\n    if (controlPoints.length === 0) {\n      return { lut: lut, controlPoints: controlPoints };\n    }\n\n    // ensure they are sorted in ascending order of x\n    controlPoints.sort((a, b) => a.x - b.x);\n\n    // special case only one control point.\n    if (controlPoints.length === 1) {\n      const rgba = controlPointToRGBA(controlPoints[0]);\n      // copy val from x to 255.\n      for (let x = controlPoints[0].x; x < 256; ++x) {\n        lut[x * 4 + 0] = rgba[0];\n        lut[x * 4 + 1] = rgba[1];\n        lut[x * 4 + 2] = rgba[2];\n        lut[x * 4 + 3] = rgba[3];\n      }\n      return { lut: lut, controlPoints: controlPoints };\n    }\n\n    let c0 = controlPoints[0];\n    let c1 = controlPoints[1];\n    let color0 = controlPointToRGBA(c0);\n    let color1 = controlPointToRGBA(c1);\n    let lastIndex = 1;\n    let a = 0;\n    // if the first control point is after 0, act like there are 0s going all the way up to it.\n    // or lerp up to the first point?\n    for (let x = c0.x; x < 256; ++x) {\n      while (x > c1.x) {\n        // advance control points\n        c0 = c1;\n        color0 = color1;\n        lastIndex++;\n        if (lastIndex >= controlPoints.length) {\n          // if the last control point is before 255, then we want to continue its value all the way to 255.\n          c1 = { x: 255, color: c1.color, opacity: c1.opacity };\n        } else {\n          c1 = controlPoints[lastIndex];\n        }\n        color1 = controlPointToRGBA(c1);\n      }\n      if (c1.x === c0.x) {\n        // use c1\n        a = 1.0;\n      } else {\n        a = (x - c0.x) / (c1.x - c0.x);\n      }\n      // lerp the colors\n      lut[x * 4 + 0] = lerp(color0[0], color1[0], a);\n      lut[x * 4 + 1] = lerp(color0[1], color1[1], a);\n      lut[x * 4 + 2] = lerp(color0[2], color1[2], a);\n      lut[x * 4 + 3] = lerp(color0[3], color1[3], a);\n    }\n    return { lut: lut, controlPoints: controlPoints };\n  }\n  /* eslint-enable @typescript-eslint/naming-convention */\n}\n\nexport { LUT_ARRAY_LENGTH };\n","import { Vector2, Vector3 } from \"three\";\n\nimport Channel from \"./Channel.js\";\nimport Histogram from \"./Histogram.js\";\nimport { getColorByChannelIndex } from \"./constants/colors.js\";\nimport { type IVolumeLoader, LoadSpec, type PerChannelCallback } from \"./loaders/IVolumeLoader.js\";\nimport { MAX_ATLAS_EDGE, pickLevelToLoadUnscaled } from \"./loaders/VolumeLoaderUtils.js\";\n\nexport type ImageInfo = Readonly<{\n  name: string;\n\n  /** XY size of the *original* (not downsampled) volume, in pixels */\n  originalSize: Vector3;\n  /**\n   * XY dimensions of the texture atlas used by `RayMarchedAtlasVolume` and `Atlas2DSlice`, in number of z-slice\n   * tiles (not pixels). Chosen by the loader to lay out the 3D volume in the squarest possible 2D texture atlas.\n   */\n  atlasTileDims: Vector2;\n  /** Size of the volume, in pixels */\n  volumeSize: Vector3;\n  /** Size of the currently loaded subregion, in pixels */\n  subregionSize: Vector3;\n  /** Offset of the loaded subregion into the total volume, in pixels */\n  subregionOffset: Vector3;\n  /** Size of a single *original* (not downsampled) pixel, in spatial units */\n  physicalPixelSize: Vector3;\n  /** Symbol of physical spatial unit used by `pixelSize` */\n  spatialUnit: string;\n\n  /** Number of channels in the image */\n  numChannels: number;\n  /** The names of each channel */\n  channelNames: string[];\n  /** Optional overrides to default channel colors, in 0-255 range */\n  channelColors?: [number, number, number][];\n\n  /** Number of timesteps in the time series, or 1 if the image is not a time series */\n  times: number;\n  /** Size of each timestep in temporal units */\n  timeScale: number;\n  /** Symbol of temporal unit used by `timeScale`, e.g. \"hr\" */\n  timeUnit: string;\n\n  /** Number of scale levels available for this volume */\n  numMultiscaleLevels: number;\n  /** The scale level from which this image was loaded, between `0` and `numMultiscaleLevels-1` */\n  multiscaleLevel: number;\n\n  transform: {\n    /** Translation of the volume from the center of space, in volume voxels */\n    translation: Vector3;\n    /** Rotation of the volume in Euler angles, applied in XYZ order */\n    rotation: Vector3;\n  };\n\n  /** Arbitrary additional metadata not captured by other `ImageInfo` properties */\n  userData?: Record<string, unknown>;\n}>;\n\nexport const getDefaultImageInfo = (): ImageInfo => ({\n  name: \"\",\n  originalSize: new Vector3(1, 1, 1),\n  atlasTileDims: new Vector2(1, 1),\n  volumeSize: new Vector3(1, 1, 1),\n  subregionSize: new Vector3(1, 1, 1),\n  subregionOffset: new Vector3(0, 0, 0),\n  physicalPixelSize: new Vector3(1, 1, 1),\n  spatialUnit: \"\",\n  numChannels: 0,\n  channelNames: [],\n  channelColors: [],\n  times: 1,\n  timeScale: 1,\n  timeUnit: \"\",\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n  transform: {\n    translation: new Vector3(0, 0, 0),\n    rotation: new Vector3(0, 0, 0),\n  },\n});\n\ninterface VolumeDataObserver {\n  onVolumeData: (vol: Volume, batch: number[]) => void;\n  onVolumeChannelAdded: (vol: Volume, idx: number) => void;\n}\n\n/**\n * Provide dimensions of the volume data, including dimensions for texture atlas data in which the volume z slices\n * are tiled across a single large 2d image plane.\n * @typedef {Object} ImageInfo\n * @property {string} name Base name of image\n * @property {string} [version] Schema version preferably in semver format.\n * @property {Vector2} originalSize XY size of the *original* (not downsampled) volume, in pixels\n * @property {Vector2} atlasDims Number of rows and columns of z-slice tiles (not pixels) in the texture atlas\n * @property {Vector3} volumeSize Size of the volume, in pixels\n * @property {Vector3} regionSize Size of the currently loaded subregion, in pixels\n * @property {Vector3} regionOffset Offset of the loaded subregion into the total volume, in pixels\n * @property {Vector3} pixelSize Size of a single *original* (not downsampled) pixel, in spatial units\n * @property {string} spatialUnit Symbol of physical spatial unit used by `pixelSize`\n * @property {number} numChannels Number of channels\n * @property {Array.<string>} channelNames Names of each of the channels to be rendered, in order. Unique identifier expected\n * @property {Array.<Array.<number>>} [channelColors] Colors of each of the channels to be rendered, as an ordered list of [r, g, b] arrays\n * @property {number} times Number of times (default = 1)\n * @property {number} timeScale Size of each time step in `timeUnit` units\n * @property {number} timeUnit Unit symbol for `timeScale` (e.g. min)\n * @property {Object} transform translation and rotation as arrays of 3 numbers. Translation is in voxels (to be multiplied by pixel_size values). Rotation is Euler angles in radians, appled in XYZ order.\n * @property {Object} userData Arbitrary metadata not covered by above properties\n * @example const imgdata = {\n  \"name\": \"AICS-10_5_5\",\n  \"version\": \"0.0.0\",\n  originalSize: new Vector2(306, 494),\n  atlasDims: new Vector2(10, 7),\n  volumeSize: new Vector3(204, 292, 65),\n  regionSize: new Vector3(204, 292, 65),\n  regionOffset: new Vector3(0, 0, 0),\n  pixelSize: new Vector3(0.065, 0.065, 0.29),\n  spatialUnit: \"μm\",\n  \"numChannels\": 9,\n  \"channelNames\": [\"DRAQ5\", \"EGFP\", \"Hoechst 33258\", \"TL Brightfield\", \"SEG_STRUCT\", \"SEG_Memb\", \"SEG_DNA\", \"CON_Memb\", \"CON_DNA\"],\n  \"times\": 5,\n  \"timeScale\": 1,\n  \"timeUnit\": \"hr\",\n  \"transform\": {\n    \"translation\": new Vector3(5, 5, 1),\n    \"rotation\": new Vector3(0, 3.14159, 1.57),\n  },\n  };\n */\n\n/**\n * A renderable multichannel volume image with 8-bits per channel intensity values.\n * @class\n * @param {ImageInfo} imageInfo\n */\nexport default class Volume {\n  public imageInfo: ImageInfo;\n  public loadSpec: Required<LoadSpec>;\n  public loader?: IVolumeLoader;\n  // `LoadSpec` representing the minimum data required to display what's in the viewer (subregion, channels, etc.).\n  // Used to intelligently issue load requests whenever required by a state change. Modify with `updateRequiredData`.\n  public loadSpecRequired: Required<LoadSpec>;\n  public channelLoadCallback?: PerChannelCallback;\n  public imageMetadata: Record<string, unknown>;\n  public name: string;\n\n  public channels: Channel[];\n  public numChannels: number;\n  public channelNames: string[];\n  public channelColorsDefault: [number, number, number][];\n\n  public physicalScale: number;\n  public physicalPixelSize: Vector3;\n  public physicalSize: Vector3;\n  public normPhysicalSize: Vector3;\n  public normRegionSize: Vector3;\n  public normRegionOffset: Vector3;\n  public physicalUnitSymbol: string;\n  public tickMarkPhysicalLength: number;\n\n  private volumeDataObservers: VolumeDataObserver[];\n  private loaded: boolean;\n\n  constructor(\n    imageInfo: ImageInfo = getDefaultImageInfo(),\n    loadSpec: LoadSpec = new LoadSpec(),\n    loader?: IVolumeLoader\n  ) {\n    this.loaded = false;\n    this.imageInfo = imageInfo;\n    this.name = this.imageInfo.name;\n    this.loadSpec = {\n      // Fill in defaults for optional properties\n      multiscaleLevel: 0,\n      scaleLevelBias: 0,\n      maxAtlasEdge: MAX_ATLAS_EDGE,\n      channels: Array.from({ length: this.imageInfo.numChannels }, (_val, idx) => idx),\n      ...loadSpec,\n    };\n    this.loadSpecRequired = {\n      ...this.loadSpec,\n      channels: this.loadSpec.channels.slice(),\n      subregion: this.loadSpec.subregion.clone(),\n    };\n    this.loader = loader;\n    // imageMetadata to be filled in by Volume Loaders\n    this.imageMetadata = {};\n\n    this.normRegionSize = new Vector3(1, 1, 1);\n    this.normRegionOffset = new Vector3(0, 0, 0);\n    this.physicalSize = new Vector3(1, 1, 1);\n    this.physicalScale = 1;\n    this.normPhysicalSize = new Vector3(1, 1, 1);\n    this.physicalPixelSize = this.imageInfo.physicalPixelSize;\n    this.tickMarkPhysicalLength = 1;\n    this.setVoxelSize(this.physicalPixelSize);\n\n    this.numChannels = this.imageInfo.numChannels;\n    this.channelNames = this.imageInfo.channelNames.slice();\n    this.channelColorsDefault = this.imageInfo.channelColors\n      ? this.imageInfo.channelColors.slice()\n      : this.channelNames.map((name, index) => getColorByChannelIndex(index));\n    // fill in gaps\n    if (this.channelColorsDefault.length < this.imageInfo.numChannels) {\n      for (let i = this.channelColorsDefault.length - 1; i < this.imageInfo.numChannels; ++i) {\n        this.channelColorsDefault[i] = getColorByChannelIndex(i);\n      }\n    }\n\n    this.channels = [];\n    for (let i = 0; i < this.imageInfo.numChannels; ++i) {\n      const channel = new Channel(this.channelNames[i]);\n      this.channels.push(channel);\n      // TODO pass in channel constructor...\n      channel.dims = this.imageInfo.subregionSize.toArray();\n    }\n\n    this.physicalUnitSymbol = this.imageInfo.spatialUnit;\n\n    this.volumeDataObservers = [];\n  }\n\n  private setUnloaded() {\n    this.loaded = false;\n    this.channels.forEach((channel) => {\n      channel.loaded = false;\n    });\n  }\n\n  isLoaded(): boolean {\n    return this.loaded;\n  }\n\n  updateDimensions() {\n    const { volumeSize, subregionSize, subregionOffset } = this.imageInfo;\n\n    this.setVoxelSize(this.physicalPixelSize);\n\n    this.normRegionSize = subregionSize.clone().divide(volumeSize);\n    this.normRegionOffset = subregionOffset.clone().divide(volumeSize);\n  }\n\n  /** Returns `true` iff differences between `loadSpec` and `loadSpecRequired` indicate new data *must* be loaded. */\n  private mustLoadNewData(): boolean {\n    return (\n      this.loadSpec.time !== this.loadSpecRequired.time || // time point changed\n      !this.loadSpec.subregion.containsBox(this.loadSpecRequired.subregion) || // new subregion not contained in old\n      this.loadSpecRequired.channels.some((channel) => !this.loadSpec.channels.includes(channel)) // new channel(s)\n    );\n  }\n\n  /**\n   * Returns `true` iff differences between `loadSpec` and `loadSpecRequired` indicate a new load *may* get a\n   * different scale level than is currently loaded.\n   *\n   * This checks for changes in properties that *can*, but do not *always*, change the scale level the loader picks.\n   * For example, a smaller `subregion` *may* mean a higher scale level will fit within memory constraints, or it may\n   * not. A higher `scaleLevelBias` *may* nudge the volume into a higher scale level, or we may already be at the max\n   * imposed by `multiscaleLevel`.\n   */\n  private mayLoadNewScaleLevel(): boolean {\n    return (\n      !this.loadSpec.subregion.equals(this.loadSpecRequired.subregion) ||\n      this.loadSpecRequired.maxAtlasEdge !== this.loadSpec.maxAtlasEdge ||\n      this.loadSpecRequired.multiscaleLevel !== this.loadSpec.multiscaleLevel ||\n      this.loadSpecRequired.scaleLevelBias !== this.loadSpec.scaleLevelBias\n    );\n  }\n\n  /** Call on any state update that may require new data to be loaded (subregion, enabled channels, time, etc.) */\n  async updateRequiredData(required: Partial<LoadSpec>, onChannelLoaded?: PerChannelCallback): Promise<void> {\n    this.loadSpecRequired = { ...this.loadSpecRequired, ...required };\n    let shouldReload = this.mustLoadNewData();\n\n    // If we're not reloading due to required data changes, check if we should load a new scale level\n    if (!shouldReload && this.mayLoadNewScaleLevel()) {\n      // Loaders should cache loaded dimensions so that this call blocks no more than once per valid `LoadSpec`.\n      const dims = await this.loader?.loadDims(this.loadSpecRequired);\n      if (dims) {\n        const dimsZYX = dims.map(({ shape }): [number, number, number] => [shape[2], shape[3], shape[4]]);\n        // Determine which scale level *would* be loaded, and see if it's different than what we have\n        const levelToLoad = pickLevelToLoadUnscaled(this.loadSpecRequired, dimsZYX);\n        shouldReload = this.imageInfo.multiscaleLevel !== levelToLoad;\n      }\n    }\n\n    if (shouldReload) {\n      this.loadNewData(onChannelLoaded);\n    }\n  }\n\n  /**\n   * Loads new data as specified in `this.loadSpecRequired`. Clones `loadSpecRequired` into `loadSpec` to indicate\n   * that the data that *must* be loaded is now the data that *has* been loaded.\n   */\n  private loadNewData(onChannelLoaded?: PerChannelCallback): void {\n    this.setUnloaded();\n    this.loadSpec = {\n      ...this.loadSpecRequired,\n      subregion: this.loadSpecRequired.subregion.clone(),\n    };\n    this.loader?.loadVolumeData(this, undefined, onChannelLoaded);\n  }\n\n  // we calculate the physical size of the volume (voxels*pixel_size)\n  // and then normalize to the max physical dimension\n  setVoxelSize(size: Vector3): void {\n    // only set the data if it is > 0.  zero is not an allowed value.\n    size.x = size.x > 0 ? size.x : 1.0;\n    size.y = size.y > 0 ? size.y : 1.0;\n    size.z = size.z > 0 ? size.z : 1.0;\n    this.physicalPixelSize = size;\n\n    this.physicalSize = this.imageInfo.originalSize.clone().multiply(this.physicalPixelSize);\n    // Volume is scaled such that its largest physical dimension is 1 world unit - save that dimension for conversions\n    this.physicalScale = Math.max(this.physicalSize.x, this.physicalSize.y, this.physicalSize.z);\n    // Compute the volume's max extent - scaled to max dimension.\n    this.normPhysicalSize = this.physicalSize.clone().divideScalar(this.physicalScale);\n    // While we're here, pick a power of 10 that divides into our max dimension a reasonable number of times\n    // and save it to be the length of tick marks in 3d.\n    this.tickMarkPhysicalLength = 10 ** Math.floor(Math.log10(this.physicalScale / 2));\n  }\n\n  setUnitSymbol(symbol: string): void {\n    this.physicalUnitSymbol = symbol;\n  }\n\n  /** Computes the center of the volume subset */\n  getContentCenter(): Vector3 {\n    // center point: (normRegionSize / 2 + normRegionOffset - 0.5) * normPhysicalSize;\n    return this.normRegionSize\n      .clone()\n      .divideScalar(2)\n      .add(this.normRegionOffset)\n      .subScalar(0.5)\n      .multiply(this.normPhysicalSize);\n  }\n\n  cleanup(): void {\n    // no op\n  }\n\n  getChannel(channelIndex: number): Channel {\n    return this.channels[channelIndex];\n  }\n\n  onChannelLoaded(batch: number[]): void {\n    // check to see if all channels are now loaded, and fire an event(?)\n    if (this.loadSpec.channels.every((channelIndex) => this.channels[channelIndex].loaded)) {\n      this.loaded = true;\n    }\n    batch.forEach((channelIndex) => this.channelLoadCallback?.(this, channelIndex));\n    this.volumeDataObservers.forEach((observer) => observer.onVolumeData(this, batch));\n  }\n\n  /**\n   * Assign volume data via a 2d array containing the z slices as tiles across it.  Assumes that the incoming data is consistent with the image's pre-existing imageInfo tile metadata.\n   * @param {number} channelIndex\n   * @param {Uint8Array} atlasdata\n   * @param {number} atlaswidth\n   * @param {number} atlasheight\n   */\n  setChannelDataFromAtlas(channelIndex: number, atlasdata: Uint8Array, atlaswidth: number, atlasheight: number): void {\n    this.channels[channelIndex].setBits(atlasdata, atlaswidth, atlasheight);\n    const { x, y, z } = this.imageInfo.subregionSize;\n    this.channels[channelIndex].unpackVolumeFromAtlas(x, y, z);\n    this.onChannelLoaded([channelIndex]);\n  }\n\n  // ASSUMES that this.channelData.options is already set and incoming data is consistent with it\n  /**\n   * Assign volume data as a 3d array ordered x,y,z. The xy size must be equal to tilewidth*tileheight from the imageInfo used to construct this Volume.  Assumes that the incoming data is consistent with the image's pre-existing imageInfo tile metadata.\n   * @param {number} channelIndex\n   * @param {Uint8Array} volumeData\n   */\n  setChannelDataFromVolume(channelIndex: number, volumeData: Uint8Array): void {\n    const { subregionSize, atlasTileDims } = this.imageInfo;\n    this.channels[channelIndex].setFromVolumeData(\n      volumeData,\n      subregionSize.x,\n      subregionSize.y,\n      subregionSize.z,\n      atlasTileDims.x * subregionSize.x,\n      atlasTileDims.y * subregionSize.y\n    );\n    this.onChannelLoaded([channelIndex]);\n  }\n\n  // TODO: decide if this should update imageInfo or not. For now, leave imageInfo alone as the \"original\" data\n  /**\n   * Add a new channel ready to receive data from one of the setChannelDataFrom* calls.\n   * Name and color will be defaulted if not provided. For now, leave imageInfo alone as the \"original\" data\n   * @param {string} name\n   * @param {Array.<number>} color [r,g,b]\n   */\n  appendEmptyChannel(name: string, color?: [number, number, number]): number {\n    const idx = this.imageInfo.numChannels;\n    const chname = name || \"channel_\" + idx;\n    const chcolor = color || getColorByChannelIndex(idx);\n    this.numChannels += 1;\n    this.channelNames.push(chname);\n    this.channelColorsDefault.push(chcolor);\n\n    this.channels.push(new Channel(chname));\n\n    for (let i = 0; i < this.volumeDataObservers.length; ++i) {\n      this.volumeDataObservers[i].onVolumeChannelAdded(this, idx);\n    }\n\n    return idx;\n  }\n\n  /**\n   * Get a value from the volume data\n   * @return {number} the intensity value from the given channel at the given xyz location\n   * @param {number} c The channel index\n   * @param {number} x\n   * @param {number} y\n   * @param {number} z\n   */\n  getIntensity(c: number, x: number, y: number, z: number): number {\n    return this.channels[c].getIntensity(x, y, z);\n  }\n\n  /**\n   * Get the 256-bin histogram for the given channel\n   * @return {Histogram} the histogram\n   * @param {number} c The channel index\n   */\n  getHistogram(c: number): Histogram {\n    return this.channels[c].getHistogram();\n  }\n\n  /**\n   * Set the lut for the given channel\n   * @param {number} c The channel index\n   * @param {Array.<number>} lut The lut as a 256 element array\n   */\n  setLut(c: number, lut: Uint8Array): void {\n    this.channels[c].setLut(lut);\n  }\n\n  /**\n   * Set the color palette for the given channel\n   * @param {number} c The channel index\n   * @param {Array.<number>} palette The colors as a 256 element array * RGBA\n   */\n  setColorPalette(c: number, palette: Uint8Array): void {\n    this.channels[c].setColorPalette(palette);\n  }\n\n  /**\n   * Set the color palette alpha multiplier for the given channel.\n   * This will blend between the ordinary color lut and this colorPalette lut.\n   * @param {number} c The channel index\n   * @param {number} alpha The alpha value as a number from 0 to 1\n   */\n  setColorPaletteAlpha(c: number, alpha: number): void {\n    this.channels[c].setColorPaletteAlpha(alpha);\n  }\n\n  /**\n   * Return the intrinsic rotation associated with this volume (radians)\n   * @return {Array.<number>} the xyz Euler angles (radians)\n   */\n  getRotation(): [number, number, number] {\n    // default axis order is XYZ\n    return this.imageInfo.transform.rotation.toArray();\n  }\n\n  /**\n   * Return the intrinsic translation (pivot center delta) associated with this volume, in normalized volume units\n   * @return {Array.<number>} the xyz translation in normalized volume units\n   */\n  getTranslation(): [number, number, number] {\n    return this.voxelsToWorldSpace(this.imageInfo.transform.translation.toArray());\n  }\n\n  /**\n   * Return a translation in normalized volume units, given a translation in image voxels\n   * @return {Array.<number>} the xyz translation in normalized volume units\n   */\n  voxelsToWorldSpace(xyz: [number, number, number]): [number, number, number] {\n    // ASSUME: translation is in original image voxels.\n    // account for pixel_size and normalized scaling in the threejs volume representation we're using\n    const m = 1.0 / Math.max(this.physicalSize.x, Math.max(this.physicalSize.y, this.physicalSize.z));\n    return new Vector3().fromArray(xyz).multiply(this.physicalPixelSize).multiplyScalar(m).toArray();\n  }\n\n  addVolumeDataObserver(o: VolumeDataObserver): void {\n    this.volumeDataObservers.push(o);\n  }\n\n  removeVolumeDataObserver(o: VolumeDataObserver): void {\n    if (o) {\n      const i = this.volumeDataObservers.indexOf(o);\n      if (i !== -1) {\n        this.volumeDataObservers.splice(i, 1);\n      }\n    }\n  }\n\n  removeAllVolumeDataObservers(): void {\n    this.volumeDataObservers = [];\n  }\n}\n","type MaybeCacheEntry = CacheEntry | null;\ntype CacheEntry = {\n  /** The data contained in this entry */\n  data: ArrayBuffer;\n  /** The previous entry in the LRU list (more recently used) */\n  prev: MaybeCacheEntry;\n  /** The next entry in the LRU list (less recently used) */\n  next: MaybeCacheEntry;\n  /** The key which indexes this entry */\n  key: string;\n};\n\n/** Default: 250MB. Should be large enough to be useful but safe for most any computer that can run the app */\nconst CACHE_MAX_SIZE_DEFAULT = 250_000_000;\n\nexport default class VolumeCache {\n  private entries: Map<string, CacheEntry>;\n\n  public readonly maxSize: number;\n  private currentSize: number;\n\n  // Ends of a linked list of entries, to track LRU and evict efficiently\n  private first: MaybeCacheEntry;\n  private last: MaybeCacheEntry;\n  // TODO implement some way to manage used vs unused (prefetched) entries so\n  // that prefetched entries which are never used don't get highest priority!\n\n  constructor(maxSize = CACHE_MAX_SIZE_DEFAULT) {\n    this.entries = new Map();\n    this.maxSize = maxSize;\n    this.currentSize = 0;\n\n    this.first = null;\n    this.last = null;\n  }\n\n  // Hide these behind getters so they're definitely never set from the outside\n  /** The size of all data arrays currently stored in this cache, in bytes. */\n  public get size() {\n    return this.currentSize;\n  }\n\n  /** The number of entries currently stored in this cache. */\n  public get numberOfEntries() {\n    return this.entries.size;\n  }\n\n  /**\n   * Removes an entry from a store but NOT the LRU list.\n   * Only call from a method with the word \"evict\" in it!\n   */\n  private removeEntryFromStore(entry: CacheEntry): void {\n    this.entries.delete(entry.key);\n    this.currentSize -= entry.data.byteLength;\n  }\n\n  /**\n   * Removes an entry from the LRU list but NOT its store.\n   * Entry must be replaced in list or removed from store, or it will never be evicted!\n   */\n  private removeEntryFromList(entry: CacheEntry): void {\n    const { prev, next } = entry;\n\n    if (prev) {\n      prev.next = next;\n    } else {\n      this.first = next;\n    }\n\n    if (next) {\n      next.prev = prev;\n    } else {\n      this.last = prev;\n    }\n  }\n\n  /** Adds an entry which is *not currently in the list* to the front of the list. */\n  private addEntryAsFirst(entry: CacheEntry): void {\n    if (this.first) {\n      this.first.prev = entry;\n    } else {\n      this.last = entry;\n    }\n    entry.next = this.first;\n    entry.prev = null;\n    this.first = entry;\n  }\n\n  /** Moves an entry which is *currently in the list* to the front of the list. */\n  private moveEntryToFirst(entry: CacheEntry): void {\n    if (entry === this.first) return;\n    this.removeEntryFromList(entry);\n    this.addEntryAsFirst(entry);\n  }\n\n  /** Evicts the least recently used entry from the cache. */\n  private evictLast(): void {\n    if (!this.last) {\n      console.error(\"VolumeCache: attempt to evict last entry from cache when no last entry is set\");\n      return;\n    }\n\n    this.removeEntryFromStore(this.last);\n\n    if (this.last.prev) {\n      this.last.prev.next = null;\n    }\n    this.last = this.last.prev;\n  }\n\n  /** Evicts a specific entry from the cache. */\n  private evict(entry: CacheEntry): void {\n    this.removeEntryFromStore(entry);\n    this.removeEntryFromList(entry);\n  }\n\n  /**\n   * Adds a new entry to the cache.\n   * @returns {boolean} a boolean indicating whether the insertion succeeded.\n   */\n  public insert(key: string, data: ArrayBuffer): boolean {\n    if (data.byteLength > this.maxSize) {\n      console.error(\"VolumeCache: attempt to insert a single entry larger than the cache\");\n      return false;\n    }\n\n    // Check if entry is already in cache\n    // This will move the entry to the front of the LRU list, if present\n    const getResult = this.getEntry(key);\n    if (getResult !== undefined) {\n      getResult.data = data;\n      return true;\n    }\n\n    // Add new entry to cache\n    const newEntry: CacheEntry = { data, prev: null, next: null, key };\n    this.addEntryAsFirst(newEntry);\n    this.entries.set(key, newEntry);\n    this.currentSize += data.byteLength;\n\n    // Evict until size is within limit\n    while (this.currentSize > this.maxSize) {\n      this.evictLast();\n    }\n    return true;\n  }\n\n  /** Internal implementation of `get`. Returns all entry metadata, not just the raw data. */\n  private getEntry(key: string): CacheEntry | undefined {\n    const result = this.entries.get(key);\n    if (result) {\n      this.moveEntryToFirst(result);\n    }\n    return result;\n  }\n\n  /** Attempts to get a single entry from the cache. */\n  public get(key: string): ArrayBuffer | undefined {\n    return this.getEntry(key)?.data;\n  }\n\n  /** Clears all cache entries whose keys begin with the specified prefix. */\n  public clearWithPrefix(prefix: string): void {\n    for (const [key, entry] of this.entries.entries()) {\n      if (key.startsWith(prefix)) {\n        this.evict(entry);\n      }\n    }\n  }\n\n  /** Clears all data from the cache. */\n  public clear(): void {\n    while (this.last) {\n      this.evictLast();\n    }\n  }\n}\n","export const defaultColors: [number, number, number][] = [\n  [255, 0, 255],\n  [255, 255, 255],\n  [0, 255, 255],\n];\n\ninterface HSVColor {\n  h: number;\n  s: number;\n  v: number;\n}\n// 0 <= (h, s, v) <= 1\n// returns 0 <= (r, g, b) <= 255 rounded to nearest integer\n// you can also pass in just one arg as an object of {h, s, v} props.\nfunction HSVtoRGB(h: number | HSVColor, s: number, v: number): [number, number, number] {\n  let r, g, b;\n  let hh = 0;\n  if (arguments.length === 1) {\n    const hsv = h as HSVColor;\n    (s = hsv.s), (v = hsv.v), (hh = hsv.h);\n  } else {\n    hh = h as number;\n  }\n  const i = Math.floor(hh * 6);\n  const f = hh * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      (r = v), (g = t), (b = p);\n      break;\n    case 1:\n      (r = q), (g = v), (b = p);\n      break;\n    case 2:\n      (r = p), (g = v), (b = t);\n      break;\n    case 3:\n      (r = p), (g = q), (b = v);\n      break;\n    case 4:\n      (r = t), (g = p), (b = v);\n      break;\n    case 5:\n      (r = v), (g = p), (b = q);\n      break;\n  }\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n\n// 1993 Park-Miller LCG\nfunction LCG(s) {\n  return function () {\n    s = Math.imul(48271, s) | 0 % 2147483647;\n    return (s & 2147483647) / 2147483648;\n  };\n}\n// Use it like so:\nconst myrand = LCG(123);\n\n// if index exceeds defaultColors start choosing random ones\n// returns [r,g,b] 0-255 range\nexport const getColorByChannelIndex = (index: number): [number, number, number] => {\n  if (!defaultColors[index]) {\n    defaultColors[index] = HSVtoRGB(myrand(), myrand() * 0.5 + 0.5, myrand() * 0.5 + 0.5);\n  }\n  return defaultColors[index];\n};\n","import { Box3, Vector3 } from \"three\";\n\nimport Volume, { ImageInfo } from \"../Volume.js\";\nimport { buildDefaultMetadata } from \"./VolumeLoaderUtils.js\";\nimport { PrefetchDirection } from \"./zarr_utils/types.js\";\n\nexport class LoadSpec {\n  time = 0;\n  /** The max size of a volume atlas that may be produced by a load. Used to pick the appropriate multiscale level. */\n  maxAtlasEdge?: number;\n  /** An optional bias added to the scale level index after the optimal level is picked based on `maxAtlasEdge`. */\n  scaleLevelBias?: number;\n  /**\n   * The max scale level to load. Even when this is specified, the loader may pick a *lower* scale level based on\n   * limits imposed by `scaleLevelBias` and `maxAtlasEdge` (or their defaults if unspecified).\n   */\n  multiscaleLevel?: number;\n  /** Subregion of volume to load. If not specified, the entire volume is loaded. Specify as floats between 0-1. */\n  subregion = new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1));\n  channels?: number[];\n}\n\nexport function loadSpecToString(spec: LoadSpec): string {\n  const { min, max } = spec.subregion;\n  return `${spec.multiscaleLevel}:${spec.time}:x(${min.x},${max.x}):y(${min.y},${max.y}):z(${min.z},${max.z})`;\n}\n\nexport class VolumeDims {\n  // shape: [t, c, z, y, x]\n  shape: number[] = [0, 0, 0, 0, 0];\n  // spacing: [t, c, z, y, x]; generally expect 1 for non-spatial dimensions\n  spacing: number[] = [1, 1, 1, 1, 1];\n  spaceUnit = \"μm\";\n  timeUnit = \"s\";\n  // TODO make this an enum?\n  dataType = \"uint8\";\n}\n\nexport type LoadedVolumeInfo = {\n  imageInfo: ImageInfo;\n  loadSpec: LoadSpec;\n};\n\n/**\n * @callback PerChannelCallback\n * @param {string} imageurl\n * @param {Volume} volume\n * @param {number} channelindex\n */\nexport type PerChannelCallback = (volume: Volume, channelIndex: number) => void;\n\n// allow lists of channel indices and data arrays to be passed to the callback\nexport type RawChannelDataCallback = (channelIndex: number[], data: Uint8Array[], atlasDims?: [number, number]) => void;\n\n/**\n * Loads volume data from a source specified by a `LoadSpec`.\n *\n * Loaders may keep state for reuse between volume creation and volume loading, and should be kept alive until volume\n * loading is complete. (See `createVolume`)\n */\nexport interface IVolumeLoader {\n  /** Use VolumeDims to further refine a `LoadSpec` for use in `createVolume` */\n  loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]>;\n\n  /**\n   * Create an empty `Volume` from a `LoadSpec`, which must be passed to `loadVolumeData` to begin loading.\n   * Optionally pass a callback to respond whenever new channel data is loaded into the volume.\n   */\n  createVolume(loadSpec: LoadSpec, onChannelLoaded?: PerChannelCallback): Promise<Volume>;\n\n  /**\n   * Begin loading a volume's data, as specified in its `LoadSpec`.\n   * Pass a callback to respond when this request loads a new channel. This callback will execute after the\n   * one assigned in `createVolume`, if any.\n   */\n  // TODO make this return a promise that resolves when loading is done?\n  // TODO this is not cancellable in the sense that any async requests initiated here are not stored\n  // in a way that they can be interrupted.\n  // TODO explicitly passing a `LoadSpec` is now rarely useful. Remove?\n  loadVolumeData(volume: Volume, loadSpec?: LoadSpec, onChannelLoaded?: PerChannelCallback): void;\n\n  /** Change which directions to prioritize when prefetching. Currently only implemented on `OMEZarrLoader`. */\n  setPrefetchPriority(directions: PrefetchDirection[]): void;\n\n  /**\n   * By default channel data can arrive out of order and at different times.\n   * This can cause the rendering to update in a way that is not visually appealing.\n   * In particular, during time series playback or Z slice playback, we would like\n   * to see all channels update at the same time.\n   * @param sync Set true to force all requested channels to load at the same time\n   */\n  syncMultichannelLoading(sync: boolean): void;\n}\n\n/** Abstract class which allows loaders to accept and return types that are easier to transfer to/from a worker. */\nexport abstract class ThreadableVolumeLoader implements IVolumeLoader {\n  /** Unchanged from `IVolumeLoader`. See that interface for details. */\n  abstract loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]>;\n\n  /**\n   * Creates an `ImageInfo` object from a `LoadSpec`, which may be passed to the `Volume` constructor to create an\n   * empty volume that can accept data loaded with the given `LoadSpec`.\n   *\n   * Also returns a new `LoadSpec` that may have been modified from the input `LoadSpec` to reflect the constraints or\n   * abilities of the loader. This new `LoadSpec` should be used when constructing the `Volume`, _not_ the original.\n   */\n  abstract createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo>;\n\n  /**\n   * Begins loading per-channel data for the volume specified by `imageInfo` and `loadSpec`.\n   *\n   * Returns a promise that resolves to reflect any modifications to `imageInfo` and/or `loadSpec` that need to be made\n   * based on this load. Actual loaded channel data is passed to `onData` as it is loaded. Depending on the format,\n   * the returned array may be in simple 3d dimension order or reflect a 2d atlas. If the latter, the dimensions of the\n   * atlas are passed as the third argument to `onData`.\n   */\n  abstract loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<Partial<LoadedVolumeInfo>>;\n\n  setPrefetchPriority(_directions: PrefetchDirection[]): void {\n    // no-op by default\n  }\n\n  syncMultichannelLoading(_sync: boolean): void {\n    // default behavior is async, to update channels as they arrive, depending on each\n    // loader's implementation details.\n  }\n\n  async createVolume(loadSpec: LoadSpec, onChannelLoaded?: PerChannelCallback): Promise<Volume> {\n    const { imageInfo, loadSpec: adjustedLoadSpec } = await this.createImageInfo(loadSpec);\n    const vol = new Volume(imageInfo, adjustedLoadSpec, this);\n    vol.channelLoadCallback = onChannelLoaded;\n    vol.imageMetadata = buildDefaultMetadata(imageInfo);\n    return vol;\n  }\n\n  async loadVolumeData(\n    volume: Volume,\n    loadSpecOverride?: LoadSpec,\n    onChannelLoaded?: PerChannelCallback\n  ): Promise<void> {\n    const onChannelData: RawChannelDataCallback = (channelIndices, dataArrays, atlasDims) => {\n      for (let i = 0; i < channelIndices.length; i++) {\n        const channelIndex = channelIndices[i];\n        const data = dataArrays[i];\n        if (atlasDims) {\n          volume.setChannelDataFromAtlas(channelIndex, data, atlasDims[0], atlasDims[1]);\n        } else {\n          volume.setChannelDataFromVolume(channelIndex, data);\n        }\n        onChannelLoaded?.(volume, channelIndex);\n      }\n    };\n\n    const spec = { ...loadSpecOverride, ...volume.loadSpec };\n    const { imageInfo, loadSpec } = await this.loadRawChannelData(volume.imageInfo, spec, onChannelData);\n\n    if (imageInfo) {\n      volume.imageInfo = imageInfo;\n      volume.updateDimensions();\n    }\n    volume.loadSpec = { ...loadSpec, ...spec };\n  }\n}\n","import { Box3, Vector2, Vector3 } from \"three\";\n\nimport {\n  ThreadableVolumeLoader,\n  type LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport type { ImageInfo } from \"../Volume.js\";\nimport VolumeCache from \"../VolumeCache.js\";\n\ninterface PackedChannelsImage {\n  name: string;\n  channels: number[];\n}\n\n/* eslint-disable @typescript-eslint/naming-convention */\ntype JsonImageInfo = {\n  name: string;\n  version?: string;\n  images: PackedChannelsImage[];\n\n  /** X size of the *original* (not downsampled) volume, in pixels */\n  width: number;\n  /** Y size of the *original* (not downsampled) volume, in pixels */\n  height: number;\n  /** Number of rows of z-slice tiles (not pixels) in the texture atlas */\n  rows: number;\n  /** Number of columns of z-slice tiles (not pixels) in the texture atlas */\n  cols: number;\n  /** Width of a single atlas tile in pixels */\n  tile_width: number;\n  /** Height of a single atlas tile in pixels */\n  tile_height: number;\n  /** Width of the texture atlas in pixels; equivalent to `tile_width * cols` */\n  atlas_width: number;\n  /** Height of the texture atlas in pixels; equivalent to `tile_height * rows` */\n  atlas_height: number;\n  /** Number of tiles in the texture atlas (or number of z-slices in the volume segment) */\n  tiles: number;\n  /** Physical x size of a single *original* (not downsampled) pixel */\n  pixel_size_x: number;\n  /** Physical y size of a single *original* (not downsampled) pixel */\n  pixel_size_y: number;\n  /** Physical z size of a single pixel */\n  pixel_size_z: number;\n  /** Symbol of physical unit used by `pixel_size_(x|y|z)` fields */\n  pixel_size_unit?: string;\n\n  channels: number;\n  channel_names: string[];\n  channel_colors?: [number, number, number][];\n\n  times?: number;\n  time_scale?: number;\n  time_unit?: string;\n\n  // TODO should be optional?\n  transform: {\n    translation: [number, number, number];\n    rotation: [number, number, number];\n  };\n  userData?: Record<string, unknown>;\n};\n/* eslint-enable @typescript-eslint/naming-convention */\n\nconst convertImageInfo = (json: JsonImageInfo): ImageInfo => ({\n  name: json.name,\n\n  originalSize: new Vector3(json.width, json.height, json.tiles),\n  atlasTileDims: new Vector2(json.cols, json.rows),\n  volumeSize: new Vector3(json.tile_width, json.tile_height, json.tiles),\n  subregionSize: new Vector3(json.tile_width, json.tile_height, json.tiles),\n  subregionOffset: new Vector3(0, 0, 0),\n  physicalPixelSize: new Vector3(json.pixel_size_x, json.pixel_size_y, json.pixel_size_z),\n  spatialUnit: json.pixel_size_unit || \"μm\",\n\n  numChannels: json.channels,\n  channelNames: json.channel_names,\n  channelColors: json.channel_colors,\n\n  times: json.times || 1,\n  timeScale: json.time_scale || 1,\n  timeUnit: json.time_unit || \"s\",\n\n  numMultiscaleLevels: 1,\n  multiscaleLevel: 0,\n\n  transform: {\n    translation: json.transform?.translation\n      ? new Vector3().fromArray(json.transform.translation)\n      : new Vector3(0, 0, 0),\n    rotation: json.transform?.rotation ? new Vector3().fromArray(json.transform.rotation) : new Vector3(0, 0, 0),\n  },\n\n  userData: json.userData,\n});\n\nclass JsonImageInfoLoader extends ThreadableVolumeLoader {\n  urls: string[];\n  jsonInfo: (JsonImageInfo | undefined)[];\n\n  cache?: VolumeCache;\n\n  constructor(urls: string | string[], cache?: VolumeCache) {\n    super();\n\n    if (Array.isArray(urls)) {\n      this.urls = urls;\n    } else {\n      this.urls = [urls];\n    }\n\n    this.jsonInfo = new Array(this.urls.length);\n    this.cache = cache;\n  }\n\n  private async getJsonImageInfo(time: number): Promise<JsonImageInfo> {\n    const cachedInfo = this.jsonInfo[time];\n    if (cachedInfo) {\n      return cachedInfo;\n    }\n\n    const response = await fetch(this.urls[time]);\n    const imageInfo = (await response.json()) as JsonImageInfo;\n\n    imageInfo.pixel_size_unit = imageInfo.pixel_size_unit || \"μm\";\n    imageInfo.times = imageInfo.times || this.urls.length;\n    this.jsonInfo[time] = imageInfo;\n    return imageInfo;\n  }\n\n  async loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n\n    const d = new VolumeDims();\n    d.shape = [jsonInfo.times || 1, jsonInfo.channels, jsonInfo.tiles, jsonInfo.tile_height, jsonInfo.tile_width];\n    d.spacing = [1, 1, jsonInfo.pixel_size_z, jsonInfo.pixel_size_y, jsonInfo.pixel_size_x];\n    d.spaceUnit = jsonInfo.pixel_size_unit || \"μm\";\n    d.dataType = \"uint8\";\n    return [d];\n  }\n\n  async createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n    return { imageInfo: convertImageInfo(jsonInfo), loadSpec };\n  }\n\n  async loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<{ loadSpec?: LoadSpec }> {\n    // if you need to adjust image paths prior to download,\n    // now is the time to do it.\n    // Try to figure out the urlPrefix from the LoadSpec.\n    // For this format we assume the image data is in the same directory as the json file.\n    const jsonInfo = await this.getJsonImageInfo(loadSpec.time);\n\n    let images = jsonInfo?.images;\n    if (!images) {\n      return {};\n    }\n\n    const requestedChannels = loadSpec.channels;\n    if (requestedChannels) {\n      // If only some channels are requested, load only images which contain at least one requested channel\n      images = images.filter(({ channels }) => channels.some((ch) => ch in requestedChannels));\n    }\n\n    // This regex removes everything after the last slash, so the url had better be simple.\n    const urlPrefix = this.urls[loadSpec.time].replace(/[^/]*$/, \"\");\n    images = images.map((element) => ({ ...element, name: urlPrefix + element.name }));\n\n    const w = imageInfo.atlasTileDims.x * imageInfo.volumeSize.x;\n    const h = imageInfo.atlasTileDims.y * imageInfo.volumeSize.y;\n    const wrappedOnData = (ch: number[], data: Uint8Array[]) => onData(ch, data, [w, h]);\n    JsonImageInfoLoader.loadVolumeAtlasData(images, wrappedOnData, this.cache);\n\n    const adjustedLoadSpec = {\n      ...loadSpec,\n      // `subregion` and `multiscaleLevel` are unused by this loader\n      subregion: new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1)),\n      multiscaleLevel: 0,\n      // include all channels in any loaded images\n      channels: images.flatMap(({ channels }) => channels),\n    };\n    return { loadSpec: adjustedLoadSpec };\n  }\n\n  /**\n   * load per-channel volume data from a batch of image files containing the volume slices tiled across the images\n   * @param {Array.<{name:string, channels:Array.<number>}>} imageArray\n   * @param {RawChannelDataCallback} onData Per-channel callback. Called when each channel's atlased volume data is loaded\n   * @param {VolumeCache} cache\n   * @example loadVolumeAtlasData([{\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_0.png\",\n   *     \"channels\": [0, 1, 2]\n   * }, {\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_1.png\",\n   *     \"channels\": [3, 4, 5]\n   * }, {\n   *     \"name\": \"AICS-10_5_5.ome.tif_atlas_2.png\",\n   *     \"channels\": [6, 7, 8]\n   * }], mycallback);\n   */\n  static loadVolumeAtlasData(\n    imageArray: PackedChannelsImage[],\n    onData: RawChannelDataCallback,\n    cache?: VolumeCache\n  ): void {\n    imageArray.forEach(async (image) => {\n      // Because the data is fetched such that one fetch returns a whole batch,\n      // if any in batch is cached then they all should be. So if any in batch is NOT cached,\n      // then we will have to do a batch request. This logic works both ways because it's all or nothing.\n      let cacheHit = true;\n      for (let j = 0; j < Math.min(image.channels.length, 4); ++j) {\n        const chindex = image.channels[j];\n        const cacheResult = cache?.get(`${image.name}/${chindex}`);\n        if (cacheResult) {\n          onData([chindex], [new Uint8Array(cacheResult)]);\n        } else {\n          cacheHit = false;\n          // we can stop checking because we know we are going to have to fetch the whole batch\n          break;\n        }\n      }\n\n      // if all channels were in cache then we can move on to the next\n      // image (batch) without requesting\n      if (cacheHit) {\n        return;\n      }\n\n      const response = await fetch(image.name, { mode: \"cors\" });\n      const blob = await response.blob();\n      const bitmap = await createImageBitmap(blob);\n\n      const canvas = new OffscreenCanvas(bitmap.width, bitmap.height);\n      const ctx = canvas.getContext(\"2d\") as OffscreenCanvasRenderingContext2D | null;\n      if (!ctx) {\n        console.log(\"Error creating canvas 2d context for \" + image.name);\n        return;\n      }\n      ctx.globalCompositeOperation = \"copy\";\n      ctx.globalAlpha = 1.0;\n      ctx.drawImage(bitmap, 0, 0);\n      const iData = ctx.getImageData(0, 0, bitmap.width, bitmap.height);\n\n      const channelsBits: Uint8Array[] = [];\n      const length = bitmap.width * bitmap.height;\n\n      // allocate channels in batch\n      for (let ch = 0; ch < Math.min(image.channels.length, 4); ++ch) {\n        channelsBits.push(new Uint8Array(length));\n      }\n\n      // extract the data\n      for (let j = 0; j < Math.min(image.channels.length, 4); ++j) {\n        for (let px = 0; px < length; px++) {\n          channelsBits[j][px] = iData.data[px * 4 + j];\n        }\n      }\n\n      // done with `iData` and `canvas` now.\n\n      for (let ch = 0; ch < Math.min(image.channels.length, 4); ++ch) {\n        const chindex = image.channels[ch];\n        cache?.insert(`${image.name}/${chindex}`, channelsBits[ch]);\n        // NOTE: the atlas dimensions passed in here are currently unused by `JSONImageInfoLoader`\n        onData([chindex], [channelsBits[ch]], [bitmap.width, bitmap.height]);\n      }\n    });\n  }\n}\n\nexport { JsonImageInfoLoader };\n","import { Box3, Vector3 } from \"three\";\n\nimport * as zarr from \"@zarrita/core\";\nimport { get as zarrGet, slice, Slice } from \"@zarrita/indexing\";\nimport { AbsolutePath } from \"@zarrita/storage\";\n// Importing `FetchStore` from its home subpackage (@zarrita/storage) causes errors.\n// Getting it from the top-level package means we don't get its type. This is also a bug, but it's more acceptable.\nimport { FetchStore } from \"zarrita\";\n\nimport { ImageInfo } from \"../Volume.js\";\nimport VolumeCache from \"../VolumeCache.js\";\nimport SubscribableRequestQueue from \"../utils/SubscribableRequestQueue.js\";\nimport {\n  ThreadableVolumeLoader,\n  LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport {\n  composeSubregion,\n  computePackedAtlasDims,\n  convertSubregionToPixels,\n  pickLevelToLoad,\n  unitNameToSymbol,\n} from \"./VolumeLoaderUtils.js\";\nimport ChunkPrefetchIterator from \"./zarr_utils/ChunkPrefetchIterator.js\";\nimport WrappedStore from \"./zarr_utils/WrappedStore.js\";\nimport {\n  getDimensionCount,\n  getScale,\n  matchSourceScaleLevels,\n  orderByDimension,\n  orderByTCZYX,\n  remapAxesToTCZYX,\n} from \"./zarr_utils/utils.js\";\nimport type {\n  OMEZarrMetadata,\n  SubscriberId,\n  TCZYX,\n  PrefetchDirection,\n  ZarrSource,\n  NumericZarrArray,\n} from \"./zarr_utils/types.js\";\n\nconst CHUNK_REQUEST_CANCEL_REASON = \"chunk request cancelled\";\n\nfunction convertChannel(channelData: zarr.TypedArray<zarr.NumberDataType>): Uint8Array {\n  if (channelData instanceof Uint8Array) {\n    return channelData as Uint8Array;\n  }\n\n  const u8 = new Uint8Array(channelData.length);\n\n  // get min and max\n  let min = channelData[0];\n  let max = channelData[0];\n  for (let i = 0; i < channelData.length; i++) {\n    const val = channelData[i];\n    if (val < min) {\n      min = val;\n    }\n    if (val > max) {\n      max = val;\n    }\n  }\n\n  // normalize and convert to u8\n  const range = max - min;\n  for (let i = 0; i < channelData.length; i++) {\n    u8[i] = ((channelData[i] - min) / range) * 255;\n  }\n\n  return u8;\n}\n\nexport type ZarrLoaderFetchOptions = {\n  /** The max. number of requests the loader can issue at a time. Ignored if the constructor also receives a queue. */\n  concurrencyLimit?: number;\n  /**\n   * The max. number of *prefetch* requests the loader can issue at a time. Set lower than `concurrencyLimit` to ensure\n   * that prefetching leaves room in the queue for actual loads. Ignored if the constructor also receives a queue.\n   */\n  prefetchConcurrencyLimit?: number;\n  /**\n   * The max. number of chunks to prefetch outward in either direction. E.g. if a load requests chunks with z coords 3\n   * and 4 and `maxPrefetchDistance` in z is 2, the loader will prefetch similar chunks with z coords 1, 2, 5, and 6\n   * (or until it hits `maxPrefetchChunks`). Ordered TZYX.\n   */\n  maxPrefetchDistance: [number, number, number, number];\n  /** The max. number of total chunks that can be prefetched after any load. */\n  maxPrefetchChunks: number;\n  /** The initial directions to prioritize when prefetching */\n  priorityDirections?: PrefetchDirection[];\n};\n\ntype ZarrChunkFetchInfo = {\n  sourceIdx: number;\n  key: string;\n};\n\nconst DEFAULT_FETCH_OPTIONS = {\n  maxPrefetchDistance: [5, 5, 5, 5] as [number, number, number, number],\n  maxPrefetchChunks: 30,\n};\n\nclass OMEZarrLoader extends ThreadableVolumeLoader {\n  /** The ID of the subscriber responsible for \"actual loads\" (non-prefetch requests) */\n  private loadSubscriber: SubscriberId | undefined;\n  /** The ID of the subscriber responsible for prefetches, so that requests can be cancelled and reissued */\n  private prefetchSubscriber: SubscriberId | undefined;\n\n  // TODO: this property should definitely be owned by `Volume` if this loader is ever used by multiple volumes.\n  //   This may cause errors or incorrect results otherwise!\n  private maxExtent?: Box3;\n\n  private syncChannels = false;\n\n  private constructor(\n    /**\n     * Array of records, each containing the objects and metadata we need to load from one source of multiscale zarr\n     * data. See documentation on `ZarrSource` for more.\n     */\n    private sources: ZarrSource[],\n    /** Handle to a `SubscribableRequestQueue` for smart concurrency management and request cancelling/reissuing. */\n    private requestQueue: SubscribableRequestQueue,\n    /** Options to configure (pre)fetching behavior. */\n    private fetchOptions: ZarrLoaderFetchOptions = DEFAULT_FETCH_OPTIONS,\n    /** Direction(s) to prioritize when prefetching. Stored separate from `fetchOptions` since it may be mutated. */\n    private priorityDirections: PrefetchDirection[] = []\n  ) {\n    super();\n  }\n\n  /**\n   * Creates a new `OMEZarrLoader`.\n   *\n   * @param urls The URL(s) of the OME-Zarr data to load. If `urls` is an array, the loader will attempt to find scale\n   *  levels with exactly the same size in every source. If matching level(s) are available, the loader will produce a\n   *  volume containing all channels from every provided zarr in the order they appear in `urls`. If no matching sets\n   *  of scale levels are available, creation fails.\n   * @param scenes The scene(s) to load from each URL. If `urls` is an array, `scenes` may either be an array of values\n   *  corresponding to each URL, or a single value to apply to all URLs. Default 0.\n   * @param cache A cache to use for storing fetched data. If not provided, a new cache will be created.\n   * @param queue A queue to use for managing requests. If not provided, a new queue will be created.\n   * @param fetchOptions Options to configure (pre)fetching behavior.\n   */\n  static async createLoader(\n    urls: string | string[],\n    scenes: number | number[] = 0,\n    cache?: VolumeCache,\n    queue?: SubscribableRequestQueue,\n    fetchOptions?: ZarrLoaderFetchOptions\n  ): Promise<OMEZarrLoader> {\n    // Setup queue and store, get basic metadata\n    if (!queue) {\n      queue = new SubscribableRequestQueue(fetchOptions?.concurrencyLimit, fetchOptions?.prefetchConcurrencyLimit);\n    }\n    const urlsArr = Array.isArray(urls) ? urls : [urls];\n    const scenesArr = Array.isArray(scenes) ? scenes : [scenes];\n\n    // Create one `ZarrSource` per URL\n    const sourceProms = urlsArr.map(async (url, i) => {\n      const store = new WrappedStore<RequestInit>(new FetchStore(url), cache, queue);\n      const root = zarr.root(store);\n      const group = await zarr.open(root, { kind: \"group\" });\n      const { multiscales, omero } = group.attrs as OMEZarrMetadata;\n\n      // Pick scene (multiscale)\n      let scene = scenesArr[Math.min(i, scenesArr.length - 1)];\n      if (scene > multiscales.length) {\n        console.warn(`WARNING: OMEZarrLoader: scene ${scene} is invalid. Using scene 0.`);\n        scene = 0;\n      }\n      const multiscaleMetadata = multiscales[scene];\n\n      // Open all scale levels of multiscale\n      const lvlProms = multiscaleMetadata.datasets.map(({ path }) => zarr.open(root.resolve(path), { kind: \"array\" }));\n      const scaleLevels = (await Promise.all(lvlProms)) as NumericZarrArray[];\n      const axesTCZYX = remapAxesToTCZYX(multiscaleMetadata.axes);\n\n      return {\n        scaleLevels,\n        multiscaleMetadata,\n        omeroMetadata: omero,\n        axesTCZYX,\n        channelOffset: 0,\n      } as ZarrSource;\n    });\n    const sources = await Promise.all(sourceProms);\n\n    // Set `channelOffset`s so we can match channel indices to sources\n    let channelCount = 0;\n    for (const s of sources) {\n      s.channelOffset = channelCount;\n      channelCount += s.omeroMetadata.channels.length;\n    }\n    // Ensure the sizes of all sources' scale levels are matched up. See this function's docs for more.\n    matchSourceScaleLevels(sources);\n    // TODO: if `matchSourceScaleLevels` returned successfully, every one of these sources' `multiscaleMetadata` is the\n    // same in every field we care about, so we only ever use the first source's `multiscaleMetadata` after this point.\n    // Should we only store one `OMEMultiscale` record total, rather than one per source?\n    const priorityDirs = fetchOptions?.priorityDirections ? fetchOptions.priorityDirections.slice() : undefined;\n    return new OMEZarrLoader(sources, queue, fetchOptions, priorityDirs);\n  }\n\n  private getUnitSymbols(): [string, string] {\n    const source = this.sources[0];\n    // Assume all spatial axes in all sources have the same units - we have no means of storing per-axis unit symbols\n    const xi = source.axesTCZYX[4];\n    const spaceUnitName = source.multiscaleMetadata.axes[xi].unit;\n    const spaceUnitSymbol = unitNameToSymbol(spaceUnitName) || spaceUnitName || \"\";\n\n    const ti = source.axesTCZYX[0];\n    const timeUnitName = ti > -1 ? source.multiscaleMetadata.axes[ti].unit : undefined;\n    const timeUnitSymbol = unitNameToSymbol(timeUnitName) || timeUnitName || \"\";\n\n    return [spaceUnitSymbol, timeUnitSymbol];\n  }\n\n  private getLevelShapesZYX(): [number, number, number][] {\n    const source = this.sources[0];\n    const [z, y, x] = source.axesTCZYX.slice(-3);\n    return source.scaleLevels.map(({ shape }) => [z === -1 ? 1 : shape[z], shape[y], shape[x]]);\n  }\n\n  private getScale(level: number): TCZYX<number> {\n    return getScale(this.sources[0].multiscaleMetadata.datasets[level], this.sources[0].axesTCZYX);\n  }\n\n  private orderByDimension<T>(valsTCZYX: TCZYX<T>, sourceIdx = 0): T[] {\n    return orderByDimension(valsTCZYX, this.sources[sourceIdx].axesTCZYX);\n  }\n\n  private orderByTCZYX<T>(valsDimension: T[], defaultValue: T, sourceIdx = 0): TCZYX<T> {\n    return orderByTCZYX(valsDimension, this.sources[sourceIdx].axesTCZYX, defaultValue);\n  }\n\n  /**\n   * Converts a volume channel index to the index of its zarr source and its channel index within that zarr.\n   * e.g., if the loader has 2 sources, the first with 3 channels and the second with 2, then `matchChannelToSource(4)`\n   * returns `[1, 1]` (the second channel of the second source).\n   */\n  private matchChannelToSource(absoluteChannelIndex: number): { sourceIndex: number; channelIndexInSource: number } {\n    const lastSrcIdx = this.sources.length - 1;\n    const lastSrc = this.sources[lastSrcIdx];\n    const lastSrcNumChannels = lastSrc.scaleLevels[0].shape[lastSrc.axesTCZYX[1]];\n\n    if (absoluteChannelIndex > lastSrc.channelOffset + lastSrcNumChannels) {\n      throw new Error(\"Channel index out of range\");\n    }\n\n    const firstGreaterIdx = this.sources.findIndex((src) => src.channelOffset > absoluteChannelIndex);\n    const sourceIndex = firstGreaterIdx === -1 ? lastSrcIdx : firstGreaterIdx - 1;\n    const channelIndexInSource = absoluteChannelIndex - this.sources[sourceIndex].channelOffset;\n    return { sourceIndex, channelIndexInSource };\n  }\n\n  /**\n   * Change which directions to prioritize when prefetching. All chunks will be prefetched in these directions before\n   * any chunks are prefetched in any other directions.\n   */\n  setPrefetchPriority(directions: PrefetchDirection[]): void {\n    this.priorityDirections = directions;\n  }\n\n  syncMultichannelLoading(sync: boolean): void {\n    this.syncChannels = sync;\n  }\n\n  loadDims(loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const [spaceUnit, timeUnit] = this.getUnitSymbols();\n    // Compute subregion size so we can factor that in\n    const maxExtent = this.maxExtent ?? new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1));\n    const subregion = composeSubregion(loadSpec.subregion, maxExtent);\n    const regionSize = subregion.getSize(new Vector3());\n    const regionArr = [1, 1, regionSize.z, regionSize.y, regionSize.x];\n\n    const result = this.sources[0].scaleLevels.map((level, i) => {\n      const scale = this.getScale(i);\n      const dims = new VolumeDims();\n\n      dims.spaceUnit = spaceUnit;\n      dims.timeUnit = timeUnit;\n      dims.shape = this.orderByTCZYX(level.shape, 1).map((val, idx) => Math.max(Math.ceil(val * regionArr[idx]), 1));\n      dims.spacing = this.orderByTCZYX(scale, 1);\n\n      return dims;\n    });\n\n    return Promise.resolve(result);\n  }\n\n  createImageInfo(loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    // We ensured most info (dims, chunks, etc.) matched between sources earlier, so we can just use the first source.\n    const source0 = this.sources[0];\n    const [t, , z, y, x] = source0.axesTCZYX;\n    const hasT = t > -1;\n    const hasZ = z > -1;\n\n    const shape0 = source0.scaleLevels[0].shape;\n    const levelToLoad = pickLevelToLoad(loadSpec, this.getLevelShapesZYX());\n    const shapeLv = source0.scaleLevels[levelToLoad].shape;\n\n    const [spatialUnit, timeUnit] = this.getUnitSymbols();\n\n    // Now we care about other sources: # of channels is the `channelOffset` of the last source plus its # of channels\n    const sourceLast = this.sources[this.sources.length - 1];\n    const cLast = sourceLast.axesTCZYX[1];\n    const lastHasC = cLast > -1;\n    const numChannels = sourceLast.channelOffset + (lastHasC ? sourceLast.scaleLevels[levelToLoad].shape[cLast] : 1);\n    const times = hasT ? shapeLv[t] : 1;\n\n    if (!this.maxExtent) {\n      this.maxExtent = loadSpec.subregion.clone();\n    }\n    const pxDims0 = convertSubregionToPixels(\n      loadSpec.subregion,\n      new Vector3(shape0[x], shape0[y], hasZ ? shape0[z] : 1)\n    );\n    const pxSize0 = pxDims0.getSize(new Vector3());\n    const pxDimsLv = convertSubregionToPixels(\n      loadSpec.subregion,\n      new Vector3(shapeLv[x], shapeLv[y], hasZ ? shapeLv[z] : 1)\n    );\n    const pxSizeLv = pxDimsLv.getSize(new Vector3());\n\n    const atlasTileDims = computePackedAtlasDims(pxSizeLv.z, pxSizeLv.x, pxSizeLv.y);\n\n    // Channel names is the other place where we have to check every source\n    // Track which channel names we've seen so far, so that we can rename them to avoid name collisions\n    const channelNamesMap = new Map<string, number>();\n    const channelNames = this.sources.flatMap((src) =>\n      src.omeroMetadata.channels.map((ch) => {\n        const numMatchingChannels = channelNamesMap.get(ch.label);\n\n        if (numMatchingChannels !== undefined) {\n          // If e.g. we've seen channel \"Membrane\" once before, rename this one to \"Membrane (1)\"\n          channelNamesMap.set(ch.label, numMatchingChannels + 1);\n          return `${ch.label} (${numMatchingChannels})`;\n        } else {\n          channelNamesMap.set(ch.label, 1);\n          return ch.label;\n        }\n      })\n    );\n\n    const scale5d = this.getScale(levelToLoad);\n    const timeScale = hasT ? scale5d[t] : 1;\n\n    const imgdata: ImageInfo = {\n      name: source0.omeroMetadata.name,\n\n      originalSize: pxSize0,\n      atlasTileDims,\n      volumeSize: pxSizeLv,\n      subregionSize: pxSizeLv.clone(),\n      subregionOffset: new Vector3(0, 0, 0),\n      physicalPixelSize: new Vector3(scale5d[x], scale5d[y], hasZ ? scale5d[z] : Math.min(scale5d[x], scale5d[y])),\n      spatialUnit,\n\n      numChannels,\n      channelNames,\n      times,\n      timeScale,\n      timeUnit,\n      numMultiscaleLevels: source0.scaleLevels.length,\n      multiscaleLevel: levelToLoad,\n\n      transform: {\n        translation: new Vector3(0, 0, 0),\n        rotation: new Vector3(0, 0, 0),\n      },\n    };\n\n    // The `LoadSpec` passed in at this stage should represent the subset which this loader loads, not that\n    // which the volume contains. The volume contains the full extent of the subset recognized by this loader.\n    const fullExtentLoadSpec: LoadSpec = {\n      ...loadSpec,\n      subregion: new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1)),\n    };\n\n    return Promise.resolve({ imageInfo: imgdata, loadSpec: fullExtentLoadSpec });\n  }\n\n  private async prefetchChunk(\n    scaleLevel: NumericZarrArray,\n    coords: TCZYX<number>,\n    subscriber: SubscriberId\n  ): Promise<void> {\n    const { store, path } = scaleLevel;\n    const separator = path.endsWith(\"/\") ? \"\" : \"/\";\n    const key = path + separator + this.orderByDimension(coords).join(\"/\");\n    try {\n      // Calling `get` and doing nothing with the result still triggers a cache check, fetch, and insertion\n      await store.get(key as AbsolutePath, { subscriber, isPrefetch: true });\n    } catch (e) {\n      if (e !== CHUNK_REQUEST_CANCEL_REASON) {\n        throw e;\n      }\n    }\n  }\n\n  /** Reads a list of chunk keys requested by a `loadVolumeData` call and sets up appropriate prefetch requests. */\n  private beginPrefetch(keys: ZarrChunkFetchInfo[], scaleLevel: number): void {\n    // Convert keys to arrays of coords\n    const chunkCoords = keys.map(({ sourceIdx, key }) => {\n      const numDims = getDimensionCount(this.sources[sourceIdx].axesTCZYX);\n      const coordsInDimensionOrder = key\n        .trim()\n        .split(\"/\")\n        .slice(-numDims)\n        .filter((s) => s !== \"\")\n        .map((s) => parseInt(s, 10));\n      const sourceCoords = this.orderByTCZYX(coordsInDimensionOrder, 0, sourceIdx);\n      // Convert source channel index to absolute channel index for `ChunkPrefetchIterator`'s benefit\n      // (we match chunk coordinates output from `ChunkPrefetchIterator` back to sources below)\n      sourceCoords[1] += this.sources[sourceIdx].channelOffset;\n      return sourceCoords;\n    });\n\n    // Get number of chunks per dimension in `scaleLevel`\n    const source0Shape = this.sources[0].scaleLevels[scaleLevel];\n    const chunkDimsUnordered = source0Shape.shape.map((dim, idx) => Math.ceil(dim / source0Shape.chunks[idx]));\n    const chunkDims = this.orderByTCZYX(chunkDimsUnordered, 1);\n\n    const subscriber = this.requestQueue.addSubscriber();\n    // `ChunkPrefetchIterator` yields chunk coordinates in order of roughly how likely they are to be loaded next\n    const chunkDimsTZYX: [number, number, number, number] = [chunkDims[0], chunkDims[2], chunkDims[3], chunkDims[4]];\n    const prefetchIterator = new ChunkPrefetchIterator(\n      chunkCoords,\n      this.fetchOptions.maxPrefetchDistance,\n      chunkDimsTZYX,\n      this.priorityDirections\n    );\n\n    let prefetchCount = 0;\n    for (const chunk of prefetchIterator) {\n      if (prefetchCount >= this.fetchOptions.maxPrefetchChunks) {\n        break;\n      }\n      // Match absolute channel coordinate back to source index and channel index\n      const { sourceIndex, channelIndexInSource } = this.matchChannelToSource(chunk[1]);\n      const sourceScaleLevel = this.sources[sourceIndex].scaleLevels[scaleLevel];\n      chunk[1] = channelIndexInSource;\n      this.prefetchChunk(sourceScaleLevel, chunk, subscriber);\n      prefetchCount++;\n    }\n\n    // Clear out old prefetch requests (requests which also cover this new prefetch will be preserved)\n    if (this.prefetchSubscriber !== undefined) {\n      this.requestQueue.removeSubscriber(this.prefetchSubscriber, CHUNK_REQUEST_CANCEL_REASON);\n    }\n    this.prefetchSubscriber = subscriber;\n  }\n\n  private updateImageInfoForLoad(imageInfo: ImageInfo, loadSpec: LoadSpec): ImageInfo {\n    // Apply `this.maxExtent` to subregion, if it exists\n    const maxExtent = this.maxExtent ?? new Box3(new Vector3(0, 0, 0), new Vector3(1, 1, 1));\n    const subregion = composeSubregion(loadSpec.subregion, maxExtent);\n\n    // Pick the level to load based on the subregion size\n    const multiscaleLevel = pickLevelToLoad({ ...loadSpec, subregion }, this.getLevelShapesZYX());\n    const array0Shape = this.sources[0].scaleLevels[multiscaleLevel].shape;\n\n    // Convert subregion to volume voxels\n    const [z, y, x] = this.sources[0].axesTCZYX.slice(2);\n    const regionPx = convertSubregionToPixels(\n      subregion,\n      new Vector3(array0Shape[x], array0Shape[y], z === -1 ? 1 : array0Shape[z])\n    );\n\n    // Derive other image info properties from subregion and level to load\n    const subregionSize = regionPx.getSize(new Vector3());\n    const atlasTileDims = computePackedAtlasDims(subregionSize.z, subregionSize.x, subregionSize.y);\n    const volumeExtent = convertSubregionToPixels(\n      maxExtent,\n      new Vector3(array0Shape[x], array0Shape[y], z === -1 ? 1 : array0Shape[z])\n    );\n    const volumeSize = volumeExtent.getSize(new Vector3());\n\n    return {\n      ...imageInfo,\n      atlasTileDims,\n      volumeSize,\n      subregionSize,\n      subregionOffset: regionPx.min,\n      multiscaleLevel,\n    };\n  }\n\n  loadRawChannelData(\n    imageInfo: ImageInfo,\n    loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<{ imageInfo: ImageInfo }> {\n    // This seemingly useless line keeps a stable local copy of `syncChannels` which the async closures below capture\n    // so that changes to `this.syncChannels` don't affect the behavior of loads in progress.\n    const syncChannels = this.syncChannels;\n\n    const updatedImageInfo = this.updateImageInfoForLoad(imageInfo, loadSpec);\n    const { numChannels, multiscaleLevel } = updatedImageInfo;\n    const channelIndexes = loadSpec.channels ?? Array.from({ length: numChannels }, (_, i) => i);\n\n    const subscriber = this.requestQueue.addSubscriber();\n\n    // Prefetch housekeeping: we want to save keys involved in this load to prefetch later\n    const keys: ZarrChunkFetchInfo[] = [];\n    const reportKeyBase = (sourceIdx: number, key: string, sub: SubscriberId) => {\n      if (sub === subscriber) {\n        keys.push({ sourceIdx, key });\n      }\n    };\n\n    const resultChannelIndices: number[] = [];\n    const resultChannelData: Uint8Array[] = [];\n\n    const channelPromises = channelIndexes.map(async (ch) => {\n      // Build slice spec\n      const min = updatedImageInfo.subregionOffset;\n      const max = min.clone().add(updatedImageInfo.subregionSize);\n      const { sourceIndex: sourceIdx, channelIndexInSource: sourceCh } = this.matchChannelToSource(ch);\n      const unorderedSpec = [loadSpec.time, sourceCh, slice(min.z, max.z), slice(min.y, max.y), slice(min.x, max.x)];\n\n      const level = this.sources[sourceIdx].scaleLevels[multiscaleLevel];\n      const sliceSpec = this.orderByDimension(unorderedSpec as TCZYX<number | Slice>, sourceIdx);\n      const reportKey = (key: string, sub: SubscriberId) => reportKeyBase(sourceIdx, key, sub);\n\n      try {\n        const result = await zarrGet(level, sliceSpec, { opts: { subscriber, reportKey } });\n        const u8 = convertChannel(result.data);\n        if (syncChannels) {\n          resultChannelData.push(u8);\n          resultChannelIndices.push(ch);\n        } else {\n          onData([ch], [u8]);\n        }\n      } catch (e) {\n        // TODO: verify that cancelling requests in progress doesn't leak memory\n        if (e !== CHUNK_REQUEST_CANCEL_REASON) {\n          console.log(e);\n          throw e;\n        }\n      }\n    });\n\n    // Cancel any in-flight requests from previous loads that aren't useful to this one\n    if (this.loadSubscriber !== undefined) {\n      this.requestQueue.removeSubscriber(this.loadSubscriber, CHUNK_REQUEST_CANCEL_REASON);\n    }\n    this.loadSubscriber = subscriber;\n\n    this.beginPrefetch(keys, multiscaleLevel);\n\n    Promise.all(channelPromises).then(() => {\n      if (syncChannels) {\n        onData(resultChannelIndices, resultChannelData);\n      }\n      this.requestQueue.removeSubscriber(subscriber, CHUNK_REQUEST_CANCEL_REASON);\n    });\n    return Promise.resolve({ imageInfo: updatedImageInfo });\n  }\n}\n\nexport { OMEZarrLoader };\n","import { fromUrl } from \"geotiff\";\nimport { Vector3 } from \"three\";\n\nimport {\n  ThreadableVolumeLoader,\n  LoadSpec,\n  type RawChannelDataCallback,\n  VolumeDims,\n  type LoadedVolumeInfo,\n} from \"./IVolumeLoader.js\";\nimport { computePackedAtlasDims } from \"./VolumeLoaderUtils.js\";\nimport type { ImageInfo } from \"../Volume.js\";\n\nfunction prepareXML(xml: string): string {\n  // trim trailing unicode zeros?\n  // eslint-disable-next-line no-control-regex\n  const expr = /[\\u0000]$/g;\n  return xml.trim().replace(expr, \"\").trim();\n}\n\nfunction getOME(xml: string): Element {\n  const parser = new DOMParser();\n  const xmlDoc = parser.parseFromString(xml, \"text/xml\");\n  const omeEl = xmlDoc.getElementsByTagName(\"OME\")[0];\n  return omeEl;\n}\n\nclass OMEDims {\n  sizex = 0;\n  sizey = 0;\n  sizez = 0;\n  sizec = 0;\n  sizet = 0;\n  unit = \"\";\n  pixeltype = \"\";\n  dimensionorder = \"\";\n  pixelsizex = 0;\n  pixelsizey = 0;\n  pixelsizez = 0;\n  channelnames: string[] = [];\n}\n\nfunction getOMEDims(imageEl: Element): OMEDims {\n  const dims = new OMEDims();\n\n  const pixelsEl = imageEl.getElementsByTagName(\"Pixels\")[0];\n  dims.sizex = Number(pixelsEl.getAttribute(\"SizeX\"));\n  dims.sizey = Number(pixelsEl.getAttribute(\"SizeY\"));\n  dims.sizez = Number(pixelsEl.getAttribute(\"SizeZ\"));\n  dims.sizec = Number(pixelsEl.getAttribute(\"SizeC\"));\n  dims.sizet = Number(pixelsEl.getAttribute(\"SizeT\"));\n  dims.unit = pixelsEl.getAttribute(\"PhysicalSizeXUnit\") || \"\";\n  dims.pixeltype = pixelsEl.getAttribute(\"Type\") || \"\";\n  dims.dimensionorder = pixelsEl.getAttribute(\"DimensionOrder\") || \"XYZCT\";\n  dims.pixelsizex = Number(pixelsEl.getAttribute(\"PhysicalSizeX\"));\n  dims.pixelsizey = Number(pixelsEl.getAttribute(\"PhysicalSizeY\"));\n  dims.pixelsizez = Number(pixelsEl.getAttribute(\"PhysicalSizeZ\"));\n  const channelsEls = pixelsEl.getElementsByTagName(\"Channel\");\n  for (let i = 0; i < channelsEls.length; ++i) {\n    const name = channelsEls[i].getAttribute(\"Name\");\n    const id = channelsEls[i].getAttribute(\"ID\");\n    dims.channelnames.push(name ? name : id ? id : \"Channel\" + i);\n  }\n\n  return dims;\n}\n\nconst getBytesPerSample = (type: string): number => (type === \"uint8\" ? 1 : type === \"uint16\" ? 2 : 4);\n\n// Despite the class `TiffLoader` extends, this loader is not threadable, since geotiff internally uses features that\n// aren't available on workers. It uses its own specialized workers anyways.\nclass TiffLoader extends ThreadableVolumeLoader {\n  url: string;\n  dims?: OMEDims;\n\n  constructor(url: string) {\n    super();\n    this.url = url;\n  }\n\n  private async loadOmeDims(): Promise<OMEDims> {\n    if (!this.dims) {\n      const tiff = await fromUrl(this.url, { allowFullFile: true });\n      // DO NOT DO THIS, ITS SLOW\n      // const imagecount = await tiff.getImageCount();\n      // read the FIRST image\n      const image = await tiff.getImage();\n\n      const tiffimgdesc = prepareXML(image.getFileDirectory().ImageDescription);\n      const omeEl = getOME(tiffimgdesc);\n\n      const image0El = omeEl.getElementsByTagName(\"Image\")[0];\n      this.dims = getOMEDims(image0El);\n    }\n    return this.dims;\n  }\n\n  async loadDims(_loadSpec: LoadSpec): Promise<VolumeDims[]> {\n    const dims = await this.loadOmeDims();\n\n    const d = new VolumeDims();\n    d.shape = [dims.sizet, dims.sizec, dims.sizez, dims.sizey, dims.sizex];\n    d.spacing = [1, 1, dims.pixelsizez, dims.pixelsizey, dims.pixelsizex];\n    d.spaceUnit = dims.unit ? dims.unit : \"micron\";\n    d.dataType = dims.pixeltype ? dims.pixeltype : \"uint8\";\n    return [d];\n  }\n\n  async createImageInfo(_loadSpec: LoadSpec): Promise<LoadedVolumeInfo> {\n    const dims = await this.loadOmeDims();\n    // compare with sizex, sizey\n    //const width = image.getWidth();\n    //const height = image.getHeight();\n\n    // TODO allow user setting of this downsampling info?\n    // TODO allow ROI selection: range of x,y,z,c for a given t\n    const atlasDims = computePackedAtlasDims(dims.sizez, dims.sizex, dims.sizey);\n    // fit tiles to max of 2048x2048?\n    const targetSize = 2048;\n    const tilesizex = Math.floor(targetSize / atlasDims.x);\n    const tilesizey = Math.floor(targetSize / atlasDims.y);\n\n    // load tiff and check metadata\n\n    const imgdata: ImageInfo = {\n      name: \"TEST\",\n\n      originalSize: new Vector3(dims.sizex, dims.sizey, dims.sizez),\n      atlasTileDims: atlasDims,\n      volumeSize: new Vector3(tilesizex, tilesizey, dims.sizez),\n      subregionSize: new Vector3(tilesizex, tilesizey, dims.sizez),\n      subregionOffset: new Vector3(0, 0, 0),\n      physicalPixelSize: new Vector3(dims.pixelsizex, dims.pixelsizey, dims.pixelsizez),\n      spatialUnit: dims.unit || \"\",\n\n      numChannels: dims.sizec,\n      channelNames: dims.channelnames,\n\n      times: dims.sizet,\n      timeScale: 1,\n      timeUnit: \"\",\n\n      numMultiscaleLevels: 1,\n      multiscaleLevel: 0,\n\n      transform: {\n        translation: new Vector3(0, 0, 0),\n        rotation: new Vector3(0, 0, 0),\n      },\n    };\n\n    // This loader uses no fields from `LoadSpec`. Initialize volume with defaults.\n    return { imageInfo: imgdata, loadSpec: new LoadSpec() };\n  }\n\n  async loadRawChannelData(\n    imageInfo: ImageInfo,\n    _loadSpec: LoadSpec,\n    onData: RawChannelDataCallback\n  ): Promise<Record<string, never>> {\n    const dims = await this.loadOmeDims();\n\n    // do each channel on a worker?\n    for (let channel = 0; channel < imageInfo.numChannels; ++channel) {\n      const params = {\n        channel: channel,\n        // these are target xy sizes for the in-memory volume data\n        // they may or may not be the same size as original xy sizes\n        tilesizex: imageInfo.volumeSize.x,\n        tilesizey: imageInfo.volumeSize.y,\n        sizec: imageInfo.numChannels,\n        sizez: imageInfo.volumeSize.z,\n        dimensionOrder: dims.dimensionorder,\n        bytesPerSample: getBytesPerSample(dims.pixeltype),\n        url: this.url,\n      };\n      const worker = new Worker(new URL(\"../workers/FetchTiffWorker\", import.meta.url));\n      worker.onmessage = (e) => {\n        const u8 = e.data.data;\n        const channel = e.data.channel;\n        onData(channel, u8);\n        worker.terminate();\n      };\n      worker.onerror = (e) => {\n        alert(\"Error: Line \" + e.lineno + \" in \" + e.filename + \": \" + e.message);\n      };\n      worker.postMessage(params);\n    }\n\n    return {};\n  }\n}\n\nexport { TiffLoader };\n","import { Box3, Vector2, Vector3 } from \"three\";\n\nimport { ImageInfo } from \"../Volume.js\";\nimport { LoadSpec } from \"./IVolumeLoader.js\";\n\nexport const MAX_ATLAS_EDGE = 4096;\n\n// Map from units to their symbols\nconst UNIT_SYMBOLS = {\n  angstrom: \"Å\",\n  day: \"d\",\n  foot: \"ft\",\n  hour: \"h\",\n  inch: \"in\",\n  meter: \"m\",\n  mile: \"mi\",\n  minute: \"min\",\n  parsec: \"pc\",\n  second: \"s\",\n  yard: \"yd\",\n};\n\n// Units which may take SI prefixes (e.g. micro-, tera-)\nconst SI_UNITS: (keyof typeof UNIT_SYMBOLS)[] = [\"meter\", \"second\"];\n\n// SI prefixes which abbreviate in nonstandard ways\nconst SI_PREFIX_ABBVS = {\n  micro: \"μ\",\n  deca: \"da\",\n};\n\n/** Converts a full spatial or temporal unit name supported by OME-Zarr to its unit symbol */\n// (see https://ngff.openmicroscopy.org/latest/#axes-md)\nexport function unitNameToSymbol(unitName?: string): string | null {\n  if (unitName === undefined) {\n    return null;\n  }\n\n  if (UNIT_SYMBOLS[unitName]) {\n    return UNIT_SYMBOLS[unitName];\n  }\n\n  const prefixedSIUnit = SI_UNITS.find((siUnit) => unitName.endsWith(siUnit));\n  if (prefixedSIUnit) {\n    const prefix = unitName.substring(0, unitName.length - prefixedSIUnit.length);\n\n    if (SI_PREFIX_ABBVS[prefix]) {\n      // \"special\" SI prefix\n      return SI_PREFIX_ABBVS[prefix] + UNIT_SYMBOLS[prefixedSIUnit];\n    }\n\n    // almost all SI prefixes are abbreviated by first letter, capitalized if prefix ends with \"a\"\n    const capitalize = prefix.endsWith(\"a\");\n    const prefixAbbr = capitalize ? prefix[0].toUpperCase() : prefix[0];\n    return prefixAbbr + UNIT_SYMBOLS[prefixedSIUnit];\n  }\n\n  return null;\n}\n\n// We want to find the most \"square\" packing of z tw by th tiles.\n// Compute number of rows and columns.\nexport function computePackedAtlasDims(z: number, tw: number, th: number): Vector2 {\n  let nextrows = 1;\n  let nextcols = z;\n  let ratio = (nextcols * tw) / (nextrows * th);\n  let nrows = nextrows;\n  let ncols = nextcols;\n  while (ratio > 1) {\n    nrows = nextrows;\n    ncols = nextcols;\n    nextcols -= 1;\n    nextrows = Math.ceil(z / nextcols);\n    ratio = (nextcols * tw) / (nextrows * th);\n  }\n  return new Vector2(nrows, ncols);\n}\n\n/** Picks the largest scale level that can fit into a texture atlas with edges no longer than `maxAtlasEdge`. */\nexport function estimateLevelForAtlas(spatialDimsZYX: [number, number, number][], maxAtlasEdge = MAX_ATLAS_EDGE) {\n  if (spatialDimsZYX.length <= 1) {\n    return 0;\n  }\n\n  // update levelToLoad after we get size info about multiscales\n  let levelToLoad = spatialDimsZYX.length - 1;\n  for (let i = 0; i < spatialDimsZYX.length; ++i) {\n    // estimate atlas size:\n    const x = spatialDimsZYX[i][2];\n    const y = spatialDimsZYX[i][1];\n    const z = spatialDimsZYX[i][0];\n    const xtiles = Math.floor(maxAtlasEdge / x);\n    const ytiles = Math.floor(maxAtlasEdge / y);\n\n    if (xtiles * ytiles >= z) {\n      levelToLoad = i;\n      break;\n    }\n  }\n  return levelToLoad;\n}\n\ntype ZYX = [number, number, number];\nconst maxCeil = (val: number): number => Math.max(Math.ceil(val), 1);\nconst scaleDims = (size: Vector3, [z, y, x]: ZYX): ZYX => [\n  maxCeil(z * size.z),\n  maxCeil(y * size.y),\n  maxCeil(x * size.x),\n];\n\nexport function scaleDimsToSubregion(subregion: Box3, dims: ZYX): ZYX {\n  const size = subregion.getSize(new Vector3());\n  return scaleDims(size, dims);\n}\n\nexport function scaleMultipleDimsToSubregion(subregion: Box3, dims: ZYX[]): ZYX[] {\n  const size = subregion.getSize(new Vector3());\n  return dims.map((dim) => scaleDims(size, dim));\n}\n\n/**\n * Picks the best scale level to load based on scale level dimensions and a `LoadSpec`. This calls\n * `estimateLevelForAtlas`, then accounts for `LoadSpec`'s scale level picking properties:\n * - `multiscaleLevel` imposes a minimum scale level (or *maximum* resolution level) to load\n * - `maxAtlasEdge` sets the maximum size of the texture atlas that may be produced by a load\n * - `scaleLevelBias` offsets the scale level index after the optimal level is picked based on `maxAtlasEdge`\n *\n *  This function assumes that `spatialDimsZYX` has already been appropriately scaled to match `loadSpec`'s `subregion`.\n */\nexport function pickLevelToLoadUnscaled(loadSpec: LoadSpec, spatialDimsZYX: ZYX[]): number {\n  const optimalLevel = estimateLevelForAtlas(spatialDimsZYX, loadSpec.maxAtlasEdge);\n  const levelToLoad = Math.max(optimalLevel + (loadSpec.scaleLevelBias ?? 0), loadSpec.multiscaleLevel ?? 0);\n  return Math.max(0, Math.min(spatialDimsZYX.length - 1, levelToLoad));\n}\n\n/**\n * Picks the best scale level to load based on scale level dimensions and a `LoadSpec`. This calls\n * `estimateLevelForAtlas` and accounts for all properties of `LoadSpec` considered by\n * `pickLevelToLoadUnscaled`, and additionally scales the dimensions of the scale levels to account for the\n * `LoadSpec`'s `subregion` property.\n */\nexport function pickLevelToLoad(loadSpec: LoadSpec, spatialDimsZYX: ZYX[]): number {\n  const scaledDims = scaleMultipleDimsToSubregion(loadSpec.subregion, spatialDimsZYX);\n  return pickLevelToLoadUnscaled(loadSpec, scaledDims);\n}\n\n/** Given the size of a volume in pixels, convert a `Box3` in the 0-1 range to pixels */\nexport function convertSubregionToPixels(region: Box3, size: Vector3): Box3 {\n  const min = region.min.clone().multiply(size).floor();\n  const max = region.max.clone().multiply(size).ceil();\n\n  // ensure it's always valid to specify the same number at both ends and get a single slice\n  if (min.x === max.x && min.x < size.x) {\n    max.x += 1;\n  }\n  if (min.y === max.y && min.y < size.y) {\n    max.y += 1;\n  }\n  if (min.z === max.z && min.z < size.z) {\n    max.z += 1;\n  }\n\n  return new Box3(min, max);\n}\n\n/**\n * Return the subset of `container` specified by `region`, assuming that `region` contains fractional values (between 0\n * and 1). i.e. if `container`'s range on the X axis is 0-4 and `region`'s is 0.25-0.5, the result will have range 1-2.\n */\nexport function composeSubregion(region: Box3, container: Box3): Box3 {\n  const size = container.getSize(new Vector3());\n  const min = region.min.clone().multiply(size).add(container.min);\n  const max = region.max.clone().multiply(size).add(container.min);\n  return new Box3(min, max);\n}\n\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// currently everything needed can come from the imageInfo\n// but in the future each IVolumeLoader could have a completely separate implementation.\nexport function buildDefaultMetadata(imageInfo: ImageInfo): Record<string, unknown> {\n  const physicalSize = imageInfo.volumeSize.clone().multiply(imageInfo.physicalPixelSize);\n  const metadata = {};\n  metadata[\"Dimensions\"] = { ...imageInfo.subregionSize };\n  metadata[\"Original dimensions\"] = { ...imageInfo.originalSize };\n  metadata[\"Physical size\"] = {\n    x: physicalSize.x + imageInfo.spatialUnit,\n    y: physicalSize.y + imageInfo.spatialUnit,\n    z: physicalSize.z + imageInfo.spatialUnit,\n  };\n  metadata[\"Physical size per pixel\"] = {\n    x: imageInfo.physicalPixelSize.x + imageInfo.spatialUnit,\n    y: imageInfo.physicalPixelSize.y + imageInfo.spatialUnit,\n    z: imageInfo.physicalPixelSize.z + imageInfo.spatialUnit,\n  };\n  metadata[\"Channels\"] = imageInfo.numChannels;\n  metadata[\"Time series frames\"] = imageInfo.times || 1;\n  // don't add User data if it's empty\n  if (imageInfo.userData && !isEmpty(imageInfo.userData)) {\n    metadata[\"User data\"] = imageInfo.userData;\n  }\n  return metadata;\n}\n","import { ThreadableVolumeLoader } from \"./IVolumeLoader.js\";\nimport { OMEZarrLoader, type ZarrLoaderFetchOptions } from \"./OmeZarrLoader.js\";\nimport { JsonImageInfoLoader } from \"./JsonImageInfoLoader.js\";\nimport { TiffLoader } from \"./TiffLoader.js\";\nimport VolumeCache from \"../VolumeCache.js\";\nimport SubscribableRequestQueue from \"../utils/SubscribableRequestQueue.js\";\n\nexport { PrefetchDirection } from \"./zarr_utils/types.js\";\n\nexport const enum VolumeFileFormat {\n  ZARR = \"zarr\",\n  JSON = \"json\",\n  TIFF = \"tiff\",\n}\n\nexport type CreateLoaderOptions = {\n  fileType?: VolumeFileFormat;\n  cache?: VolumeCache;\n  queue?: SubscribableRequestQueue;\n  scene?: number;\n  fetchOptions?: ZarrLoaderFetchOptions;\n};\n\nexport function pathToFileType(path: string): VolumeFileFormat {\n  if (path.endsWith(\".json\")) {\n    return VolumeFileFormat.JSON;\n  } else if (path.endsWith(\".tif\") || path.endsWith(\".tiff\")) {\n    return VolumeFileFormat.TIFF;\n  }\n  return VolumeFileFormat.ZARR;\n}\n\nexport async function createVolumeLoader(\n  path: string | string[],\n  options?: CreateLoaderOptions\n): Promise<ThreadableVolumeLoader> {\n  const pathString = Array.isArray(path) ? path[0] : path;\n  const fileType = options?.fileType || pathToFileType(pathString);\n\n  switch (fileType) {\n    case VolumeFileFormat.ZARR:\n      return await OMEZarrLoader.createLoader(\n        path,\n        options?.scene,\n        options?.cache,\n        options?.queue,\n        options?.fetchOptions\n      );\n    case VolumeFileFormat.JSON:\n      return new JsonImageInfoLoader(path, options?.cache);\n    case VolumeFileFormat.TIFF:\n      return new TiffLoader(pathString);\n  }\n}\n","import { PrefetchDirection, TCZYX } from \"./types\";\n\ntype TZYX = [number, number, number, number];\n\ntype PrefetchDirectionState = {\n  direction: PrefetchDirection;\n  chunks: TCZYX<number>[];\n  start: number;\n  end: number;\n};\n\nconst directionToIndex = (dir: PrefetchDirection): number => {\n  const absDir = dir >> 1; // shave off sign bit to get index in TZYX\n  return absDir + Number(absDir !== 0); // convert TZYX -> TCZYX by skipping c (index 1)\n};\n\nfunction updateMinMax(val: number, minmax: [number, number]): void {\n  if (val < minmax[0]) {\n    minmax[0] = val;\n  }\n\n  if (val > minmax[1]) {\n    minmax[1] = val;\n  }\n}\n\n/**\n * Since the user is most likely to want nearby data (in space or time) first, we should prefetch those chunks first.\n *\n * Given a list of just-loaded chunks and some bounds, `ChunkPrefetchIterator` iterates evenly outwards in T/Z/Y/X.\n */\n// NOTE: Assumes `chunks` form a rectangular prism! Will create gaps otherwise! (in practice they always should)\nexport default class ChunkPrefetchIterator {\n  directionStates: PrefetchDirectionState[];\n  priorityDirectionStates: PrefetchDirectionState[];\n\n  constructor(\n    chunks: TCZYX<number>[],\n    tzyxMaxPrefetchOffset: TZYX,\n    tzyxNumChunks: TZYX,\n    priorityDirections?: PrefetchDirection[]\n  ) {\n    // Get min and max chunk coordinates for T/Z/Y/X\n    const extrema: [number, number][] = [\n      [Infinity, -Infinity],\n      [Infinity, -Infinity],\n      [Infinity, -Infinity],\n      [Infinity, -Infinity],\n    ];\n\n    for (const chunk of chunks) {\n      updateMinMax(chunk[0], extrema[0]);\n      updateMinMax(chunk[2], extrema[1]);\n      updateMinMax(chunk[3], extrema[2]);\n      updateMinMax(chunk[4], extrema[3]);\n    }\n\n    // Create `PrefetchDirectionState`s for each direction\n    this.directionStates = [];\n    this.priorityDirectionStates = [];\n\n    for (const [direction, start] of extrema.flat().entries()) {\n      const dimension = direction >> 1;\n      let end: number;\n      if (direction & 1) {\n        // Positive direction - end is either the max coordinate in the fetched set plus the max offset in this\n        // dimension, or the max chunk coordinate in this dimension, whichever comes first\n        end = Math.min(start + tzyxMaxPrefetchOffset[dimension], tzyxNumChunks[dimension] - 1);\n      } else {\n        // Negative direction - end is either the min coordinate in the fetched set minus the max offset in this\n        // dimension, or 0, whichever comes first\n        end = Math.max(start - tzyxMaxPrefetchOffset[dimension], 0);\n      }\n      const directionState = { direction, start, end, chunks: [] };\n\n      if (priorityDirections && priorityDirections.includes(direction)) {\n        this.priorityDirectionStates.push(directionState);\n      } else {\n        this.directionStates.push(directionState);\n      }\n    }\n\n    // Fill each `PrefetchDirectionState` with chunks at the border of the fetched set\n    for (const chunk of chunks) {\n      for (const dir of this.directionStates) {\n        if (chunk[directionToIndex(dir.direction)] === dir.start) {\n          dir.chunks.push(chunk);\n        }\n      }\n      for (const dir of this.priorityDirectionStates) {\n        if (chunk[directionToIndex(dir.direction)] === dir.start) {\n          dir.chunks.push(chunk);\n        }\n      }\n    }\n  }\n\n  private static *iterateDirections(directions: PrefetchDirectionState[]): Generator<TCZYX<number>> {\n    let offset = 1;\n\n    while (directions.length > 0) {\n      // Remove directions in which we have hit a boundary\n      directions = directions.filter((dir) => {\n        if (dir.direction & 1) {\n          return dir.start + offset <= dir.end;\n        } else {\n          return dir.start - offset >= dir.end;\n        }\n      });\n\n      // Yield chunks one chunk farther out in every remaining direction\n      for (const dir of directions) {\n        for (const chunk of dir.chunks) {\n          const newChunk = chunk.slice() as TCZYX<number>;\n          newChunk[directionToIndex(dir.direction)] += offset * (dir.direction & 1 ? 1 : -1);\n          yield newChunk;\n        }\n      }\n\n      offset += 1;\n    }\n  }\n\n  *[Symbol.iterator](): Iterator<TCZYX<number>> {\n    // Yield all chunks in priority direction(s) first, if any\n    if (this.priorityDirectionStates.length > 0) {\n      for (const chunk of ChunkPrefetchIterator.iterateDirections(this.priorityDirectionStates)) {\n        yield chunk;\n      }\n    }\n\n    // Then yield all chunks in other directions\n    for (const chunk of ChunkPrefetchIterator.iterateDirections(this.directionStates)) {\n      yield chunk;\n    }\n  }\n}\n","import { FetchStore } from \"zarrita\";\nimport { AbsolutePath, AsyncMutable, Readable } from \"@zarrita/storage\";\n\nimport SubscribableRequestQueue from \"../../utils/SubscribableRequestQueue\";\nimport VolumeCache from \"../../VolumeCache\";\n\nimport { SubscriberId } from \"./types\";\n\ntype WrappedStoreOpts<Opts> = {\n  options?: Opts;\n  subscriber: SubscriberId;\n  reportKey?: (key: string, subscriber: SubscriberId) => void;\n  isPrefetch?: boolean;\n};\n\n/**\n * `Readable` is zarrita's minimal abstraction for any source of data.\n * `WrappedStore` wraps another `Readable` and adds (optional) connections to `VolumeCache` and `RequestQueue`.\n */\nclass WrappedStore<Opts, S extends Readable<Opts> = Readable<Opts>> implements AsyncMutable<WrappedStoreOpts<Opts>> {\n  constructor(private baseStore: S, private cache?: VolumeCache, private queue?: SubscribableRequestQueue) {}\n  // Dummy implementation to make this class easier to use in tests\n  set(_key: AbsolutePath, _value: Uint8Array): Promise<void> {\n    return Promise.resolve();\n  }\n\n  private async getAndCache(key: AbsolutePath, cacheKey: string, opts?: Opts): Promise<Uint8Array | undefined> {\n    const result = await this.baseStore.get(key, opts);\n    if (this.cache && result) {\n      this.cache.insert(cacheKey, result);\n    }\n    return result;\n  }\n\n  async get(key: AbsolutePath, opts?: WrappedStoreOpts<Opts> | undefined): Promise<Uint8Array | undefined> {\n    const ZARR_EXTS = [\".zarray\", \".zgroup\", \".zattrs\", \"zarr.json\"];\n    if (!this.cache || ZARR_EXTS.some((s) => key.endsWith(s))) {\n      return this.baseStore.get(key, opts?.options);\n    }\n    if (opts?.reportKey) {\n      opts.reportKey(key, opts.subscriber);\n    }\n\n    let keyPrefix = (this.baseStore as FetchStore).url ?? \"\";\n    if (keyPrefix !== \"\" && !(keyPrefix instanceof URL) && !keyPrefix.endsWith(\"/\")) {\n      keyPrefix += \"/\";\n    }\n\n    const fullKey = keyPrefix + key.slice(1);\n\n    // Check the cache\n    const cacheResult = this.cache.get(fullKey);\n    if (cacheResult) {\n      return new Uint8Array(cacheResult);\n    }\n\n    // Not in cache; load the chunk and cache it\n    if (this.queue && opts) {\n      return this.queue.addRequest(\n        fullKey,\n        opts.subscriber,\n        () => this.getAndCache(key, fullKey, opts?.options),\n        opts.isPrefetch\n      );\n    } else {\n      // Should we ever hit this code?  We should always have a request queue.\n      return this.getAndCache(key, fullKey, opts?.options);\n    }\n  }\n}\n\nexport default WrappedStore;\n","import * as zarr from \"@zarrita/core\";\n\nimport type WrappedStore from \"./WrappedStore.js\";\nimport type SubscribableRequestQueue from \"../../utils/SubscribableRequestQueue.js\";\n\nexport type TCZYX<T> = [T, T, T, T, T];\nexport type SubscriberId = ReturnType<SubscribableRequestQueue[\"addSubscriber\"]>;\n\n/**\n * Directions in which to move outward from the loaded set of chunks while prefetching.\n *\n * Ordered in pairs of opposite directions both because that's a sensible order in which to prefetch for our purposes,\n * and because it lets us treat the least significant bit as the sign. So `direction >> 1` gives the index of the\n * direction in TZYX-ordered arrays, and `direction & 1` gives the sign of the direction (e.g. positive vs negative Z).\n */\nexport const enum PrefetchDirection {\n  T_MINUS = 0,\n  T_PLUS = 1,\n\n  Z_MINUS = 2,\n  Z_PLUS = 3,\n\n  Y_MINUS = 4,\n  Y_PLUS = 5,\n\n  X_MINUS = 6,\n  X_PLUS = 7,\n}\n\nexport type OMECoordinateTransformation =\n  | {\n      type: \"identity\";\n    }\n  | {\n      type: \"translation\";\n      translation: number[];\n    }\n  | {\n      type: \"scale\";\n      scale: number[];\n    }\n  | {\n      type: \"translation\" | \"scale\";\n      path: string;\n    };\n\nexport type OMEAxis = {\n  name: string;\n  type?: string;\n  unit?: string;\n};\n\nexport type OMEDataset = {\n  path: string;\n  coordinateTransformations?: OMECoordinateTransformation[];\n};\n\n// https://ngff.openmicroscopy.org/latest/#multiscale-md\nexport type OMEMultiscale = {\n  version?: string;\n  name?: string;\n  axes: OMEAxis[];\n  datasets: OMEDataset[];\n  coordinateTransformations?: OMECoordinateTransformation[];\n  type?: string;\n  metadata?: Record<string, unknown>;\n};\n\n// https://ngff.openmicroscopy.org/latest/#omero-md\nexport type OmeroTransitionalMetadata = {\n  id: number;\n  name: string;\n  version: string;\n  channels: {\n    active: boolean;\n    coefficient: number;\n    color: string;\n    family: string;\n    inverted: boolean;\n    label: string;\n    window: {\n      end: number;\n      max: number;\n      min: number;\n      start: number;\n    };\n  }[];\n};\n\nexport type OMEZarrMetadata = {\n  multiscales: OMEMultiscale[];\n  omero: OmeroTransitionalMetadata;\n};\n\nexport type NumericZarrArray = zarr.Array<zarr.NumberDataType, WrappedStore<RequestInit>>;\n\n/** A record with everything we need to access and use a single remote source of multiscale OME-Zarr data. */\nexport type ZarrSource = {\n  /** Representations of each scale level in this zarr. We pick one and pass it to zarrita to load data. */\n  scaleLevels: NumericZarrArray[];\n  /**\n   * Zarr dimensions may be ordered in many ways or missing altogether (e.g. TCXYZ, TYX). `axesTCZYX` represents\n   * dimension order as a mapping from dimensions to their indices in dimension-ordered arrays for this source.\n   */\n  axesTCZYX: TCZYX<number>;\n  /** OME-specified metadata record with most useful info on the current image, e.g. sizes, axis order, etc. */\n  multiscaleMetadata: OMEMultiscale;\n  /** OME-specified \"transitional\" metadata record which we mostly ignore, but which gives channel & volume names. */\n  omeroMetadata: OmeroTransitionalMetadata;\n  /** Which channels in the volume come out of this source - i.e. source channel 0 is volume channel `channelOffset` */\n  channelOffset: number;\n};\n","import {\n  NumericZarrArray,\n  OMEAxis,\n  OMECoordinateTransformation,\n  OMEDataset,\n  OMEMultiscale,\n  TCZYX,\n  ZarrSource,\n} from \"./types.js\";\n\n/** Turns `axesTCZYX` into the number of dimensions in the array */\nexport const getDimensionCount = ([t, c, z]: TCZYX<number>) => 2 + Number(t > -1) + Number(c > -1) + Number(z > -1);\n\nexport function remapAxesToTCZYX(axes: OMEAxis[]): TCZYX<number> {\n  const axesTCZYX: TCZYX<number> = [-1, -1, -1, -1, -1];\n  const axisNames = [\"t\", \"c\", \"z\", \"y\", \"x\"];\n\n  axes.forEach((axis, idx) => {\n    const axisIdx = axisNames.indexOf(axis.name);\n    if (axisIdx > -1) {\n      axesTCZYX[axisIdx] = idx;\n    } else {\n      console.error(\"ERROR: UNRECOGNIZED AXIS in zarr: \" + axis.name);\n    }\n  });\n\n  // it is possible that Z might not exist but we require X and Y at least.\n  if (axesTCZYX[3] === -1 || axesTCZYX[4] === -1) {\n    console.error(\"ERROR: zarr loader expects a y and an x axis.\");\n  }\n\n  return axesTCZYX;\n}\n\n/** Reorder an array of values [T, C, Z, Y, X] to the given dimension order */\nexport function orderByDimension<T>(valsTCZYX: TCZYX<T>, orderTCZYX: TCZYX<number>): T[] {\n  const specLen = getDimensionCount(orderTCZYX);\n  const result: T[] = Array(specLen);\n\n  orderTCZYX.forEach((val, idx) => {\n    if (val >= 0) {\n      if (val >= specLen) {\n        throw new Error(\"Unexpected axis index\");\n      }\n      result[val] = valsTCZYX[idx];\n    }\n  });\n\n  return result;\n}\n\n/** Reorder an array of values in the given dimension order to [T, C, Z, Y, X] */\nexport function orderByTCZYX<T>(valsDimension: T[], orderTCZYX: TCZYX<number>, defaultValue: T): TCZYX<T> {\n  const result: TCZYX<T> = [defaultValue, defaultValue, defaultValue, defaultValue, defaultValue];\n\n  orderTCZYX.forEach((val, idx) => {\n    if (val >= 0) {\n      if (val >= valsDimension.length) {\n        throw new Error(\"Unexpected axis index\");\n      }\n      result[idx] = valsDimension[val];\n    }\n  });\n\n  return result;\n}\n\n/** Select the scale transform from an OME metadata object with coordinate transforms, and return it in TCZYX order */\nexport function getScale(dataset: OMEDataset | OMEMultiscale, orderTCZYX: TCZYX<number>): TCZYX<number> {\n  const transforms = dataset.coordinateTransformations;\n\n  if (transforms === undefined) {\n    console.error(\"ERROR: no coordinate transformations for scale level\");\n    return [1, 1, 1, 1, 1];\n  }\n\n  // this assumes we'll never encounter the \"path\" variant\n  const isScaleTransform = (t: OMECoordinateTransformation): t is { type: \"scale\"; scale: number[] } =>\n    t.type === \"scale\";\n\n  // there can be any number of coordinateTransformations\n  // but there must be only one of type \"scale\".\n  const scaleTransform = transforms.find(isScaleTransform);\n  if (!scaleTransform) {\n    console.error(`ERROR: no coordinate transformation of type \"scale\" for scale level`);\n    return [1, 1, 1, 1, 1];\n  }\n\n  const scale = scaleTransform.scale.slice();\n  return orderByTCZYX(scale, orderTCZYX, 1);\n}\n\n/**\n * Defines a partial order of zarr arrays based on their size. Specifically:\n * - If array size x, y, z are all equal, the arrays are equal\n * - otherwise, if all xyz of `a` are less than or equal to those of `b`, `a` is less than `b` (and vice versa)\n * - if some xyz is less and some is greater, the arrays are uncomparable\n */\nfunction compareZarrArraySize(\n  aArr: NumericZarrArray,\n  aTCZYX: TCZYX<number>,\n  bArr: NumericZarrArray,\n  bTCZYX: TCZYX<number>\n): number | undefined {\n  const aZ = aTCZYX[2] > -1 ? aArr.shape[aTCZYX[2]] : 1;\n  const bZ = bTCZYX[2] > -1 ? bArr.shape[bTCZYX[2]] : 1;\n  const diffZ = aZ - bZ;\n  const diffY = aArr.shape[aTCZYX[3]] - bArr.shape[bTCZYX[3]];\n  const diffX = aArr.shape[aTCZYX[4]] - bArr.shape[bTCZYX[4]];\n\n  if (diffZ === 0 && diffY === 0 && diffX === 0) {\n    return 0;\n  } else if (diffZ <= 0 && diffY <= 0 && diffX <= 0) {\n    return -1;\n  } else if (diffZ >= 0 && diffY >= 0 && diffX >= 0) {\n    return 1;\n  } else {\n    return undefined;\n  }\n}\n\nconst EPSILON = 0.0000001;\nconst aboutEquals = (a: number, b: number): boolean => Math.abs(a - b) < EPSILON;\n\nfunction scaleTransformsAreEqual(aSrc: ZarrSource, aLevel: number, bSrc: ZarrSource, bLevel: number): boolean {\n  const aScale = getScale(aSrc.multiscaleMetadata.datasets[aLevel], aSrc.axesTCZYX);\n  const bScale = getScale(bSrc.multiscaleMetadata.datasets[bLevel], bSrc.axesTCZYX);\n  return aboutEquals(aScale[2], bScale[2]) && aboutEquals(aScale[3], bScale[3]) && aboutEquals(aScale[4], bScale[4]);\n}\n\n/**\n * Ensures that all scale levels in `sources` are matched up by size. More precisely: enforces that, for any scale\n * level `i`, the size of zarr array `s[i]` is equal for every source `s`. We accomplish this by removing any arrays\n * (and their associated OME dataset metadata) which don't match up in all sources.\n *\n * Note that this function modifies the input `sources` array rather than returning a new value.\n *\n * Assumes all sources have scale levels ordered by size from largest to smallest. (This should always be true for\n * compliant OME-Zarr data.)\n */\nexport function matchSourceScaleLevels(sources: ZarrSource[]): void {\n  if (sources.length < 2) {\n    return;\n  }\n\n  // Save matching scale levels and metadata here\n  const matchedLevels: NumericZarrArray[][] = Array.from({ length: sources.length }, () => []);\n  const matchedMetas: OMEDataset[][] = Array.from({ length: sources.length }, () => []);\n\n  // Start as many index counters as we have sources\n  const scaleIndexes: number[] = new Array(sources.length).fill(0);\n  while (scaleIndexes.every((val, idx) => val < sources[idx].scaleLevels.length)) {\n    // First pass: find the smallest source / determine if all sources are equal\n    let allEqual = true;\n    let smallestIdx = 0;\n    let smallestSrc = sources[0];\n    let smallestArr = smallestSrc.scaleLevels[scaleIndexes[0]];\n    for (let currentIdx = 1; currentIdx < sources.length; currentIdx++) {\n      const currentSrc = sources[currentIdx];\n      const currentArr = currentSrc.scaleLevels[scaleIndexes[currentIdx]];\n\n      const ordering = compareZarrArraySize(smallestArr, smallestSrc.axesTCZYX, currentArr, currentSrc.axesTCZYX);\n      if (!ordering) {\n        // Arrays are equal, or they are uncomparable\n        if (ordering === undefined) {\n          throw new Error(\"Incompatible zarr arrays: pixel dimensions are mismatched\");\n        }\n        // Now we know the arrays are equal, but they may still be invalid to match up because...\n        // ...they have different scale transformations\n        if (!scaleTransformsAreEqual(smallestSrc, scaleIndexes[smallestIdx], currentSrc, scaleIndexes[currentIdx])) {\n          throw new Error(\"Incompatible zarr arrays: scale levels of equal size have different scale transformations\");\n        }\n        // ...they have different numbers of timesteps\n        const largestT = smallestSrc.axesTCZYX[0] > -1 ? smallestArr.shape[smallestSrc.axesTCZYX[0]] : 1;\n        const currentT = currentSrc.axesTCZYX[0] > -1 ? currentArr.shape[currentSrc.axesTCZYX[0]] : 1;\n        if (largestT !== currentT) {\n          throw new Error(\"Incompatible zarr arrays: different numbers of timesteps\");\n        }\n        // ...they have different chunk sizes (TODO update prefetching so this restriction can be removed)\n        if (!smallestArr.chunks.every((val, idx) => val === currentArr.chunks[idx])) {\n          throw new Error(\"Incompatible zarr arrays: chunk shapes are mismatched\");\n        }\n      } else {\n        allEqual = false;\n        if (ordering > 0) {\n          smallestIdx = currentIdx;\n          smallestSrc = currentSrc;\n          smallestArr = currentArr;\n        }\n      }\n    }\n\n    if (allEqual) {\n      // We've found a matching set of scale levels! Save it and increment all indexes\n      for (let i = 0; i < scaleIndexes.length; i++) {\n        const currentSrc = sources[i];\n        const matchedScaleLevel = scaleIndexes[i];\n        matchedLevels[i].push(currentSrc.scaleLevels[matchedScaleLevel]);\n        matchedMetas[i].push(currentSrc.multiscaleMetadata.datasets[matchedScaleLevel]);\n        scaleIndexes[i] += 1;\n      }\n    } else {\n      // Increment the indexes of the sources which are larger than the smallest\n      for (const [idx, srcIdx] of scaleIndexes.entries()) {\n        const currentSrc = sources[idx];\n        const currentArr = currentSrc.scaleLevels[srcIdx];\n        const ordering = compareZarrArraySize(smallestArr, smallestSrc.axesTCZYX, currentArr, currentSrc.axesTCZYX);\n        if (ordering !== 0) {\n          scaleIndexes[idx] += 1;\n        }\n      }\n    }\n  }\n\n  if (sources[0].scaleLevels.length === 0) {\n    throw new Error(\"Incompatible zarr arrays: no sets of scale levels found that matched in all sources\");\n  }\n\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].scaleLevels = matchedLevels[i];\n    sources[i].multiscaleMetadata.datasets = matchedMetas[i];\n  }\n}\n","/** Object format used when passing multiple requests to RequestQueue at once. */\nexport type Request<V> = {\n  key: string;\n  requestAction: () => Promise<V>;\n};\n\nexport const DEFAULT_REQUEST_CANCEL_REASON = \"request cancelled\";\n\n/**\n * Internal object interface used by RequestQueue to store request metadata and callbacks.\n */\ninterface RequestItem<V> {\n  /** Key used to index this queue item. */\n  key: string;\n  /** Action to be run. */\n  action: () => Promise<V>;\n  /** Reference to the promise object that will be resolved when the action is complete. */\n  promise: Promise<V>;\n  /** Callback used to resolve the promise. */\n  resolve: (value?: V | PromiseLike<V> | undefined) => void;\n  /** Callback used to reject the promise. */\n  reject: (reason?: unknown) => void;\n  /** Optional, used to track timeouts if the item will be added to the queue later. */\n  timeoutId?: ReturnType<typeof setTimeout>;\n}\n\n/**\n * Manages a queue of asynchronous requests with unique string keys, which can be added to or cancelled.\n * If redundant requests with the same key are issued, the request action will only be run once per key\n * while the original request is still in the queue.\n */\nexport default class RequestQueue {\n  /**\n   * The maximum number of requests that can be handled concurrently.\n   * Once reached, additional requests will be queued up to run once a running request completes.\n   */\n  private maxActiveRequests: number;\n\n  /**\n   * The maximum number of requests that can be handled concurrently if only low-priority requests are waiting. Set\n   * lower than `concurrencyLimit` to always leave space for high-priority requests. Cannot be set higher than\n   * `concurrencyLimit`.\n   */\n  private maxLowPriorityRequests: number;\n\n  /** A queue of requests that are ready to be executed, in order of request time. */\n  private queue: string[];\n\n  /** A queue of low-priority tasks that are ready to be executed. `queue` must be empty before any of these tasks run. */\n  private queueLowPriority: string[];\n\n  /** Stores all requests, even those that are currently active. */\n  private allRequests: Map<string, RequestItem<unknown>>;\n\n  /** Stores requests whose actions are currently being run. */\n  private activeRequests: Set<string>;\n\n  /**\n   * Creates a new RequestQueue.\n   * @param maxActiveRequests The maximum number of requests that will be handled concurrently. This is 10 by default.\n   * @param maxLowPriorityRequests The maximum number of low-priority requests that will be handled concurrently. Equal\n   *    to `maxActiveRequests` by default, but may be set lower to always leave space for new high-priority requests.\n   */\n  constructor(maxActiveRequests = 10, maxLowPriorityRequests = 5) {\n    this.allRequests = new Map();\n    this.activeRequests = new Set();\n    this.queue = [];\n    this.queueLowPriority = [];\n    this.maxActiveRequests = maxActiveRequests;\n    this.maxLowPriorityRequests = Math.min(maxActiveRequests, maxLowPriorityRequests);\n  }\n\n  /**\n   * Stores request metadata to the internal map of all pending requests.\n   * @param key string identifier of the request.\n   * @param requestAction callable function action of the request.\n   * @returns a reference to the new, registered RequestItem.\n   */\n  private registerRequest<T>(key: string, requestAction: () => Promise<T>): RequestItem<T> {\n    // Create a new promise and store the resolve and reject callbacks for later.\n    // This lets us perform the actual action at a later point, when the request is at the\n    // front of the processing queue.\n    let promiseResolve, promiseReject;\n    const promise = new Promise<T>((resolve, reject) => {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n    // Store the request data.\n    const requestItem = {\n      key: key,\n      action: requestAction,\n      resolve: promiseResolve,\n      reject: promiseReject,\n      promise,\n    };\n    this.allRequests.set(key, requestItem);\n    return requestItem;\n  }\n\n  /**\n   * Moves a registered request into the processing queue, clearing any timeouts on the request.\n   * @param key string identifier of the request.\n   * @param lowPriority Whether this request should be added with low priority. False by default.\n   */\n  private addRequestToQueue(key: string, lowPriority?: boolean): void {\n    // Check that this request is not cancelled.\n    if (this.allRequests.has(key)) {\n      // Clear the request timeout, if it has one, since it is being added to the queue.\n      const requestItem = this.allRequests.get(key);\n      if (requestItem && requestItem.timeoutId) {\n        clearTimeout(requestItem.timeoutId);\n        requestItem.timeoutId = undefined;\n      }\n      if (!this.queue.includes(key) && !this.queueLowPriority.includes(key)) {\n        // Add to queue and check if the request can be processed right away.\n        if (lowPriority) {\n          this.queueLowPriority.push(key);\n        } else {\n          this.queue.push(key);\n        }\n        this.dequeue();\n      }\n    }\n  }\n\n  /**\n   * Adds a request with a unique key to the queue, if it doesn't already exist.\n   * @param key The key used to track the request.\n   * @param requestAction Function that will be called to complete the request. The function\n   *  will be run only once per unique key while the request exists, and may be deferred by the\n   *  queue at any time.\n   * @param lowPriority Whether this request should be added with low priority. False by default.\n   * @param delayMs Minimum delay, in milliseconds, before this request should be executed.\n   *\n   * NOTE: Cancelling a request while the action is running WILL NOT stop the action. If this behavior is desired,\n   * actions must be responsible for checking the RequestQueue, determining if the request is still valid (e.g.\n   * using `.hasRequest()`), and stopping or returning early.\n   *\n   * @returns A promise that will resolve on completion of the request, or reject if the request is cancelled.\n   *  If multiple requests are issued with the same key, a promise for the first request will be returned\n   *  until the request is resolved or cancelled.\n   *  Note that the return type of the promise will match that of the first request's instance.\n   */\n  public addRequest<T>(key: string, requestAction: () => Promise<T>, lowPriority = false, delayMs = 0): Promise<T> {\n    if (!this.allRequests.has(key)) {\n      // New request!\n      const requestItem = this.registerRequest(key, requestAction);\n      // If a delay is set, wait to add this to the queue.\n      if (delayMs > 0) {\n        const timeoutId = setTimeout(() => this.addRequestToQueue(key, lowPriority), delayMs);\n        // Save timeout information to request metadata\n        requestItem.timeoutId = timeoutId;\n      } else {\n        // No delay, add immediately\n        this.addRequestToQueue(key, lowPriority);\n      }\n    } else {\n      const lowPriorityIndex = this.queueLowPriority.indexOf(key);\n      if (lowPriorityIndex > -1 && !lowPriority) {\n        // This request is registered and queued, but is now being requested with high priority.\n        // Promote it to high priority.\n        this.queueLowPriority.splice(lowPriorityIndex, 1);\n        this.addRequestToQueue(key);\n      } else if (delayMs <= 0) {\n        // This request is registered, but is now being requested without a delay.\n        // Move into queue immediately if it's not already added, and clear any timeouts it may have.\n        this.addRequestToQueue(key, lowPriority);\n      }\n    }\n\n    const promise = this.allRequests.get(key)?.promise;\n    if (!promise) {\n      throw new Error(\"Found no promise to return when getting stored request data.\");\n    }\n    return promise as Promise<T>;\n  }\n\n  /**\n   * Adds multiple requests to the queue, with an optional delay between each.\n   * @param requests An array of RequestItems, which include a key and a request action.\n   * @param lowPriority Whether these requests should be added with low priority. False by default.\n   * @param delayMs An optional minimum delay in milliseconds to be added between each request.\n   *  For example, a delay of 10 ms will cause the second request to be added to the processing queue\n   *  after 10 ms, the third to added after 20 ms, and so on. Set to 10 ms by default.\n   * @returns An array of promises corresponding to the provided requests. (i.e., the `i`th value\n   * of the returned array will be a Promise for the resolution of `requests[i]`). If a request\n   *  with a matching key is already pending, returns the promise for the initial request.\n   */\n  public addRequests<T>(requests: Request<T>[], lowPriority = false, delayMs = 10): Promise<unknown>[] {\n    const promises: Promise<unknown>[] = [];\n    for (let i = 0; i < requests.length; i++) {\n      const item = requests[i];\n      const promise = this.addRequest(item.key, item.requestAction, lowPriority, delayMs * i);\n      promises.push(promise);\n    }\n    return promises;\n  }\n\n  /**\n   * Attempts to remove and run the next queued request item, if resources are available.\n   * @returns true if a request was started, or false if there are too many\n   * requests already active.\n   */\n  private async dequeue(): Promise<void> {\n    const numRequests = this.activeRequests.size;\n    if (\n      numRequests >= this.maxActiveRequests ||\n      (this.queue.length === 0 && (numRequests >= this.maxLowPriorityRequests || this.queueLowPriority.length === 0))\n    ) {\n      return;\n    }\n\n    const requestKey = this.queue.shift() ?? this.queueLowPriority.shift();\n    if (!requestKey) {\n      return;\n    }\n    if (this.activeRequests.has(requestKey)) {\n      // This request is already active, try the next one instead. (this shouldn't happen)\n      this.dequeue();\n      return;\n    }\n\n    const requestItem = this.allRequests.get(requestKey);\n    if (!requestItem) {\n      return;\n    }\n\n    const key = requestItem.key;\n    // Mark that this request is active\n    this.activeRequests.add(key);\n\n    await requestItem.action().then(requestItem.resolve, requestItem.reject);\n    this.activeRequests.delete(key);\n    this.allRequests.delete(key);\n    this.dequeue();\n  }\n\n  /**\n   * Removes any request matching the provided key from the queue and rejects its promise.\n   * @param key The key that should be matched against.\n   * @param cancelReason A message or object that will be used as the promise rejection.\n   */\n  public cancelRequest(key: string, cancelReason: unknown = DEFAULT_REQUEST_CANCEL_REASON): void {\n    if (!this.allRequests.has(key)) {\n      return;\n    }\n    const requestItem = this.allRequests.get(key);\n    if (requestItem) {\n      if (requestItem.timeoutId) {\n        // Cancel requests that have not been queued yet.\n        clearTimeout(requestItem.timeoutId);\n      }\n      // Reject the request, then clear from the queue and known requests.\n      requestItem.reject(cancelReason);\n    }\n    const queueIndex = this.queue.indexOf(key);\n    if (queueIndex > -1) {\n      this.queue.splice(queueIndex, 1);\n    } else {\n      const lowPriorityIndex = this.queueLowPriority.indexOf(key);\n      if (lowPriorityIndex > -1) {\n        this.queueLowPriority.splice(lowPriorityIndex, 1);\n      }\n    }\n    this.allRequests.delete(key);\n    this.activeRequests.delete(key);\n  }\n\n  /**\n   * Rejects all request promises and clears the queue.\n   * @param cancelReason A message or object that will be used as the promise rejection.\n   */\n  public cancelAllRequests(cancelReason: unknown = DEFAULT_REQUEST_CANCEL_REASON): void {\n    // Clear the queue so we don't do extra work while filtering it\n    this.queue = [];\n    this.queueLowPriority = [];\n    for (const key of this.allRequests.keys()) {\n      this.cancelRequest(key, cancelReason);\n    }\n  }\n\n  /**\n   * Returns whether a request with the given key exists in the RequestQueue and is not cancelled.\n   * @param key the key to search for.\n   * @returns true if the request is in the RequestQueue.\n   */\n  public hasRequest(key: string): boolean {\n    return this.allRequests.has(key);\n  }\n\n  /**\n   * Returns whether the request with the given key is currently running (not waiting in the queue).\n   * @param key the key to search for.\n   * @returns true if the request is actively running.\n   */\n  public requestRunning(key: string): boolean {\n    return this.activeRequests.has(key);\n  }\n}\n","import RequestQueue from \"./RequestQueue.js\";\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype Resolver = (value?: any) => void;\ntype Rejecter = (reason?: unknown) => void;\n\ntype RequestSubscription = {\n  subscriberId: number;\n  resolve: Resolver;\n  reject: Rejecter;\n};\n\n/**\n * An extension of `RequestQueue` that adds a concept of \"subscribers,\" which may share references to a single request\n * or cancel their subscription without disrupting the request for other subscribers.\n */\nexport default class SubscribableRequestQueue {\n  private queue: RequestQueue;\n\n  /** The next unused subscriber ID. Increments whenever a subscriber is added. */\n  private nextSubscriberId: number;\n  /**\n   * Map of subscribers keyed by ID. Subscribers store a map to all their subscriptions by request key.\n   * Subscribers are only useful as handles to cancel subscriptions early, so we only need to store rejecters here.\n   */\n  private subscribers: Map<number, Map<string, Rejecter>>;\n  /** Map from \"inner\" request (managed by `queue`) to \"outer\" promises generated per-subscriber. */\n  private requests: Map<string, RequestSubscription[]>;\n\n  /**\n   * Since `SubscribableRequestQueue` wraps `RequestQueue`, its constructor may either take the same arguments as the\n   * `RequestQueue` constructor and create a new `RequestQueue`, or it may take an existing `RequestQueue` to wrap.\n   */\n  constructor(maxActiveRequests?: number, maxLowPriorityRequests?: number);\n  constructor(inner: RequestQueue);\n  constructor(maxActiveRequests?: number | RequestQueue, maxLowPriorityRequests?: number) {\n    if (typeof maxActiveRequests === \"number\" || maxActiveRequests === undefined) {\n      this.queue = new RequestQueue(maxActiveRequests, maxLowPriorityRequests);\n    } else {\n      this.queue = maxActiveRequests;\n    }\n    this.nextSubscriberId = 0;\n    this.subscribers = new Map();\n    this.requests = new Map();\n  }\n\n  /** Resolves all subscriptions to request `key` with `value` */\n  private resolveAll<T>(key: string, value: T): void {\n    const requests = this.requests.get(key);\n    if (requests) {\n      for (const { resolve, subscriberId } of requests) {\n        resolve(value);\n        this.subscribers.get(subscriberId)?.delete(key);\n      }\n      this.requests.delete(key);\n    }\n  }\n\n  /** Rejects all subscriptions to request `key` with `reason` */\n  private rejectAll(key: string, reason: unknown): void {\n    const requests = this.requests.get(key);\n    if (requests) {\n      for (const { reject, subscriberId } of requests) {\n        reject(reason);\n        this.subscribers.get(subscriberId)?.delete(key);\n      }\n      this.requests.delete(key);\n    }\n  }\n\n  /** Adds a new request subscriber. Returns a unique ID to identify this subscriber. */\n  addSubscriber(): number {\n    const subscriberId = this.nextSubscriberId;\n    this.nextSubscriberId++;\n    this.subscribers.set(subscriberId, new Map());\n    return subscriberId;\n  }\n\n  /**\n   * Queues a new request, or adds a subscription if the request is already queued/running.\n   *\n   * If `subscriberId` is already subscribed to the request, this rejects the existing promise and returns a new one.\n   */\n  addRequest<T>(\n    key: string,\n    subscriberId: number,\n    requestAction: () => Promise<T>,\n    lowPriority?: boolean,\n    delayMs?: number\n  ): Promise<T> {\n    // Create single underlying request if it does not yet exist\n    this.queue\n      .addRequest(key, requestAction, lowPriority, delayMs)\n      .then((value) => this.resolveAll(key, value))\n      .catch((reason) => this.rejectAll(key, reason));\n\n    if (!this.requests.has(key)) {\n      this.requests.set(key, []);\n    }\n\n    // Validate subscriber\n    if (subscriberId >= this.nextSubscriberId || subscriberId < 0) {\n      throw new Error(`SubscribableRequestQueue: subscriber id ${subscriberId} has not been registered`);\n    }\n    const subscriber = this.subscribers.get(subscriberId);\n    if (!subscriber) {\n      throw new Error(`SubscribableRequestQueue: subscriber id ${subscriberId} has been removed`);\n    }\n    const existingRequest = subscriber.get(key);\n    if (existingRequest) {\n      this.rejectSubscription(key, existingRequest, \"SubscribableRequestQueue: request re-queued while running\");\n    }\n\n    // Create promise and add to list of requests\n    return new Promise<T>((resolve, reject) => {\n      this.requests.get(key)?.push({ resolve, reject, subscriberId });\n      this.subscribers.get(subscriberId)?.set(key, reject);\n    });\n  }\n\n  /**\n   * Rejects a subscription and removes it from the list of subscriptions for a request, then cancels the underlying\n   * request if it is no longer subscribed and is not running already.\n   */\n  private rejectSubscription(key: string, reject: Rejecter, cancelReason?: unknown): void {\n    // Reject the outer \"subscription\" promise\n    reject(cancelReason);\n\n    // Get the list of subscriptions for this request\n    const subscriptions = this.requests.get(key);\n    if (!subscriptions) {\n      // This should never happen\n      return;\n    }\n    // Remove this request subscription by ref equality to `reject`\n    const idx = subscriptions.findIndex((sub) => sub.reject === reject);\n    if (idx >= 0) {\n      subscriptions.splice(idx, 1);\n    }\n\n    // Remove the underlying request if there are no more subscribers and the request is not already running\n    if (subscriptions.length < 1 && !this.queue.requestRunning(key)) {\n      this.queue.cancelRequest(key, cancelReason);\n      this.requests.delete(key);\n    }\n  }\n\n  /** Cancels a request subscription, and cancels the underlying request if it is no longer subscribed or running. */\n  cancelRequest(key: string, subscriberId: number, cancelReason?: unknown): boolean {\n    const subscriber = this.subscribers.get(subscriberId);\n    if (!subscriber) {\n      return false;\n    }\n\n    const reject = subscriber.get(key);\n    if (!reject) {\n      return false;\n    }\n\n    this.rejectSubscription(key, reject, cancelReason);\n    subscriber.delete(key);\n    return true;\n  }\n\n  /** Removes a subscriber and cancels its remaining subscriptions. */\n  removeSubscriber(subscriberId: number, cancelReason?: unknown): void {\n    const subscriptions = this.subscribers.get(subscriberId);\n    if (subscriptions) {\n      for (const [key, reject] of subscriptions.entries()) {\n        this.rejectSubscription(key, reject, cancelReason);\n      }\n      this.subscribers.delete(subscriberId);\n    }\n  }\n\n  /** Returns whether a request with the given `key` is running or waiting in the queue */\n  hasRequest(key: string): boolean {\n    return this.queue.hasRequest(key);\n  }\n\n  /** Returns whether a request with the given `key` is running */\n  requestRunning(key: string): boolean {\n    return this.queue.requestRunning(key);\n  }\n\n  /** Returns whether a subscriber with the given `subscriberId` exists */\n  hasSubscriber(subscriberId: number): boolean {\n    return this.subscribers.has(subscriberId);\n  }\n\n  /** Returns whether a subscriber with the given `subscriberId` is subscribed to the request with the given `key` */\n  isSubscribed(subscriberId: number, key: string): boolean {\n    return this.subscribers.get(subscriberId)?.has(key) ?? false;\n  }\n}\n","import VolumeCache from \"../VolumeCache.js\";\nimport { VolumeFileFormat, createVolumeLoader, pathToFileType } from \"../loaders/index.js\";\nimport { ThreadableVolumeLoader } from \"../loaders/IVolumeLoader.js\";\nimport RequestQueue from \"../utils/RequestQueue.js\";\nimport SubscribableRequestQueue from \"../utils/SubscribableRequestQueue.js\";\nimport type { WorkerRequest, WorkerRequestPayload, WorkerResponse, WorkerResponsePayload } from \"./types.js\";\nimport { WorkerMsgType, WorkerResponseResult } from \"./types.js\";\nimport { rebuildImageInfo, rebuildLoadSpec } from \"./util.js\";\n\nlet cache: VolumeCache | undefined = undefined;\nlet queue: RequestQueue | undefined = undefined;\nlet subscribableQueue: SubscribableRequestQueue | undefined = undefined;\nlet loader: ThreadableVolumeLoader | undefined = undefined;\nlet initialized = false;\nlet copyOnLoad = false;\n\ntype MessageHandler<T extends WorkerMsgType> = (payload: WorkerRequestPayload<T>) => Promise<WorkerResponsePayload<T>>;\n\nconst messageHandlers: { [T in WorkerMsgType]: MessageHandler<T> } = {\n  [WorkerMsgType.INIT]: ({ maxCacheSize, maxActiveRequests, maxLowPriorityRequests }) => {\n    if (!initialized) {\n      cache = new VolumeCache(maxCacheSize);\n      queue = new RequestQueue(maxActiveRequests, maxLowPriorityRequests);\n      subscribableQueue = new SubscribableRequestQueue(queue);\n      initialized = true;\n    }\n    return Promise.resolve();\n  },\n\n  [WorkerMsgType.CREATE_LOADER]: async ({ path, options }) => {\n    const pathString = Array.isArray(path) ? path[0] : path;\n    const fileType = options?.fileType || pathToFileType(pathString);\n    copyOnLoad = fileType === VolumeFileFormat.JSON;\n    loader = await createVolumeLoader(path, { ...options, cache, queue: subscribableQueue });\n    return loader !== undefined;\n  },\n\n  [WorkerMsgType.CREATE_VOLUME]: async (loadSpec) => {\n    if (loader === undefined) {\n      throw new Error(\"No loader created\");\n    }\n\n    return await loader.createImageInfo(rebuildLoadSpec(loadSpec));\n  },\n\n  [WorkerMsgType.LOAD_DIMS]: async (loadSpec) => {\n    if (loader === undefined) {\n      throw new Error(\"No loader created\");\n    }\n    return await loader.loadDims(rebuildLoadSpec(loadSpec));\n  },\n\n  [WorkerMsgType.LOAD_VOLUME_DATA]: async ({ imageInfo, loadSpec, loaderId, loadId }) => {\n    if (loader === undefined) {\n      throw new Error(\"No loader created\");\n    }\n\n    return await loader.loadRawChannelData(\n      rebuildImageInfo(imageInfo),\n      rebuildLoadSpec(loadSpec),\n      (channelIndex, data, atlasDims) => {\n        const message: WorkerResponse<WorkerMsgType> = {\n          responseResult: WorkerResponseResult.EVENT,\n          loaderId,\n          loadId,\n          channelIndex,\n          data,\n          atlasDims,\n        };\n        const dataTransfers = data.map((d) => d.buffer);\n        (self as unknown as Worker).postMessage(message, copyOnLoad ? [] : dataTransfers);\n      }\n    );\n  },\n\n  [WorkerMsgType.SET_PREFETCH_PRIORITY_DIRECTIONS]: (directions) => {\n    // Silently does nothing if the loader isn't an `OMEZarrLoader`\n    loader?.setPrefetchPriority(directions);\n    return Promise.resolve();\n  },\n\n  [WorkerMsgType.SYNCHRONIZE_MULTICHANNEL_LOADING]: (syncChannels) => {\n    loader?.syncMultichannelLoading(syncChannels);\n    return Promise.resolve();\n  },\n};\n\nself.onmessage = async <T extends WorkerMsgType>({ data }: MessageEvent<WorkerRequest<T>>) => {\n  const { msgId, type, payload } = data;\n  let message: WorkerResponse<T>;\n\n  try {\n    const response = await messageHandlers[type](payload);\n    message = { responseResult: WorkerResponseResult.SUCCESS, msgId, type, payload: response };\n  } catch (e) {\n    message = { responseResult: WorkerResponseResult.ERROR, msgId, type, payload: (e as Error).message };\n  }\n  self.postMessage(message);\n};\n","import type { ImageInfo } from \"../Volume.js\";\nimport type { CreateLoaderOptions, PrefetchDirection } from \"../loaders/index.js\";\nimport type { LoadSpec, LoadedVolumeInfo, VolumeDims } from \"../loaders/IVolumeLoader.js\";\n\n/** The types of requests that can be made to the worker. Mostly corresponds to methods on `IVolumeLoader`. */\nexport const enum WorkerMsgType {\n  INIT,\n  CREATE_LOADER,\n  CREATE_VOLUME,\n  LOAD_DIMS,\n  LOAD_VOLUME_DATA,\n  SET_PREFETCH_PRIORITY_DIRECTIONS,\n  SYNCHRONIZE_MULTICHANNEL_LOADING,\n}\n\n/** The kind of response a worker can return - `SUCCESS`, `ERROR`, or `EVENT`. */\nexport const enum WorkerResponseResult {\n  SUCCESS,\n  ERROR,\n  EVENT,\n}\n\n/** All messages to/from a worker carry a `msgId`, a `type`, and a `payload` (whose type is determined by `type`). */\ntype WorkerMsgBase<T extends WorkerMsgType, P> = {\n  msgId: number;\n  type: T;\n  payload: P;\n};\n\n/** Maps each `WorkerMsgType` to the type of the payload of requests of that type. */\nexport type WorkerRequestPayload<T extends WorkerMsgType> = {\n  [WorkerMsgType.INIT]: {\n    maxCacheSize?: number;\n    maxActiveRequests?: number;\n    maxLowPriorityRequests?: number;\n  };\n  [WorkerMsgType.CREATE_LOADER]: {\n    path: string | string[];\n    options?: CreateLoaderOptions;\n  };\n  [WorkerMsgType.CREATE_VOLUME]: LoadSpec;\n  [WorkerMsgType.LOAD_DIMS]: LoadSpec;\n  [WorkerMsgType.LOAD_VOLUME_DATA]: {\n    imageInfo: ImageInfo;\n    loadSpec: LoadSpec;\n    loaderId: number;\n    loadId: number;\n  };\n  [WorkerMsgType.SET_PREFETCH_PRIORITY_DIRECTIONS]: PrefetchDirection[];\n  [WorkerMsgType.SYNCHRONIZE_MULTICHANNEL_LOADING]: boolean;\n}[T];\n\n/** Maps each `WorkerMsgType` to the type of the payload of responses of that type. */\nexport type WorkerResponsePayload<T extends WorkerMsgType> = {\n  [WorkerMsgType.INIT]: void;\n  [WorkerMsgType.CREATE_LOADER]: boolean;\n  [WorkerMsgType.CREATE_VOLUME]: LoadedVolumeInfo;\n  [WorkerMsgType.LOAD_DIMS]: VolumeDims[];\n  [WorkerMsgType.LOAD_VOLUME_DATA]: Partial<LoadedVolumeInfo>;\n  [WorkerMsgType.SET_PREFETCH_PRIORITY_DIRECTIONS]: void;\n  [WorkerMsgType.SYNCHRONIZE_MULTICHANNEL_LOADING]: void;\n}[T];\n\n/** Currently the only event a loader can produce is a `ChannelLoadEvent` when a batch of channels loads. */\nexport type ChannelLoadEvent = {\n  loaderId: number;\n  loadId: number;\n  channelIndex: number[];\n  data: Uint8Array[];\n  atlasDims?: [number, number];\n};\n\n/** All valid types of worker requests, with some `WorkerMsgType` and a matching payload type. */\nexport type WorkerRequest<T extends WorkerMsgType> = WorkerMsgBase<T, WorkerRequestPayload<T>>;\n/** All valid types of worker responses: `SUCCESS` with a matching payload, `ERROR` with a message, or an `EVENT`. */\nexport type WorkerResponse<T extends WorkerMsgType> =\n  | ({ responseResult: WorkerResponseResult.SUCCESS } & WorkerMsgBase<T, WorkerResponsePayload<T>>)\n  | ({ responseResult: WorkerResponseResult.ERROR } & WorkerMsgBase<T, string>)\n  | ({ responseResult: WorkerResponseResult.EVENT } & ChannelLoadEvent);\n","import { Box3, Vector2, Vector3 } from \"three\";\nimport { LoadSpec } from \"../loaders/IVolumeLoader\";\nimport { ImageInfo } from \"../Volume\";\n\n/** Recreates a `LoadSpec` that has just been sent to/from a worker to restore three.js object prototypes */\nexport function rebuildLoadSpec(spec: LoadSpec): LoadSpec {\n  return {\n    ...spec,\n    subregion: new Box3(new Vector3().copy(spec.subregion.min), new Vector3().copy(spec.subregion.max)),\n  };\n}\n\n/** Recreates an `ImageInfo` that has just been sent to/from a worker to restore three.js object prototypes */\nexport function rebuildImageInfo(imageInfo: ImageInfo): ImageInfo {\n  return {\n    ...imageInfo,\n    originalSize: new Vector3().copy(imageInfo.originalSize),\n    atlasTileDims: new Vector2().copy(imageInfo.atlasTileDims),\n    volumeSize: new Vector3().copy(imageInfo.volumeSize),\n    subregionSize: new Vector3().copy(imageInfo.subregionSize),\n    subregionOffset: new Vector3().copy(imageInfo.subregionOffset),\n    physicalPixelSize: new Vector3().copy(imageInfo.physicalPixelSize),\n    transform: {\n      translation: new Vector3().copy(imageInfo.transform.translation),\n      rotation: new Vector3().copy(imageInfo.transform.rotation),\n    },\n  };\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_babel_runtime_regenerator_index_js-node_modules_babel_runtime_helpers_es-31f4f7\",\"vendors-node_modules_babel_runtime_helpers_esm_classCallCheck_js-node_modules_babel_runtime_h-afcf4f\"], () => (__webpack_require__(\"./src/workers/VolumeLoadWorker.ts\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".volume-viewer-ui.bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_workers_VolumeLoadWorker_ts\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunk_aics_volume_viewer\"] = self[\"webpackChunk_aics_volume_viewer\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\n\t\t__webpack_require__.e(\"vendors-node_modules_babel_runtime_regenerator_index_js-node_modules_babel_runtime_helpers_es-31f4f7\"),\n\t\t__webpack_require__.e(\"vendors-node_modules_babel_runtime_helpers_esm_classCallCheck_js-node_modules_babel_runtime_h-afcf4f\")\n\t]).then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":["DataTexture","RedFormat","UnsignedByteType","RGBAFormat","LinearFilter","NearestFilter","Histogram","LUT_ARRAY_LENGTH","Channel","name","_classCallCheck","loaded","imgData","data","Uint8ClampedArray","width","height","dataTexture","Uint8Array","lutTexture","minFilter","magFilter","generateMipmaps","volumeData","histogram","dims","lut","fill","colorPalette","colorPaletteAlpha","_createClass","key","value","combineLuts","rgbColor","out","ret","rgb","set","i","image","needsUpdate","getHistogram","getIntensity","x","y","z","getIntensityFromAtlas","numXtiles","tilex","tiley","Math","floor","offset","rebuildDataTexture","w","h","dispose","format","type","setBits","bitsArray","buffer","lutGenerator_auto2","unpackVolumeFromAtlas","volimgdata","atlasrow","tileoffset","tilerowoffset","j","k","setFromVolumeData","vx","vy","vz","ax","ay","packToAtlas","console","log","setLut","setColorPalette","palette","setColorPaletteAlpha","alpha","lutGenerator_windowLevel","wnd","lvl","lutGenerator_fullRange","lutGenerator_dataRange","lutGenerator_bestFit","lutGenerator_auto","lutGenerator_equalize","lutGenerator_percentiles","lo","hi","default","getColorByChannelIndex","clamp","val","cmin","cmax","min","max","controlPointToRGBA","controlPoint","color","opacity","lerp","xmin","xmax","a","LUT_ENTRIES","bins","Uint32Array","dataMin","dataMax","maxBin","length","nonzeroPixelCount","getMin","getMax","b","e","lutGenerator_minMax","tmp","controlPoints","startVal","push","endVal","lutGenerator_labelColors","lastr","lastg","lastb","lasta","r","g","findBinOfPercentile","pct","pixcount","limit","count","pmin","pmax","hmin","hmax","AUTO_THRESHOLD","threshold","PERCENTAGE","th","map","div","lutControlPoints","slope","lastSlope","lastOpacity","round","lutGenerator_fromControlPoints","sort","rgba","c0","c1","color0","color1","lastIndex","Vector2","Vector3","LoadSpec","MAX_ATLAS_EDGE","pickLevelToLoadUnscaled","getDefaultImageInfo","originalSize","atlasTileDims","volumeSize","subregionSize","subregionOffset","physicalPixelSize","spatialUnit","numChannels","channelNames","channelColors","times","timeScale","timeUnit","numMultiscaleLevels","multiscaleLevel","transform","translation","rotation","Volume","imageInfo","arguments","undefined","loadSpec","loader","_objectSpread","scaleLevelBias","maxAtlasEdge","channels","Array","from","_val","idx","loadSpecRequired","slice","subregion","clone","imageMetadata","normRegionSize","normRegionOffset","physicalSize","physicalScale","normPhysicalSize","tickMarkPhysicalLength","setVoxelSize","channelColorsDefault","index","channel","toArray","physicalUnitSymbol","volumeDataObservers","setUnloaded","forEach","isLoaded","updateDimensions","_this$imageInfo","divide","mustLoadNewData","_this","time","containsBox","some","includes","mayLoadNewScaleLevel","equals","_updateRequiredData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","required","onChannelLoaded","shouldReload","_this$loader","dimsZYX","levelToLoad","wrap","_callee$","_context","prev","next","loadDims","sent","_ref","shape","loadNewData","stop","updateRequiredData","_x","_x2","apply","_this$loader2","loadVolumeData","size","multiply","divideScalar","pow","log10","setUnitSymbol","symbol","getContentCenter","add","subScalar","cleanup","getChannel","channelIndex","batch","_this2","every","_this2$channelLoadCal","channelLoadCallback","call","observer","onVolumeData","setChannelDataFromAtlas","atlasdata","atlaswidth","atlasheight","_this$imageInfo$subre","setChannelDataFromVolume","_this$imageInfo2","appendEmptyChannel","chname","chcolor","onVolumeChannelAdded","c","getRotation","getTranslation","voxelsToWorldSpace","xyz","m","fromArray","multiplyScalar","addVolumeDataObserver","o","removeVolumeDataObserver","indexOf","splice","removeAllVolumeDataObservers","CACHE_MAX_SIZE_DEFAULT","VolumeCache","maxSize","entries","Map","currentSize","first","last","get","removeEntryFromStore","entry","byteLength","removeEntryFromList","addEntryAsFirst","moveEntryToFirst","evictLast","error","evict","insert","getResult","getEntry","newEntry","result","_this$getEntry","clearWithPrefix","prefix","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","startsWith","err","f","clear","defaultColors","HSVtoRGB","v","hh","hsv","p","q","t","LCG","imul","myrand","Box3","buildDefaultMetadata","_defineProperty","loadSpecToString","spec","_spec$subregion","concat","VolumeDims","ThreadableVolumeLoader","setPrefetchPriority","_directions","syncMultichannelLoading","_sync","_createVolume","_yield$this$createIma","adjustedLoadSpec","vol","createImageInfo","abrupt","createVolume","_loadVolumeData","_callee2","volume","loadSpecOverride","onChannelData","_yield$this$loadRawCh","_callee2$","_context2","channelIndices","dataArrays","atlasDims","loadRawChannelData","_x3","_x4","_x5","convertImageInfo","json","_json$transform","_json$transform2","tiles","cols","rows","tile_width","tile_height","pixel_size_x","pixel_size_y","pixel_size_z","pixel_size_unit","channel_names","channel_colors","time_scale","time_unit","userData","JsonImageInfoLoader","_ThreadableVolumeLoad","_inherits","urls","cache","_callSuper","isArray","jsonInfo","_getJsonImageInfo","cachedInfo","response","fetch","getJsonImageInfo","_loadDims","d","spacing","spaceUnit","dataType","_createImageInfo","_callee3","_callee3$","_context3","_loadRawChannelData","_callee4","onData","images","requestedChannels","urlPrefix","wrappedOnData","_callee4$","_context4","filter","ch","replace","element","loadVolumeAtlasData","flatMap","_ref2","_x6","imageArray","_ref3","_callee5","cacheHit","chindex","cacheResult","blob","bitmap","canvas","ctx","iData","channelsBits","_j","px","_ch","_chindex","_callee5$","_context5","mode","createImageBitmap","OffscreenCanvas","getContext","globalCompositeOperation","globalAlpha","drawImage","getImageData","_x7","zarr","zarrGet","FetchStore","SubscribableRequestQueue","composeSubregion","computePackedAtlasDims","convertSubregionToPixels","pickLevelToLoad","unitNameToSymbol","ChunkPrefetchIterator","WrappedStore","getDimensionCount","getScale","matchSourceScaleLevels","orderByDimension","orderByTCZYX","remapAxesToTCZYX","CHUNK_REQUEST_CANCEL_REASON","convertChannel","channelData","u8","range","DEFAULT_FETCH_OPTIONS","maxPrefetchDistance","maxPrefetchChunks","OMEZarrLoader","sources","requestQueue","fetchOptions","priorityDirections","_assertThisInitialized","getUnitSymbols","source","xi","axesTCZYX","spaceUnitName","multiscaleMetadata","axes","unit","spaceUnitSymbol","ti","timeUnitName","timeUnitSymbol","getLevelShapesZYX","_source$axesTCZYX$sli","_source$axesTCZYX$sli2","scaleLevels","level","datasets","valsTCZYX","sourceIdx","valsDimension","defaultValue","matchChannelToSource","absoluteChannelIndex","lastSrcIdx","lastSrc","lastSrcNumChannels","channelOffset","Error","firstGreaterIdx","findIndex","src","sourceIndex","channelIndexInSource","directions","sync","syncChannels","_this$maxExtent","_this$getUnitSymbols","_this$getUnitSymbols2","maxExtent","regionSize","getSize","regionArr","scale","ceil","Promise","resolve","source0","_source0$axesTCZYX","hasT","hasZ","shape0","shapeLv","_this$getUnitSymbols3","_this$getUnitSymbols4","sourceLast","cLast","lastHasC","pxDims0","pxSize0","pxDimsLv","pxSizeLv","channelNamesMap","omeroMetadata","numMatchingChannels","label","scale5d","imgdata","fullExtentLoadSpec","_prefetchChunk","scaleLevel","coords","subscriber","store","path","separator","endsWith","join","isPrefetch","t0","prefetchChunk","beginPrefetch","keys","_this3","chunkCoords","numDims","coordsInDimensionOrder","trim","split","parseInt","sourceCoords","source0Shape","chunkDimsUnordered","dim","chunks","chunkDims","addSubscriber","chunkDimsTZYX","prefetchIterator","prefetchCount","chunk","_this$matchChannelToS","sourceScaleLevel","prefetchSubscriber","removeSubscriber","updateImageInfoForLoad","_this$maxExtent2","array0Shape","_this$sources$0$axesT","_this$sources$0$axesT2","regionPx","volumeExtent","_loadSpec$channels","_this4","updatedImageInfo","channelIndexes","_","reportKeyBase","sub","resultChannelIndices","resultChannelData","channelPromises","_this4$matchChannelTo","sourceCh","unorderedSpec","sliceSpec","reportKey","opts","loadSubscriber","all","then","_createLoader","scenes","queue","urlsArr","scenesArr","sourceProms","channelCount","_iterator2","_step2","priorityDirs","_args4","concurrencyLimit","prefetchConcurrencyLimit","_ref4","url","root","group","_ref5","multiscales","omero","scene","lvlProms","open","kind","attrs","warn","_ref6","createLoader","fromUrl","prepareXML","xml","expr","getOME","parser","DOMParser","xmlDoc","parseFromString","omeEl","getElementsByTagName","OMEDims","getOMEDims","imageEl","pixelsEl","sizex","Number","getAttribute","sizey","sizez","sizec","sizet","pixeltype","dimensionorder","pixelsizex","pixelsizey","pixelsizez","channelsEls","id","channelnames","getBytesPerSample","TiffLoader","_loadOmeDims","tiff","tiffimgdesc","image0El","allowFullFile","getImage","getFileDirectory","ImageDescription","loadOmeDims","_loadSpec","targetSize","tilesizex","tilesizey","_loop","params","worker","_loop$","dimensionOrder","bytesPerSample","Worker","URL","import","meta","onmessage","terminate","onerror","alert","lineno","filename","message","postMessage","delegateYield","UNIT_SYMBOLS","angstrom","day","foot","hour","inch","meter","mile","minute","parsec","second","yard","SI_UNITS","SI_PREFIX_ABBVS","micro","deca","unitName","prefixedSIUnit","find","siUnit","substring","capitalize","prefixAbbr","toUpperCase","tw","nextrows","nextcols","ratio","nrows","ncols","estimateLevelForAtlas","spatialDimsZYX","xtiles","ytiles","maxCeil","scaleDims","scaleDimsToSubregion","scaleMultipleDimsToSubregion","_loadSpec$scaleLevelB","_loadSpec$multiscaleL","optimalLevel","scaledDims","region","container","isEmpty","obj","Object","prototype","hasOwnProperty","metadata","PrefetchDirection","VolumeFileFormat","pathToFileType","JSON","TIFF","ZARR","createVolumeLoader","_createVolumeLoader","options","pathString","fileType","directionToIndex","dir","absDir","updateMinMax","minmax","_Symbol$iterator","tzyxMaxPrefetchOffset","tzyxNumChunks","extrema","Infinity","directionStates","priorityDirectionStates","flat","_step2$value","direction","start","dimension","end","directionState","_iterator3","_step3","_iterator4","_step4","_iterator5","_step5","_iterator6","_step6","_iterator7","_step7","_chunk2","value$","iterateDirections","finish","t1","_iterator8","_step8","_iterator9","_step9","newChunk","iterateDirections$","Symbol","iterator","baseStore","_key","_value","_getAndCache","cacheKey","getAndCache","_get","_url","ZARR_EXTS","keyPrefix","fullKey","addRequest","axisNames","axis","axisIdx","orderTCZYX","specLen","dataset","transforms","coordinateTransformations","isScaleTransform","scaleTransform","compareZarrArraySize","aArr","aTCZYX","bArr","bTCZYX","aZ","bZ","diffZ","diffY","diffX","EPSILON","aboutEquals","abs","scaleTransformsAreEqual","aSrc","aLevel","bSrc","bLevel","aScale","bScale","matchedLevels","matchedMetas","scaleIndexes","allEqual","smallestIdx","smallestSrc","smallestArr","currentSrc","currentIdx","currentArr","ordering","largestT","currentT","matchedScaleLevel","srcIdx","DEFAULT_REQUEST_CANCEL_REASON","RequestQueue","maxActiveRequests","maxLowPriorityRequests","allRequests","activeRequests","Set","queueLowPriority","registerRequest","requestAction","promiseResolve","promiseReject","promise","reject","requestItem","action","addRequestToQueue","lowPriority","has","timeoutId","clearTimeout","dequeue","_this$allRequests$get","delayMs","setTimeout","lowPriorityIndex","addRequests","requests","promises","item","_dequeue","_this$queue$shift","numRequests","requestKey","shift","cancelRequest","cancelReason","queueIndex","cancelAllRequests","hasRequest","requestRunning","nextSubscriberId","subscribers","resolveAll","_this$subscribers$get","subscriberId","rejectAll","reason","_this$subscribers$get2","existingRequest","rejectSubscription","_this$requests$get","_this$subscribers$get3","subscriptions","_step3$value","hasSubscriber","isSubscribed","_this$subscribers$get4","_this$subscribers$get5","WorkerMsgType","WorkerResponseResult","rebuildImageInfo","rebuildLoadSpec","subscribableQueue","initialized","copyOnLoad","messageHandlers","INIT","maxCacheSize","CREATE_LOADER","CREATE_VOLUME","LOAD_DIMS","LOAD_VOLUME_DATA","_ref7","loaderId","loadId","responseResult","EVENT","dataTransfers","self","SET_PREFETCH_PRIORITY_DIRECTIONS","_loader","SYNCHRONIZE_MULTICHANNEL_LOADING","_loader2","_ref9","_ref8","msgId","payload","SUCCESS","ERROR","copy"],"sourceRoot":""}